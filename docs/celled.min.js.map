{"version":3,"file":"celled.min.js","sources":["../src/lib/events.ts","../src/lib/grid.ts","../src/lib/csv.ts"],"sourcesContent":["\r\nexport interface EventArgs {}\r\nexport type EventHandlerBase = (arg: EventArgs) => any;\r\n\r\nexport interface EventHandler<T> extends EventHandlerBase {\r\n    (arg: T): any;\r\n}\r\n\r\nexport class EventEmitter {\r\n    handlers: { [event: string]: EventHandlerBase[] } = {};\r\n\r\n    addHandler(event: string, handler: EventHandlerBase) {\r\n        const handlers = this.handlers;\r\n        handlers[event] = handlers[event] || [];\r\n        handlers[event].push(handler);\r\n    }\r\n\r\n    removeHandler(event: string, handler: EventHandlerBase) {\r\n        const allHandlers = this.handlers;\r\n        const handlers = allHandlers[event];\r\n        if (handlers && handler) {\r\n            handlers.splice(handlers.indexOf(handler), 1);\r\n        }\r\n    }\r\n\r\n    emit<TArgs extends EventArgs>(event: string, args: TArgs) {\r\n        const handlers = this.handlers[event];\r\n        if (handlers) {\r\n           handlers.forEach(handler => {\r\n                try {\r\n                    handler(args);\r\n                }\r\n                catch {}\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { EventEmitter, EventHandler, EventHandlerBase } from './events';\r\nimport { parseCSV, writeCSV } from './csv';\r\n\r\nexport type CellValue = string | number;\r\n\r\nexport interface CellValueOptions {\r\n    readonly?: boolean;\r\n    value: CellValue;\r\n}\r\n\r\nexport type RowOptions = Array<CellValue | CellValueOptions>;\r\n\r\nexport interface GridOptions {\r\n    cols: Array<string | number>;\r\n    rows: Array<RowOptions>;\r\n    input?: HTMLInputElement | (() => HTMLInputElement);\r\n    canAddRows?: boolean;\r\n}\r\n\r\nexport interface InputArgs {\r\n    grid: Grid;\r\n    row: number;\r\n    col: number;\r\n    value: string;\r\n}\r\n\r\n\r\nexport interface SelectArgs {\r\n    grid: Grid;\r\n    selection: Array<{ row: number, col: number }>;\r\n}\r\n\r\nconst CSS_PREFIX = 'ced';\r\nconst CSS_CONTAINER = `${CSS_PREFIX}-grid-container`;\r\nconst CSS_GRID = `${CSS_PREFIX}-grid`;\r\nconst CSS_ROW = `${CSS_PREFIX}-row`;\r\nconst CSS_CELL = `${CSS_PREFIX}-cell`;\r\nconst CSS_HEAD = `${CSS_PREFIX}-head`;\r\nconst CSS_RESIZER = `${CSS_PREFIX}-resizer`;\r\nconst CSS_EDITING = `${CSS_PREFIX}-editing`;\r\nconst CSS_ACTIVE = `${CSS_PREFIX}-active`;\r\nconst CSS_SELECTED = `${CSS_PREFIX}-selected`;\r\nconst CSS_READONLY = `${CSS_PREFIX}-readonly`;\r\n\r\nfunction css(className) {\r\n    return '.' + className;\r\n}\r\n\r\nexport class Grid {\r\n\r\n    private container: Element;\r\n    private grid: HTMLElement;\r\n    private rows: Row[] = [];\r\n    private cells: Cell[] = [];\r\n    private activeCell: Cell;\r\n    private events: EventEmitter = new EventEmitter();\r\n    private hiddenInput: HTMLElement;\r\n    private options: GridOptions;\r\n    private cellInput: HTMLInputElement;\r\n\r\n    constructor(container: string | Element, options?: GridOptions) {\r\n        this.container = typeof container === 'string' ? query(container) : container;\r\n        if (options) {\r\n            this.init(options);\r\n        }\r\n    }\r\n\r\n    init(options: GridOptions) {\r\n        this.options = options;\r\n        const container = this.container;\r\n        const rows = this.rows;\r\n        container.innerHTML = '';\r\n        rows.length = 0;\r\n\r\n        if (options.input) {\r\n            this.cellInput = typeof options.input === 'function' ? options.input() : options.input;\r\n            remove(this.cellInput);\r\n        }\r\n        else {\r\n            this.cellInput = createElement<HTMLInputElement>(`<input id=\"celled-cell-input\" type=\"text\" >`);\r\n        }\r\n        this.hiddenInput = createElement(\r\n            '<div id=\"celled-hidden-input\" style=\"position:absolute; z-index:-1; left:2px; top: 2px;\" contenteditable tabindex=\"0\"></div>');\r\n        const gridContainer = createElement(`<div class=\"${CSS_CONTAINER}\"></div>`);\r\n        const grid = this.grid = createElement(\r\n            `<div class=\"${CSS_GRID}\"><div class=\"${CSS_ROW} ${CSS_HEAD}\"></div></div>`);\r\n\r\n        container.appendChild(gridContainer);\r\n        gridContainer.appendChild(this.hiddenInput);\r\n        gridContainer.appendChild(grid);\r\n        const head = query(container, css(CSS_HEAD));\r\n        options.cols.forEach((c, index) => head.appendChild(this.createHeadCell(c, index)));\r\n        this.createRows();\r\n        this.initMouse();\r\n        this.initKeys();\r\n        this.initClipboard();\r\n        queryAll(head, css(CSS_CELL)).forEach((c: HTMLElement) => c.style.width = c.offsetWidth + 'px');\r\n    }\r\n\r\n    /**\r\n     * Adds an event listener.\r\n     * Grid fires these events:\r\n     * 'input', 'focus', 'select'\r\n     */\r\n    on(event: 'input' | 'focus', handler: EventHandler<InputArgs>);\r\n    on(event: 'select', handler: EventHandler<SelectArgs>);\r\n    on(event: string, handler: EventHandlerBase) {\r\n        this.events.addHandler(event, handler);\r\n    }\r\n\r\n    update(row: number, col: number, value: string) {\r\n        this.setCell(this.rows[row].cells[col], value);\r\n    }\r\n\r\n    addRows(rows: RowOptions[]) {\r\n        if (this.options.canAddRows) {\r\n            [].push.apply(this.options.rows, rows);\r\n            rows.forEach(r => {\r\n                const newRow = this.createRow(r);\r\n                newRow.cells.forEach(c => this.emitInput(c));\r\n            });\r\n            this.flattenCells();\r\n        }\r\n    }\r\n\r\n    addRow() {\r\n        this.addRows([this.options.cols.map(c => '')]);\r\n    }\r\n\r\n    private createHeadCell(text: string | number, columnIndex: number) {\r\n        const column = createElement(`<div class=\"${CSS_CELL}\" data-ci=\"${columnIndex}\"><span>${text}</span></div>`);\r\n        const resizer = createElement(`<div class=\"${CSS_RESIZER}\"></div>`);\r\n        column.appendChild(resizer);\r\n\r\n        let downPosition = null;\r\n        let nextColumn = null;\r\n        let currentWidth = null;\r\n        let currentNextWidth = null;\r\n        let selection = null;\r\n\r\n        const mousemove = (e: MouseEvent) => {\r\n            if (selection) {\r\n                let col = e.target as Element;\r\n                while (col) {\r\n                    const ciAttr = col.getAttribute('data-ci');\r\n                    const ci = +ciAttr;\r\n                    if (ciAttr !== null && !isNaN(ci)) {\r\n                        const minCol = Math.min(columnIndex, ci);\r\n                        const maxCol = Math.max(columnIndex, ci);\r\n                        if (selection[0] !== minCol || selection[1] !== maxCol) {\r\n                            selection = [minCol, maxCol];\r\n                            this.cells.forEach(c => c.select(c.col >= minCol && c.col <= maxCol));\r\n                            this.emitSelect();\r\n                        }\r\n                        break;\r\n                    }\r\n                    col = col.parentElement;\r\n                }\r\n            }\r\n            else {\r\n                const diff = e.pageX - downPosition;\r\n                if (nextColumn) {\r\n                    nextColumn.style.width = (currentNextWidth - diff) + 'px';\r\n                }\r\n                column.style.width = (currentWidth + diff) + 'px';\r\n            }\r\n        };\r\n\r\n        const mouseup = () => {\r\n            downPosition = null;\r\n            selection = null;\r\n            off(document, 'mousemove', mousemove);\r\n            off(document, 'mouseup', mouseup);\r\n        };\r\n\r\n        on(column, 'mousedown', (e: MouseEvent) => {\r\n            if (e.target === resizer) {\r\n                // Resize columns\r\n                nextColumn = column.nextElementSibling;\r\n                downPosition = e.pageX;\r\n                currentWidth = column.offsetWidth;\r\n                currentNextWidth = nextColumn ? nextColumn.offsetWidth : null;\r\n            }\r\n            else if (this.rows.length) {\r\n                // Select column\r\n                const i = +column.getAttribute('data-ci');\r\n                selection = true;\r\n                this.cells.forEach(c => c.activate(false).select(c.col === i));\r\n                selection = [i, i];\r\n                this.hiddenInput.focus();\r\n                this.activeCell = this.rows[0].cells[i];\r\n                this.emitSelect();\r\n            }\r\n            on(document, 'mouseup', mouseup);\r\n            on(document, 'mousemove', mousemove);\r\n            e.preventDefault();\r\n        });\r\n\r\n        return column;\r\n    }\r\n\r\n    private createRow(r: RowOptions): Row {\r\n        const row = new Row(this.rows.length);\r\n        row.addCells(r);\r\n        this.rows.push(row);\r\n        this.grid.appendChild(row.element);\r\n        return row;\r\n    }\r\n\r\n    private createRows() {\r\n        this.rows = [];\r\n        this.options.rows.forEach(r => this.createRow(r));\r\n        this.flattenCells();\r\n    }\r\n\r\n    private flattenCells() {\r\n        this.cells = this.rows.reduce((a, b) => a.concat(b.cells), [] as Cell[]);\r\n    }\r\n\r\n    private initMouse() {\r\n        const rows = this.rows;\r\n        let downCellIndex: number;\r\n        let downRowIndex: number;\r\n\r\n        let selectionIdentifier: string = null;\r\n        const rememberSelection = (r1, c1, r2, c2) => '' + r1 + c1 + r2 + c2;\r\n\r\n        const getTargetCell = (e: MouseEvent) => {\r\n            const cell = e.target as Element;\r\n            if (!cell || !cell.parentElement) {\r\n                return;\r\n            }\r\n            const cellIndexAttr = cell.getAttribute('data-ci');\r\n            const rowIndexAttr = cell.parentElement.getAttribute('data-ri');\r\n            const cellIndex = +cellIndexAttr;\r\n            const rowIndex = +rowIndexAttr;\r\n            if (cellIndexAttr && rowIndexAttr && !isNaN(cellIndex) && !isNaN(rowIndex)) {\r\n                return this.rows[rowIndex].cells[cellIndex];\r\n            }\r\n        };\r\n\r\n        const mousemove = (moveEvent: MouseEvent) => {\r\n            const targetCell = getTargetCell(moveEvent);\r\n            if (targetCell) {\r\n                const rowIndex = targetCell.row;\r\n                const cellIndex = targetCell.col;\r\n                const firstRow = Math.min(rowIndex, downRowIndex);\r\n                const lastRow = Math.max(rowIndex, downRowIndex);\r\n                const firstCol = Math.min(cellIndex, downCellIndex);\r\n                const lastCol = Math.max(cellIndex, downCellIndex);\r\n                const newSelectionIdentifier = rememberSelection(firstRow, firstCol, lastRow, lastCol);\r\n                if (selectionIdentifier !== newSelectionIdentifier) {\r\n                    selectionIdentifier = newSelectionIdentifier;\r\n                    this.unselect();\r\n                    for (let ri = firstRow; ri <= lastRow; ++ri) {\r\n                        for (let ci = firstCol; ci <= lastCol; ++ci) {\r\n                            this.rows[ri].cells[ci].select();\r\n                        }\r\n                    }\r\n                    this.emitSelect();\r\n                }\r\n            }\r\n        };\r\n\r\n        const mouseup = () => {\r\n            off(document, 'mousemove', mousemove);\r\n            off(document, 'mouseup', mouseup);\r\n        };\r\n\r\n        let lastMouseDown = Date.now();\r\n        on(this.grid, 'mousedown', (e: MouseEvent) => {\r\n            const cell = getTargetCell(e);\r\n            if (cell) {\r\n                const timeSinceLast = Date.now() - lastMouseDown;\r\n                lastMouseDown = Date.now();\r\n                if (cell.input) {\r\n                    return;\r\n                }\r\n                else if (cell === this.activeCell && !cell.readonly && timeSinceLast < 300) {\r\n                    cell.startEdit(this.cellInput);\r\n                    this.emitFocus();\r\n                }\r\n                else {\r\n                    const rowIndex = cell.row;\r\n                    const cellIndex = cell.col;\r\n                    downRowIndex = rowIndex;\r\n                    downCellIndex = cellIndex;\r\n                    selectionIdentifier = rememberSelection(rowIndex, cellIndex, rowIndex, cellIndex);\r\n                    this.activate(cell);\r\n                    on(document, 'mouseup', mouseup);\r\n                    on(document, 'mousemove', mousemove);\r\n                }\r\n                e.preventDefault();\r\n            }\r\n        });\r\n\r\n        on(document, 'mouseup', (e: MouseEvent) => {\r\n            if (this.activeCell) {\r\n                // Unselect all if was click outside of the grid.\r\n                for (let target = e.target as Node; target; target = target.parentNode) {\r\n                    if (target === this.container) {\r\n                        return;\r\n                    }\r\n                }\r\n                this.activeCell.activate(false);\r\n                if (this.unselect()) {\r\n                    this.emitSelect();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private activate(cell: Cell, doActivate = true) {\r\n        if (this.activeCell) {\r\n            this.activeCell.activate(false);\r\n        }\r\n        let selectionChanged = false;\r\n        this.cells.forEach(c => {\r\n            selectionChanged = c === cell ? (c.selected() !== doActivate) : (selectionChanged || c.selected());\r\n            c.select(false);\r\n        });\r\n        this.activeCell = cell.select(doActivate).activate(doActivate);\r\n        if (selectionChanged) {\r\n            this.emitSelect();\r\n        }\r\n        this.hiddenInput.focus();  // focus to receive paste events\r\n    }\r\n\r\n    private moveActive(rowDelta: number, colDelta: number, addRows = false) {\r\n        const activeCell = this.activeCell;\r\n        if (activeCell) {\r\n            const rows = this.rows;\r\n            const rowIndex = activeCell.row + rowDelta;\r\n            while (addRows && this.options.canAddRows && rowIndex >= rows.length) {\r\n                this.addRow();\r\n            }\r\n            const nextRow = rows[rowIndex];\r\n            if (nextRow) {\r\n                const cell = nextRow.cells[activeCell.col + colDelta];\r\n                if (cell) {\r\n                    this.activate(cell);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private initKeys() {\r\n        const hiddenInput = this.hiddenInput;\r\n\r\n        on(hiddenInput, 'keydown', (e: KeyboardEvent) => {\r\n            e = e || window.event as KeyboardEvent;\r\n            const keyCode = e.keyCode;\r\n            if (keyCode === 46) {  // del\r\n                this.cells.forEach(cell => {\r\n                    if (cell.selected()) {\r\n                        this.setCell(cell, '');\r\n                    }\r\n                });\r\n                e.preventDefault();\r\n            }\r\n            if (keyCode === 37) {\r\n                this.moveActive(0, -1);\r\n            }\r\n            if (keyCode === 38) {\r\n                this.moveActive(-1, 0);\r\n            }\r\n            if (keyCode === 39) {\r\n                this.moveActive(0, 1);\r\n            }\r\n            if (keyCode === 40) {\r\n                this.moveActive(1, 0);\r\n            }\r\n        });\r\n\r\n        const onInput = (e: KeyboardEvent) => {\r\n            const activeCell = this.activeCell;\r\n            if (activeCell && !activeCell.readonly && activeCell.input) {\r\n                this.updatValue(activeCell);\r\n                this.cells.forEach(cell => {\r\n                    if (cell.selected() && cell !== activeCell) {\r\n                        this.setCell(cell, activeCell.value());\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        on(this.cellInput, 'input', onInput);\r\n        on(this.cellInput, 'keydown', (e: KeyboardEvent) => {\r\n            if (e.keyCode === 13) {\r\n                // ENTER, stop edit and move to next row\r\n                this.moveActive(0, 0);\r\n                this.moveActive(1, 0, true);\r\n                e.preventDefault();\r\n            }\r\n            if (e.keyCode === 27) {\r\n                // ESCAPE, stop edit but stay at same cell\r\n                this.moveActive(0, 0);\r\n                e.preventDefault();\r\n            }\r\n        });\r\n\r\n        on(hiddenInput, 'keypress', (e: KeyboardEvent) => {\r\n            const activeCell = this.activeCell;\r\n            if (activeCell && !activeCell.readonly && !activeCell.input) {\r\n                activeCell.startEdit(this.cellInput, true);\r\n                this.emitFocus();\r\n            }\r\n            else {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private initClipboard() {\r\n        on(this.hiddenInput, 'paste', (e: ClipboardEvent) => {\r\n            // Don't actually paste to hidden input\r\n            e.preventDefault();\r\n            const text = (e.clipboardData || (window as any).clipboardData).getData('text');\r\n            const csv = parseCSV(text, '\\t');\r\n            const activeCell = this.activeCell;\r\n            if (!activeCell) {\r\n                return;\r\n            }\r\n            csv.forEach((csvRow, csvRowIndex) => {\r\n                let tableRow = this.rows[activeCell.row + csvRowIndex];\r\n                if (!tableRow && this.options.canAddRows) {\r\n                    const prevRow = this.rows[activeCell.row];\r\n                    this.addRows([prevRow.cells.map(c => c.value())]);\r\n                    tableRow = this.rows[activeCell.row + csvRowIndex];\r\n                }\r\n                const tableCol = activeCell.col;\r\n                const isLastEmptyRow = csvRow.length === 1 && csvRow[0] === '';\r\n                if (tableRow && !isLastEmptyRow) {\r\n                    csvRow.forEach((csvCell, csvColIndex) => {\r\n                        const cell = tableRow.cells[tableCol + csvColIndex];\r\n                        if (cell && !cell.readonly) {\r\n                            this.setCell(cell, csvCell);\r\n                            cell.select();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        on(this.hiddenInput, 'copy', (e: ClipboardEvent) => {\r\n            e.preventDefault();\r\n            const activeCell = this.activeCell;\r\n            if (!activeCell) {\r\n                return;\r\n            }\r\n\r\n            const csv = [];\r\n            for (let ri = activeCell.row; ; ri++) {\r\n                const row = this.rows[ri];\r\n                const csvRow = [];\r\n                if (!row || !row.cells[activeCell.col] || !row.cells[activeCell.col].selected()) {\r\n                    break;\r\n                }\r\n                for (let ci = activeCell.col; ; ++ci) {\r\n                    const cell = row.cells[ci];\r\n                    if (!cell || !cell.selected()) {\r\n                        break;\r\n                    }\r\n                    csvRow.push(cell.value());\r\n                }\r\n                csv.push(csvRow);\r\n            }\r\n            const clipboard = (e.clipboardData || (window as any).clipboardData);\r\n            clipboard.setData('text/plain', writeCSV(csv, '\\t'));\r\n        });\r\n    }\r\n\r\n    private setCell(cell: Cell, value: string) {\r\n        if (!cell.readonly) {\r\n            cell.set(value);\r\n            this.updatValue(cell);\r\n        }\r\n    }\r\n\r\n    private unselect(): boolean {\r\n        let selectionChanged = false;\r\n        this.cells.forEach(c => {\r\n            selectionChanged = selectionChanged || c.selected();\r\n            c.select(false);\r\n        });\r\n        return selectionChanged;\r\n    }\r\n\r\n    private updatValue(cell: Cell) {\r\n        const colIndex = cell.col;\r\n        const rowOption = this.options.rows[cell.row];\r\n        const cellValue = rowOption[colIndex];\r\n        if (typeof cellValue === 'string' || typeof cellValue === 'number') {\r\n            rowOption[colIndex] = cell.value();\r\n        }\r\n        else {\r\n            cellValue.value = cell.value();\r\n        }\r\n        this.emitInput(cell);\r\n    }\r\n\r\n    private emitInput(cell: Cell) {\r\n        this.events.emit<InputArgs>('input', {\r\n            grid: this,\r\n            col: cell.col,\r\n            row: cell.row,\r\n            value: cell.value(),\r\n        });\r\n    }\r\n\r\n    private emitFocus() {\r\n        const cell = this.activeCell;\r\n        this.events.emit<InputArgs>('focus', {\r\n            grid: this,\r\n            col: cell.col,\r\n            row: cell.row,\r\n            value: cell.value(),\r\n        });\r\n    }\r\n\r\n    private emitSelect() {\r\n        this.events.emit<SelectArgs>('select', {\r\n            grid: this,\r\n            selection: this.cells.filter(c => c.selected()).map(c => ({\r\n                row: c.row,\r\n                col: c.col,\r\n            })),\r\n        });\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    element: HTMLElement;\r\n    input: HTMLInputElement;\r\n    readonly = false;\r\n\r\n    constructor(public row: number, public col: number, value: CellValue | CellValueOptions) {\r\n        let text: string;\r\n        if (typeof value === 'string' || typeof value === 'number') {\r\n            text = value.toString();\r\n        }\r\n        else {\r\n            this.readonly = value.readonly;\r\n            text = value.value.toString();\r\n        }\r\n        const className = CSS_CELL + (this.readonly ? ' ' + CSS_READONLY : '');\r\n        this.element = createElement(`<div data-ci=\"${col}\" class=\"${className}\">${text}</div>`);\r\n    }\r\n\r\n    selected() {\r\n        return this.element.className.indexOf(CSS_SELECTED) >= 0;\r\n    }\r\n\r\n    select(doSelect = true) {\r\n        const classList = this.element.classList;\r\n        if (doSelect) {\r\n            classList.add(CSS_SELECTED);\r\n        }\r\n        else {\r\n            classList.remove(CSS_SELECTED);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    activate(doActivate = true) {\r\n        const classList = this.element.classList;\r\n        if (doActivate) {\r\n            classList.add(CSS_ACTIVE);\r\n            classList.add(CSS_SELECTED);\r\n        }\r\n        else {\r\n            classList.remove(CSS_ACTIVE);\r\n            classList.remove(CSS_EDITING);\r\n            if (this.input) {\r\n                this.input.blur();\r\n                remove(this.input);\r\n                this.element.innerHTML = this.input.value;\r\n                this.input = null;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    value() {\r\n        return this.input ? this.input.value : this.element.innerHTML;\r\n    }\r\n\r\n    set(value: string) {\r\n        if (!this.readonly) {\r\n            if (this.input) {\r\n                this.input.value = value;\r\n            }\r\n            else {\r\n                this.element.innerHTML = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    startEdit(input: HTMLInputElement, select = false) {\r\n        if (this.readonly) {\r\n            return;\r\n        }\r\n        const element = this.element;\r\n        this.input = input;\r\n        input.value = element.innerHTML;\r\n        if (select) {\r\n            input.select();   \r\n        }\r\n        input.style.width = element.offsetWidth - 2 + 'px';\r\n        element.classList.add(CSS_EDITING);\r\n        element.innerHTML = '';\r\n        element.appendChild(input);\r\n        input.focus();\r\n    }\r\n}\r\n\r\nclass Row {\r\n    element: Element;\r\n    cells: Cell[] = [];\r\n\r\n    constructor(public index: number) {\r\n        this.element = createElement(`<div data-ri=\"${index}\" class=\"${CSS_ROW}\"></div>`) as Element;\r\n    }\r\n\r\n    addCells(cells: Array<CellValue | CellValueOptions>) {\r\n        cells.forEach((c, columnIndex) => {\r\n            const cell = new Cell(this.index, columnIndex, c);\r\n            this.cells.push(cell);\r\n            this.element.appendChild(cell.element);\r\n        });\r\n    }\r\n}\r\n\r\n// ----\r\nfunction query(elOrCss, cssSelector?): Element {\r\n    if (!cssSelector) {\r\n        cssSelector = elOrCss;\r\n        elOrCss = document;\r\n    }\r\n    return elOrCss.querySelector(cssSelector);\r\n}\r\n\r\nfunction queryAll(elOrCss, cssSelector?): Element[] {\r\n    if (!cssSelector) {\r\n        cssSelector = elOrCss;\r\n        elOrCss = document;\r\n    }\r\n    return [].slice.call(elOrCss.querySelectorAll(cssSelector));\r\n}\r\n\r\nfunction createElement<T extends HTMLElement>(html: string): T {\r\n    const div = document.createElement('div');\r\n    div.innerHTML = html.trim();\r\n    return div.firstChild as T;\r\n}\r\n\r\nfunction on(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    element.addEventListener(event, listener);\r\n}\r\n\r\nfunction off(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    element.removeEventListener(event, listener);\r\n}\r\n\r\nfunction getKey(e: KeyboardEvent) {\r\n    e = e || window.event as KeyboardEvent;\r\n    return String.fromCharCode(e.keyCode || e.which);\r\n}\r\n\r\nfunction remove(node: Node) {\r\n    if (node.parentNode) {\r\n        node.parentElement.removeChild(node);\r\n    }\r\n}\r\n","// ref: http://stackoverflow.com/a/1293163/2343\r\n// This will parse a delimited string into an array of\r\n// arrays. The default delimiter is the comma, but this\r\n// can be overriden in the second argument.\r\nexport function parseCSV(strData: string, strDelimiter: string): Array<string[]> {\r\n    // Check to see if the delimiter is defined. If not,\r\n    // then default to comma.\r\n    strDelimiter = (strDelimiter || ',');\r\n\r\n    // Create a regular expression to parse the CSV values.\r\n    const objPattern = new RegExp(\r\n        (\r\n            // Delimiters.\r\n            '(\\\\' + strDelimiter + '|\\\\r?\\\\n|\\\\r|^)' +\r\n\r\n            // Quoted fields.\r\n            '(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|' +\r\n\r\n            // Standard fields.\r\n            '([^\"\\\\' + strDelimiter + '\\\\r\\\\n]*))'\r\n        ),\r\n        'gi'\r\n    );\r\n\r\n    // Create an array to hold our data. Give the array\r\n    // a default empty first row.\r\n    const arrData = [[]];\r\n\r\n    // Create an array to hold our individual pattern\r\n    // matching groups.\r\n    let arrMatches = null;\r\n\r\n    // Keep looping over the regular expression matches\r\n    // until we can no longer find a match.\r\n    while (arrMatches = objPattern.exec(strData)) {\r\n\r\n        // Get the delimiter that was found.\r\n        const strMatchedDelimiter = arrMatches[1];\r\n\r\n        // Check to see if the given delimiter has a length\r\n        // (is not the start of string) and if it matches\r\n        // field delimiter. If id does not, then we know\r\n        // that this delimiter is a row delimiter.\r\n        if (\r\n            strMatchedDelimiter.length &&\r\n            strMatchedDelimiter !== strDelimiter\r\n        ) {\r\n\r\n            // Since we have reached a new row of data,\r\n            // add an empty row to our data array.\r\n            arrData.push([]);\r\n        }\r\n\r\n        let strMatchedValue;\r\n\r\n        // Now that we have our delimiter out of the way,\r\n        // let's check to see which kind of value we\r\n        // captured (quoted or unquoted).\r\n        if (arrMatches[2]) {\r\n\r\n            // We found a quoted value. When we capture\r\n            // this value, unescape any double quotes.\r\n            strMatchedValue = arrMatches[2].replace(\r\n                new RegExp('\"\"', 'g'),\r\n                '\"'\r\n            );\r\n\r\n        } else {\r\n\r\n            // We found a non-quoted value.\r\n            strMatchedValue = arrMatches[3];\r\n\r\n        }\r\n\r\n        // Now that we have our value string, let's add\r\n        // it to the data array.\r\n        arrData[arrData.length - 1].push(strMatchedValue);\r\n    }\r\n\r\n    // Return the parsed data.\r\n    return arrData;\r\n}\r\n\r\n\r\nexport function writeCSV(values: Array<string[]>, separator: string, linebreak = '\\n') {\r\n\r\n    let content = '';\r\n    values.forEach((row, ri) => {\r\n        if (ri > 0) {\r\n            content += linebreak;\r\n        }\r\n        row.forEach((cell, ci) => {\r\n            cell = cell.replace(/\"/g, '\"\"');\r\n            if (cell.search(/(\"|,|\\n)/g) >= 0) {\r\n                cell = '\"' + cell + '\"';\r\n            }\r\n            if (ci > 0) {\r\n                content += separator;\r\n            }\r\n            content += cell;\r\n        });\r\n    });\r\n    return content;\r\n\r\n}\r\n"],"names":["this","EventEmitter","event","handler","handlers","push","splice","indexOf","args","forEach","CSS_ROW","CSS_PREFIX","CSS_CELL","CSS_READONLY","css","className","container","options","query","init","Grid","rows","innerHTML","length","input","cellInput","remove","createElement","hiddenInput","gridContainer","grid","appendChild","head","cols","c","index","_this","createHeadCell","createRows","initMouse","initKeys","initClipboard","elOrCss","cssSelector","document","slice","call","querySelectorAll","queryAll","style","width","offsetWidth","events","addHandler","row","col","value","setCell","cells","canAddRows","apply","r","createRow","emitInput","flattenCells","addRows","map","text","columnIndex","column","resizer","downPosition","nextColumn","currentWidth","currentNextWidth","selection","mousemove","e","target","ciAttr","getAttribute","ci","isNaN","minCol_1","Math","min","maxCol_1","max","select","emitSelect","parentElement","diff","pageX","mouseup","off","on","nextElementSibling","i_1","activate","focus","activeCell","preventDefault","Row","addCells","element","reduce","a","b","concat","downCellIndex","downRowIndex","selectionIdentifier","rememberSelection","r1","c1","r2","c2","getTargetCell","cell","cellIndexAttr","rowIndexAttr","cellIndex","rowIndex","moveEvent","targetCell","firstRow","lastRow","firstCol","lastCol","newSelectionIdentifier","unselect","ri","lastMouseDown","Date","now","timeSinceLast","readonly","startEdit","emitFocus","parentNode","doActivate","selectionChanged","selected","rowDelta","colDelta","addRow","nextRow","keyCode","window","moveActive","updatValue","csv","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedDelimiter","strMatchedValue","replace","parseCSV","clipboardData","getData","csvRow","csvRowIndex","tableRow","prevRow","tableCol","isLastEmptyRow","csvCell","csvColIndex","setData","values","separator","linebreak","content","search","writeCSV","set","colIndex","rowOption","cellValue","emit","filter","toString","Cell","doSelect","classList","add","blur","querySelector","html","div","trim","firstChild","listener","addEventListener","removeEventListener","node","removeChild"],"mappings":"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"}