{"version":3,"file":"celled.min.js","sources":["../src/lib/events.ts","../src/lib/dom.ts","../src/lib/css.ts","../src/lib/cell.ts","../src/lib/row.ts","../src/lib/render.ts","../src/lib/grid.ts","../src/lib/csv.ts"],"sourcesContent":["\r\nexport interface EventArgs { }\r\n\r\nexport type EventHandlerBase = (arg: EventArgs) => any;\r\n\r\nexport interface EventHandler<T> extends EventHandlerBase {\r\n    (arg: T): any;\r\n}\r\n\r\nexport class EventEmitter {\r\n    handlers: { [event: string]: EventHandlerBase[] } = {};\r\n\r\n    addHandler(event: string, handler: EventHandlerBase) {\r\n        const handlers = this.handlers;\r\n        handlers[event] = handlers[event] || [];\r\n        handlers[event].push(handler);\r\n    }\r\n\r\n    removeHandler(event: string, handler: EventHandlerBase) {\r\n        const allHandlers = this.handlers;\r\n        const handlers = allHandlers[event];\r\n        if (handlers && handler) {\r\n            handlers.splice(handlers.indexOf(handler), 1);\r\n        }\r\n    }\r\n\r\n    emit<TArgs extends EventArgs>(event: string, args: TArgs) {\r\n        const handlers = this.handlers[event];\r\n        if (handlers) {\r\n           handlers.forEach(handler => {\r\n                try {\r\n                    handler(args);\r\n                }\r\n                catch {}\r\n            });\r\n        }\r\n    }\r\n}\r\n","export function query<T = Element>(elOrCss, cssSelector?): T {\r\n    if (!cssSelector) {\r\n        cssSelector = elOrCss;\r\n        elOrCss = document;\r\n    }\r\n    return elOrCss.querySelector(cssSelector);\r\n}\r\n\r\nexport function queryAll<T = Element>(elOrCss, cssSelector?): T[] {\r\n    if (!cssSelector) {\r\n        cssSelector = elOrCss;\r\n        elOrCss = document;\r\n    }\r\n    return [].slice.call(elOrCss.querySelectorAll(cssSelector));\r\n}\r\n\r\nexport function createElement<T extends HTMLElement>(html: string): T {\r\n    const div = document.createElement('div');\r\n    div.innerHTML = html.trim();\r\n    return div.firstChild as T;\r\n}\r\n\r\nexport function on(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    element.addEventListener(event, listener);\r\n    return offFunc(element, event, listener);\r\n}\r\n\r\nexport function off(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    element.removeEventListener(event, listener);\r\n}\r\n\r\nexport function offFunc(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    return () => element.removeEventListener(event, listener);\r\n}\r\n\r\nexport function getKey(e: KeyboardEvent) {\r\n    e = e || window.event as KeyboardEvent;\r\n    return String.fromCharCode(e.keyCode || e.which);\r\n}\r\n\r\nexport function remove(node: Node) {\r\n    if (node.parentNode) {\r\n        node.parentElement.removeChild(node);\r\n    }\r\n}\r\n\r\nexport function setOptions(selectElement: HTMLSelectElement, options: ReadonlyArray<any>) {\r\n    for (let i = selectElement.options.length; i > 0; i--) {\r\n        selectElement.remove(i);\r\n    }\r\n    for (const option of options) {\r\n        const optionElement = document.createElement('option');\r\n        optionElement.value = '' + option;\r\n        optionElement.innerHTML = '' + option;\r\n        selectElement.appendChild(optionElement);\r\n    }\r\n}\r\n","export const CSS_PREFIX = 'ced';\r\nexport const CSS_CONTAINER = `${CSS_PREFIX}-grid-container`;\r\nexport const CSS_CONTAINER_SCROLL = `${CSS_PREFIX}-grid-container-scroll`;\r\nexport const CSS_GRID = `${CSS_PREFIX}-grid`;\r\nexport const CSS_ROW = `${CSS_PREFIX}-row`;\r\nexport const CSS_CELL = `${CSS_PREFIX}-cell`;\r\nexport const CSS_SELECT_CELL = `${CSS_PREFIX}-select-cell`;\r\nexport const CSS_HEAD = `${CSS_PREFIX}-head`;\r\nexport const CSS_HEAD_STICKY = `${CSS_PREFIX}-head-sticky`;\r\nexport const CSS_RESIZER = `${CSS_PREFIX}-resizer`;\r\nexport const CSS_EDITING = `${CSS_PREFIX}-editing`;\r\nexport const CSS_ACTIVE = `${CSS_PREFIX}-active`;\r\nexport const CSS_SELECTED = `${CSS_PREFIX}-selected`;\r\nexport const CSS_READONLY = `${CSS_PREFIX}-readonly`;\r\n","import { CSS_CELL, CSS_READONLY, CSS_SELECTED, CSS_ACTIVE, CSS_EDITING, CSS_SELECT_CELL } from './css';\r\nimport { createElement, remove, setOptions } from './dom';\r\nimport { CellValue, CellValueOptions } from './options';\r\n\r\nexport type UpdateCallback = (cell: Cell) => unknown;\r\n\r\nexport interface Cell {\r\n    readonly: boolean;\r\n    row: number;\r\n    col: number;\r\n\r\n    /**\r\n     * Cleanup any resources, listeners...\r\n     */\r\n    destroy(): void;\r\n\r\n    /**\r\n     * The currently displayed value.\r\n     */\r\n    value(): string;\r\n\r\n    /**\r\n     * Show a new value.\r\n     */\r\n    set(value: string): void;\r\n\r\n    /**\r\n     * Mark the cell as selected. This will apply css classes\r\n     * to visualize the cell as a selected cell.\r\n     */\r\n    select(doSelect?: boolean): this;\r\n\r\n    /**\r\n     * Cell was selected with select(true).\r\n     */\r\n    selected(): boolean;\r\n\r\n    /**\r\n     * This will apply css classes to visualize the cell as a selected and active cell.\r\n     * The active cell is the leading cell in a multi edit situation. It will contain\r\n     * the editing control.\r\n     * If doActivate is false, the editing control will be removed.\r\n     */\r\n    activate(doActivate?: boolean): this;\r\n\r\n    /**\r\n     * Start the editing process. The cell can use the passed input element to let\r\n     * the user enter free text.\r\n     */\r\n    startEdit(input: HTMLInputElement, selectContent?: boolean);\r\n\r\n    /**\r\n     * This cell has taken control of the input element\r\n     */\r\n    hasInput(): boolean;\r\n}\r\n\r\n/**\r\n * Create a new Cell instance matching the definitions in the value parameter.\r\n * @param callback  Can be used by the cell to notify value changes that are not\r\n *                  triggered from outside.\r\n */\r\nexport function createCell(row: number, col: number, value: CellValue | CellValueOptions, callback: UpdateCallback) {\r\n    if (typeof value !== 'string' && typeof value !== 'number' && Array.isArray(value.options)) {\r\n        return new SelectCell(row, col, value, callback);\r\n    }\r\n    return new InputCell(row, col, value);\r\n}\r\n\r\n\r\nclass InputCell implements Cell {\r\n    element: HTMLElement;\r\n    input: HTMLInputElement;  // If the cell is active, this is the assigned input element\r\n    readonly = false;\r\n\r\n    constructor(public row: number, public col: number, value: CellValue | CellValueOptions) {\r\n        let text: string;\r\n        if (typeof value === 'string' || typeof value === 'number') {\r\n            text = value.toString();\r\n        }\r\n        else {\r\n            this.readonly = value.readonly;\r\n            text = value.value.toString();\r\n        }\r\n        const className = CSS_CELL + (this.readonly ? ' ' + CSS_READONLY : '');\r\n        this.element = createElement(`<div data-ci=\"${col}\" class=\"${className}\">${text}</div>`);\r\n    }\r\n\r\n    destroy() {\r\n\r\n    }\r\n\r\n    selected() {\r\n        return isSelectCss(this.element);\r\n    }\r\n\r\n    select(doSelect = true) {\r\n        setSelectCSS(this.element, doSelect);\r\n        return this;\r\n    }\r\n\r\n    activate(doActivate = true) {\r\n        const classList = this.element.classList;\r\n        if (doActivate) {\r\n            classList.add(CSS_ACTIVE);\r\n            classList.add(CSS_SELECTED);\r\n        }\r\n        else {\r\n            classList.remove(CSS_ACTIVE);\r\n            classList.remove(CSS_EDITING);\r\n            if (this.input) {\r\n                this.input.blur();\r\n                remove(this.input);\r\n                this.element.innerHTML = this.input.value;\r\n                this.input = null;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    value() {\r\n        return this.input ? this.input.value : this.element.innerHTML;\r\n    }\r\n\r\n    set(value: string) {\r\n        if (!this.readonly) {\r\n            if (this.input) {\r\n                this.input.value = value;\r\n            }\r\n            else {\r\n                this.element.innerHTML = value;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    startEdit(input: HTMLInputElement, select = false) {\r\n        if (this.readonly) {\r\n            return;\r\n        }\r\n        const element = this.element;\r\n        this.input = input;\r\n        input.value = element.innerHTML;\r\n        if (select) {\r\n            input.select();\r\n        }\r\n        input.style.width = element.offsetWidth - 2 + 'px';\r\n        element.classList.add(CSS_EDITING);\r\n        element.innerHTML = '';\r\n        element.appendChild(input);\r\n        input.focus();\r\n    }\r\n\r\n    hasInput() {\r\n        return !!this.input;\r\n    }\r\n}\r\n\r\n\r\nclass SelectCell implements Cell {\r\n    element: HTMLElement;\r\n    selectElement: HTMLSelectElement;\r\n    readonly = false;\r\n    options: ReadonlyArray<CellValue> = null;\r\n    listener;\r\n\r\n    constructor(public row: number, public col: number, value: CellValueOptions, callback: UpdateCallback) {\r\n\r\n        this.readonly = value.readonly;\r\n        this.options = value.options;\r\n\r\n        const className = CSS_CELL + ' ' + CSS_SELECT_CELL + (this.readonly ? ' ' + CSS_READONLY : '');\r\n        this.element = createElement(`<div data-ci=\"${col}\" class=\"${className}\"></div>`);\r\n        this.selectElement = createElement<HTMLSelectElement>(`<select><select>`);\r\n        setOptions(this.selectElement, this.options);\r\n        this.element.appendChild(this.selectElement);\r\n        this.listener = () => callback(this);\r\n        this.selectElement.addEventListener('change', this.listener);\r\n    }\r\n\r\n    destroy() {\r\n        this.selectElement.removeEventListener('change', this.listener);\r\n    }\r\n\r\n    value(): string {\r\n        return this.selectElement.value;\r\n    }\r\n\r\n    set(value: string) {\r\n        this.selectElement.value = value;\r\n    }\r\n\r\n    select(doSelect = true) {\r\n        setSelectCSS(this.element, doSelect);\r\n        return this;\r\n    }\r\n\r\n    selected(): boolean {\r\n        return isSelectCss(this.element);\r\n    }\r\n\r\n    activate(doActivate?: boolean) {\r\n        return this;\r\n    }\r\n\r\n    startEdit(input: HTMLInputElement, selectContent?: boolean) {\r\n\r\n    }\r\n\r\n    hasInput(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction setSelectCSS(element: HTMLElement, doSelect: boolean) {\r\n    const classList = element.classList;\r\n    if (doSelect) {\r\n        classList.add(CSS_SELECTED);\r\n    }\r\n    else {\r\n        classList.remove(CSS_SELECTED);\r\n    }\r\n}\r\n\r\nfunction isSelectCss(element: HTMLElement) {\r\n    return element.className.indexOf(CSS_SELECTED) >= 0;\r\n}\r\n","import { Cell, createCell } from './cell';\r\nimport { CSS_ROW } from './css';\r\nimport { createElement } from './dom';\r\nimport { CellValue, CellValueOptions } from './options';\r\n\r\nexport class Row {\r\n    element: HTMLElement;\r\n    cells: Cell[] = [];\r\n\r\n    constructor(public index: number) {\r\n        this.element = createElement(`<div data-ri=\"${index}\" class=\"${CSS_ROW}\"></div>`);\r\n    }\r\n\r\n    addCells(cells: Array<CellValue | CellValueOptions>, updateValueCallback: (cell: Cell) => unknown) {\r\n        cells.forEach((c, columnIndex) => {\r\n            const cell = createCell(this.index, columnIndex, c, updateValueCallback);\r\n            this.cells.push(cell);\r\n            this.element.appendChild(cell.element);\r\n        });\r\n    }\r\n}\r\n","import { Row } from './row';\r\n\r\nexport interface RenderOptions {\r\n    container: HTMLElement;\r\n    gridContainer: HTMLElement;  // child of container\r\n    grid: HTMLElement;           // child of gridContainer\r\n    head: HTMLElement;\r\n}\r\n\r\nexport interface Renderer {\r\n    rerender(rows: Row[]);\r\n    destroy();\r\n}\r\n\r\nexport class DefaultRenderer implements Renderer {\r\n    constructor(private options: RenderOptions) {\r\n    }\r\n    rerender(rows: Row[]) {\r\n        const { grid, head } = this.options;\r\n        grid.innerHTML = '';\r\n        grid.appendChild(head);\r\n        rows.forEach(r => {\r\n            grid.appendChild(r.element);\r\n        });\r\n    }\r\n\r\n    destroy() {\r\n        this.options = null;\r\n    }\r\n}\r\n\r\n\r\nexport class VirtualRenderer implements Renderer {\r\n\r\n    private onScroll;\r\n\r\n    constructor(private options: RenderOptions) {\r\n    }\r\n\r\n    rerender(rows: Row[]) {\r\n        const { grid, head, container, gridContainer } = this.options;\r\n\r\n        if (this.onScroll) {\r\n            container.removeEventListener('scroll', this.onScroll);\r\n        }\r\n        const nodePadding = 4;\r\n\r\n        const currentRange = {\r\n            start: 0,\r\n            end: 0,\r\n        };\r\n\r\n        let rowHeight = 34;  // just a guess\r\n        grid.style.position = 'absolute';\r\n\r\n        const update = (scrollTop: number) => {\r\n            const itemCount = rows.length;\r\n            const viewportHeight = container.offsetHeight;\r\n\r\n            const totalContentHeight = itemCount * rowHeight;\r\n\r\n            let startIndex = Math.floor(scrollTop / rowHeight) - nodePadding;\r\n            if (startIndex % 2 > 0) {\r\n                // always start with an odd index to keep alternating styles consistent\r\n                startIndex -= 1;\r\n            }\r\n            startIndex = Math.max(0, startIndex);\r\n\r\n            let visibleNodesCount = Math.ceil(viewportHeight / rowHeight) + 2 * nodePadding;\r\n            visibleNodesCount = Math.min(itemCount - startIndex, visibleNodesCount);\r\n            const endIndex = startIndex + visibleNodesCount;\r\n\r\n            const offsetY = startIndex * rowHeight;\r\n            gridContainer.style.height = `${totalContentHeight}px`;\r\n            grid.style['top'] = `${offsetY}px`;\r\n\r\n            // Render\r\n            if (currentRange.start !== startIndex || currentRange.end !== endIndex) {\r\n                currentRange.start = startIndex;\r\n                currentRange.end = endIndex;\r\n                grid.innerHTML = '';\r\n                grid.appendChild(head);\r\n                let renderedHeight = 0;\r\n                let count = 0;\r\n                for (let i = startIndex; (i <= endIndex || renderedHeight < viewportHeight) && i < rows.length; ++i) {\r\n                    const row = rows[i];\r\n                    grid.appendChild(row.element);\r\n                    renderedHeight += row.element.offsetHeight;\r\n                    ++count;\r\n                }\r\n                if (count) {\r\n                    rowHeight = renderedHeight / count;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onScroll = (e) => {\r\n            update(e.target.scrollTop);\r\n        };\r\n\r\n        container.addEventListener('scroll', this.onScroll);\r\n        update(container.scrollTop);\r\n    }\r\n\r\n    destroy() {\r\n        this.options.container.removeEventListener('scroll', this.onScroll);\r\n        this.options = null;\r\n        this.onScroll = null;\r\n    }\r\n}\r\n","import { EventEmitter, EventHandler, EventHandlerBase } from './events';\r\nimport { parseCSV, writeCSV } from './csv';\r\nimport { query, remove, createElement, queryAll, off, on } from './dom';\r\nimport { GridOptions, RowOptions, CellValue, CellValueOptions } from './options';\r\nimport { Cell, createCell } from './cell';\r\nimport { CSS_CELL, CSS_CONTAINER, CSS_CONTAINER_SCROLL, CSS_GRID, CSS_HEAD, CSS_HEAD_STICKY, CSS_RESIZER, CSS_ROW } from './css';\r\nimport { Row } from './row';\r\nimport { DefaultRenderer, Renderer, VirtualRenderer } from './render';\r\n\r\n\r\nexport interface InputArgs {\r\n    grid: Grid;\r\n    row: number;\r\n    col: number;\r\n    value: string;\r\n}\r\n\r\nexport interface SelectArgs {\r\n    grid: Grid;\r\n    selection: Array<{ row: number, col: number }>;\r\n}\r\n\r\n\r\nexport class Grid {\r\n    private container: HTMLElement;\r\n    private grid: HTMLElement;\r\n    private rows: Row[] = [];\r\n    private cells: Cell[] = [];\r\n    private activeCell: Cell;\r\n    private events: EventEmitter = new EventEmitter();\r\n    private options: GridOptions;\r\n    private cellInput: HTMLInputElement;\r\n    private hiddenInput: HTMLElement;\r\n    private cleanups: Array<() => any> = [];\r\n    private render: Renderer;\r\n\r\n    constructor(container: string | HTMLElement, options?: GridOptions) {\r\n        this.container = typeof container === 'string' ? query<HTMLElement>(container) : container;\r\n        if (options) {\r\n            this.init(options);\r\n        }\r\n    }\r\n\r\n    init(options: GridOptions) {\r\n        this.options = options;\r\n        const container = this.container;\r\n        const rows = this.rows;\r\n        container.innerHTML = '';\r\n        rows.length = 0;\r\n\r\n        if (options.input) {\r\n            this.cellInput = typeof options.input === 'function' ? options.input() : options.input;\r\n            remove(this.cellInput);\r\n        }\r\n        else {\r\n            this.cellInput = createElement<HTMLInputElement>(`<input id=\"celled-cell-input\" type=\"text\" >`);\r\n        }\r\n        this.hiddenInput = createElement(\r\n            '<div id=\"celled-hidden-input\" style=\"position:absolute; z-index:-1; left:2px; top: 2px;\" contenteditable tabindex=\"0\"></div>');\r\n\r\n        if (options.scroll) {\r\n            container.classList.add(CSS_CONTAINER_SCROLL);\r\n        }\r\n        const gridContainer = createElement(`<div class=\"${CSS_CONTAINER}\"></div>`);\r\n\r\n        const stickyHeader = options.scroll && options.scroll.stickyHeader;\r\n        const headCss = `${CSS_ROW} ${CSS_HEAD} ${stickyHeader ? CSS_HEAD_STICKY : ''}`;\r\n        const head = createElement(`<div class=\"${headCss}\"></div>`);\r\n        const grid = this.grid = createElement(`<div class=\"${CSS_GRID}\"></div>`);\r\n\r\n        container.appendChild(gridContainer);\r\n        gridContainer.appendChild(this.hiddenInput);\r\n        gridContainer.appendChild(grid);\r\n        options.cols.forEach((c, index) => head.appendChild(this.createHeadCell(c, index)));\r\n\r\n        const renderOptions = { container, gridContainer, grid, head };\r\n        this.render = options.scroll ? new VirtualRenderer(renderOptions) : new DefaultRenderer(renderOptions);\r\n\r\n        this.createRows();\r\n        this.initMouse();\r\n        this.initKeys();\r\n        this.initClipboard();\r\n        queryAll(head, css(CSS_CELL)).forEach((c: HTMLElement) => {\r\n            c.style.width = c.offsetWidth + 'px';\r\n        });\r\n    }\r\n\r\n    destroy() {\r\n        this.render.destroy();\r\n        this.cleanups.forEach(c => c());\r\n        this.cleanups.length = 0;\r\n        remove(this.grid);\r\n        this.cells.forEach(c => c.destroy());\r\n        this.grid = null;\r\n        this.hiddenInput = null;\r\n        this.cellInput = null;\r\n        this.rows = null;\r\n        this.cells = null;\r\n    }\r\n\r\n    /**\r\n     * Adds an event listener.\r\n     * Grid fires these events:\r\n     * 'input', 'focus', 'select'\r\n     */\r\n    on(event: 'input' | 'focus', handler: EventHandler<InputArgs>);\r\n    on(event: 'select', handler: EventHandler<SelectArgs>);\r\n    on(event: string, handler: EventHandlerBase) {\r\n        this.events.addHandler(event, handler);\r\n    }\r\n\r\n    update(row: number, col: number, value: string) {\r\n        this.setCell(this.rows[row].cells[col], value);\r\n    }\r\n\r\n    addRows(rows: RowOptions[]) {\r\n        if (this.options.canAddRows) {\r\n            [].push.apply(this.options.rows, rows);\r\n            rows.forEach(r => {\r\n                const newRow = this.createAndAddRow(r);\r\n                newRow.cells.forEach(c => this.emitInput(c));\r\n            });\r\n            this.flattenCells();\r\n            this.renderRows();\r\n        }\r\n    }\r\n\r\n    addRow() {\r\n        this.addRows([this.options.cols.map(c => '')]);\r\n    }\r\n\r\n    private createHeadCell(text: string | number, columnIndex: number) {\r\n        const column = createElement(`<div class=\"${CSS_CELL}\" data-ci=\"${columnIndex}\"><span>${text}</span></div>`);\r\n        const resizer = createElement(`<div class=\"${CSS_RESIZER}\"></div>`);\r\n        column.appendChild(resizer);\r\n\r\n        let downPosition = null;\r\n        let nextColumn = null;\r\n        let currentWidth = null;\r\n        let currentNextWidth = null;\r\n        let selection = null;\r\n\r\n        const mousemove = (e: MouseEvent) => {\r\n            if (selection) {\r\n                let col = e.target as Element;\r\n                while (col) {\r\n                    const ciAttr = col.getAttribute('data-ci');\r\n                    const ci = +ciAttr;\r\n                    if (ciAttr !== null && !isNaN(ci)) {\r\n                        const minCol = Math.min(columnIndex, ci);\r\n                        const maxCol = Math.max(columnIndex, ci);\r\n                        if (selection[0] !== minCol || selection[1] !== maxCol) {\r\n                            selection = [minCol, maxCol];\r\n                            this.cells.forEach(c => c.select(c.col >= minCol && c.col <= maxCol));\r\n                            this.emitSelect();\r\n                        }\r\n                        break;\r\n                    }\r\n                    col = col.parentElement;\r\n                }\r\n            }\r\n            else {\r\n                const diff = e.pageX - downPosition;\r\n                if (nextColumn) {\r\n                    nextColumn.style.width = (currentNextWidth - diff) + 'px';\r\n                }\r\n                column.style.width = (currentWidth + diff) + 'px';\r\n            }\r\n        };\r\n\r\n        const mouseup = () => {\r\n            downPosition = null;\r\n            selection = null;\r\n            off(document, 'mousemove', mousemove);\r\n            off(document, 'mouseup', mouseup);\r\n        };\r\n\r\n        on(column, 'mousedown', (e: MouseEvent) => {\r\n            if (e.target === resizer) {\r\n                // Resize columns\r\n                nextColumn = column.nextElementSibling;\r\n                downPosition = e.pageX;\r\n                currentWidth = column.offsetWidth;\r\n                currentNextWidth = nextColumn ? nextColumn.offsetWidth : null;\r\n            }\r\n            else if (this.rows.length) {\r\n                // Select column\r\n                const i = +column.getAttribute('data-ci');\r\n                selection = true;\r\n                this.cells.forEach(c => c.activate(false).select(c.col === i));\r\n                selection = [i, i];\r\n                this.focusHiddenInput();\r\n                this.activeCell = this.rows[0].cells[i];\r\n                this.emitSelect();\r\n            }\r\n            on(document, 'mouseup', mouseup);\r\n            on(document, 'mousemove', mousemove);\r\n            e.preventDefault();\r\n        });\r\n\r\n        return column;\r\n    }\r\n\r\n    private focusHiddenInput() {\r\n        // Focus the hidden input element to receive paste events.\r\n        // Prevent scrolling up if input was blurred at the end of a long table.\r\n        this.hiddenInput.focus({ preventScroll: true });\r\n    }\r\n\r\n    private createAndAddRow(r: RowOptions): Row {\r\n        const row = new Row(this.rows.length);\r\n        row.addCells(r, cell => this.emitInput(cell));\r\n        this.rows.push(row);\r\n        return row;\r\n    }\r\n\r\n    private createRows() {\r\n        this.rows = [];\r\n        this.options.rows.forEach(r => this.createAndAddRow(r));\r\n        this.flattenCells();\r\n        this.renderRows();\r\n    }\r\n\r\n    private renderRows() {\r\n        this.render.rerender(this.rows);\r\n    }\r\n\r\n    private flattenCells() {\r\n        this.cells = this.rows.reduce((a, b) => a.concat(b.cells), [] as Cell[]);\r\n    }\r\n\r\n    private initMouse() {\r\n        let downCellIndex: number;\r\n        let downRowIndex: number;\r\n\r\n        let selectionIdentifier: string = null;\r\n        const rememberSelection = (r1, c1, r2, c2) => '' + r1 + c1 + r2 + c2;\r\n\r\n        const getTargetCell = (e: MouseEvent) => {\r\n            const cell = e.target as Element;\r\n            if (!cell || !cell.parentElement) {\r\n                return;\r\n            }\r\n            const cellIndexAttr = cell.getAttribute('data-ci');\r\n            const rowIndexAttr = cell.parentElement.getAttribute('data-ri');\r\n            const cellIndex = +cellIndexAttr;\r\n            const rowIndex = +rowIndexAttr;\r\n            if (cellIndexAttr && rowIndexAttr && !isNaN(cellIndex) && !isNaN(rowIndex)) {\r\n                return this.rows[rowIndex].cells[cellIndex];\r\n            }\r\n        };\r\n\r\n        const mousemove = (moveEvent: MouseEvent) => {\r\n            const targetCell = getTargetCell(moveEvent);\r\n            if (targetCell) {\r\n                const rowIndex = targetCell.row;\r\n                const cellIndex = targetCell.col;\r\n                const firstRow = Math.min(rowIndex, downRowIndex);\r\n                const lastRow = Math.max(rowIndex, downRowIndex);\r\n                const firstCol = Math.min(cellIndex, downCellIndex);\r\n                const lastCol = Math.max(cellIndex, downCellIndex);\r\n                const newSelectionIdentifier = rememberSelection(firstRow, firstCol, lastRow, lastCol);\r\n                if (selectionIdentifier !== newSelectionIdentifier) {\r\n                    selectionIdentifier = newSelectionIdentifier;\r\n                    this.unselect();\r\n                    for (let ri = firstRow; ri <= lastRow; ++ri) {\r\n                        for (let ci = firstCol; ci <= lastCol; ++ci) {\r\n                            this.rows[ri].cells[ci].select();\r\n                        }\r\n                    }\r\n                    this.emitSelect();\r\n                }\r\n            }\r\n        };\r\n\r\n        const mouseup = () => {\r\n            off(document, 'mousemove', mousemove);\r\n            off(document, 'mouseup', mouseup);\r\n        };\r\n\r\n        let lastMouseDown = Date.now();\r\n        const cleanupMousedown = on(this.grid, 'mousedown', (e: MouseEvent) => {\r\n            const cell = getTargetCell(e);\r\n            if (cell) {\r\n                const timeSinceLast = Date.now() - lastMouseDown;\r\n                lastMouseDown = Date.now();\r\n                if (cell.hasInput()) {\r\n                    // The cell is already in edit mode. Do nothing and continue with default event handling\r\n                    return;\r\n                }\r\n                else if (cell === this.activeCell && !cell.readonly && timeSinceLast < 300) {\r\n                    // Double click on cell to start edit mode\r\n                    // if (Array.isArray(cell.options)) {\r\n                    //     cell.startSelect(this.cellSelect);\r\n                    // }\r\n                    cell.startEdit(this.cellInput);\r\n                    this.emitFocus();\r\n                }\r\n                else {\r\n                    const rowIndex = cell.row;\r\n                    const cellIndex = cell.col;\r\n                    downRowIndex = rowIndex;\r\n                    downCellIndex = cellIndex;\r\n                    selectionIdentifier = rememberSelection(rowIndex, cellIndex, rowIndex, cellIndex);\r\n                    this.activate(cell);\r\n                    on(document, 'mouseup', mouseup);\r\n                    on(document, 'mousemove', mousemove);\r\n                }\r\n                e.preventDefault();\r\n            }\r\n        });\r\n        this.cleanups.push(cleanupMousedown);\r\n\r\n        const cleanupMouseup = on(document, 'mouseup', (e: MouseEvent) => {\r\n            if (this.activeCell) {\r\n                // Unselect all if was click outside of the grid.\r\n                for (let target = e.target as Node; target; target = target.parentNode) {\r\n                    if (target === this.container) {\r\n                        return;\r\n                    }\r\n                }\r\n                this.activeCell.activate(false);\r\n                if (this.unselect()) {\r\n                    this.emitSelect();\r\n                }\r\n            }\r\n        });\r\n        this.cleanups.push(cleanupMouseup);\r\n    }\r\n\r\n    private activate(cell: Cell, doActivate = true) {\r\n        if (this.activeCell) {\r\n            this.activeCell.activate(false);\r\n        }\r\n        let selectionChanged = false;\r\n        this.cells.forEach(c => {\r\n            selectionChanged = c === cell ? (c.selected() !== doActivate) : (selectionChanged || c.selected());\r\n            c.select(false);\r\n        });\r\n        this.activeCell = cell.select(doActivate).activate(doActivate);\r\n        if (selectionChanged) {\r\n            this.emitSelect();\r\n        }\r\n        this.focusHiddenInput();\r\n    }\r\n\r\n    private moveActive(rowDelta: number, colDelta: number, addRows = false) {\r\n        const activeCell = this.activeCell;\r\n        if (activeCell) {\r\n            const rows = this.rows;\r\n            const rowIndex = activeCell.row + rowDelta;\r\n            while (addRows && this.options.canAddRows && rowIndex >= rows.length) {\r\n                this.addRow();\r\n            }\r\n            const nextRow = rows[rowIndex];\r\n            if (nextRow) {\r\n                const cell = nextRow.cells[activeCell.col + colDelta];\r\n                if (cell) {\r\n                    this.activate(cell);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private initKeys() {\r\n        const hiddenInput = this.hiddenInput;\r\n        const cellInput = this.cellInput;\r\n\r\n        this.cleanups.push(on(hiddenInput, 'keydown', (e: KeyboardEvent) => {\r\n            e = e || window.event as KeyboardEvent;\r\n            const keyCode = e.keyCode;\r\n            if (keyCode === 46) {  // del\r\n                this.cells.forEach(cell => {\r\n                    if (cell.selected()) {\r\n                        this.setCell(cell, '');\r\n                    }\r\n                });\r\n                e.preventDefault();\r\n            }\r\n            if (keyCode === 37) {\r\n                this.moveActive(0, -1);\r\n            }\r\n            if (keyCode === 38) {\r\n                this.moveActive(-1, 0);\r\n            }\r\n            if (keyCode === 39) {\r\n                this.moveActive(0, 1);\r\n            }\r\n            if (keyCode === 40) {\r\n                this.moveActive(1, 0);\r\n            }\r\n        }));\r\n\r\n        const onInput = (e: KeyboardEvent) => {\r\n            const activeCell = this.activeCell;\r\n            if (activeCell && !activeCell.readonly && activeCell.hasInput()) {\r\n                this.updatValue(activeCell);\r\n                this.cells.forEach(cell => {\r\n                    if (cell.selected() && cell !== activeCell) {\r\n                        this.setCell(cell, activeCell.value());\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        this.cleanups.push(on(cellInput, 'input', onInput));\r\n        this.cleanups.push(on(cellInput, 'keydown', (e: KeyboardEvent) => {\r\n            if (e.keyCode === 13) {\r\n                // ENTER, stop edit and move to next row\r\n                this.moveActive(0, 0);\r\n                this.moveActive(1, 0, true);\r\n                e.preventDefault();\r\n            }\r\n            if (e.keyCode === 27) {\r\n                // ESCAPE, stop edit but stay at same cell\r\n                this.moveActive(0, 0);\r\n                e.preventDefault();\r\n            }\r\n        }));\r\n\r\n        this.cleanups.push(on(hiddenInput, 'keypress', (e: KeyboardEvent) => {\r\n            const activeCell = this.activeCell;\r\n            if (activeCell && !activeCell.readonly && !activeCell.hasInput()) {\r\n                activeCell.startEdit(cellInput, true);\r\n                this.emitFocus();\r\n            }\r\n            else {\r\n                e.preventDefault();\r\n            }\r\n        }));\r\n    }\r\n\r\n    pasteCSV(csvText: string, separator: string, startRow?: number, startCol?: number) {\r\n        const csv = parseCSV(csvText, separator);\r\n        const activeCell = this.activeCell;\r\n        if (isNaN(startRow) && !activeCell) {\r\n            return;\r\n        }\r\n        startRow = isNaN(startRow) ? activeCell.row : startRow;\r\n        startCol = isNaN(startCol) ? activeCell.col : startCol;\r\n\r\n        csv.forEach((csvRow, csvRowIndex) => {\r\n            let tableRow = this.rows[startRow + csvRowIndex];\r\n            if (!tableRow && this.options.canAddRows) {\r\n                const prevRow = this.rows[startRow];\r\n                this.addRows([prevRow.cells.map(c => '')]);\r\n                tableRow = this.rows[startRow + csvRowIndex];\r\n            }\r\n            const tableCol = startCol;\r\n            const isLastEmptyRow = csvRow.length === 1 && csvRow[0] === '';\r\n            if (tableRow && !isLastEmptyRow) {\r\n                csvRow.forEach((csvCell, csvColIndex) => {\r\n                    const cell = tableRow.cells[tableCol + csvColIndex];\r\n                    if (cell && !cell.readonly) {\r\n                        this.setCell(cell, csvCell);\r\n                        cell.select();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private initClipboard() {\r\n        on(this.hiddenInput, 'paste', (e: ClipboardEvent) => {\r\n            // Don't actually paste to hidden input\r\n            e.preventDefault();\r\n            const text = (e.clipboardData || (window as any).clipboardData).getData('text');\r\n            this.pasteCSV(text, '\\t');\r\n        });\r\n\r\n        on(this.hiddenInput, 'copy', (e: ClipboardEvent) => {\r\n            e.preventDefault();\r\n            const activeCell = this.activeCell;\r\n            if (!activeCell) {\r\n                return;\r\n            }\r\n\r\n            const csv = [];\r\n            for (let ri = activeCell.row; ; ri++) {\r\n                const row = this.rows[ri];\r\n                const csvRow = [];\r\n                if (!row || !row.cells[activeCell.col] || !row.cells[activeCell.col].selected()) {\r\n                    break;\r\n                }\r\n                for (let ci = activeCell.col; ; ++ci) {\r\n                    const cell = row.cells[ci];\r\n                    if (!cell || !cell.selected()) {\r\n                        break;\r\n                    }\r\n                    csvRow.push(cell.value());\r\n                }\r\n                csv.push(csvRow);\r\n            }\r\n            const clipboard = (e.clipboardData || (window as any).clipboardData);\r\n            clipboard.setData('text/plain', writeCSV(csv, '\\t'));\r\n        });\r\n    }\r\n\r\n    private setCell(cell: Cell, value: string) {\r\n        if (!cell.readonly) {\r\n            cell.set(value);\r\n            this.updatValue(cell);\r\n        }\r\n    }\r\n\r\n    private unselect(): boolean {\r\n        let selectionChanged = false;\r\n        this.cells.forEach(c => {\r\n            selectionChanged = selectionChanged || c.selected();\r\n            c.select(false);\r\n        });\r\n        return selectionChanged;\r\n    }\r\n\r\n    private updatValue(cell: Cell) {\r\n        const colIndex = cell.col;\r\n        const rowOption = this.options.rows[cell.row];\r\n        const cellValue = rowOption[colIndex];\r\n        if (typeof cellValue === 'string' || typeof cellValue === 'number') {\r\n            rowOption[colIndex] = cell.value();\r\n        }\r\n        else {\r\n            cellValue.value = cell.value();\r\n        }\r\n        this.emitInput(cell);\r\n    }\r\n\r\n    private emitInput(cell: Cell) {\r\n        this.events.emit<InputArgs>('input', {\r\n            grid: this,\r\n            col: cell.col,\r\n            row: cell.row,\r\n            value: cell.value(),\r\n        });\r\n    }\r\n\r\n    private emitFocus() {\r\n        const cell = this.activeCell;\r\n        this.events.emit<InputArgs>('focus', {\r\n            grid: this,\r\n            col: cell.col,\r\n            row: cell.row,\r\n            value: cell.value(),\r\n        });\r\n    }\r\n\r\n    private emitSelect() {\r\n        this.events.emit<SelectArgs>('select', {\r\n            grid: this,\r\n            selection: this.cells.filter(c => c.selected()).map(c => ({\r\n                row: c.row,\r\n                col: c.col,\r\n            })),\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction css(className) {\r\n    return '.' + className;\r\n}\r\n\r\n\r\n\r\n// ----\r\n","// ref: https://stackoverflow.com/a/14991797/498298\r\n// This will parse a delimited string into an array of\r\n// arrays. The default delimiter is the comma, but this\r\n// can be overriden in the second argument.\r\nexport function parseCSV(str: string, delimiter: string) {\r\n    const arr: string[][] = [];\r\n    let quote = false;  // 'true' means we're inside a quoted field\r\n\r\n    // Iterate over each character, keep track of current row and column (of the returned array)\r\n    for (let row = 0, col = 0, i = 0; i < str.length; i++) {\r\n        const currentChar = str[i];\r\n        const nextChar = str[i + 1];\r\n        arr[row] = arr[row] || [];             // Create a new row if necessary\r\n        arr[row][col] = arr[row][col] || '';   // Create a new column (start with empty string) if necessary\r\n\r\n        // If the current character is a quotation mark, and we're inside a\r\n        // quoted field, and the next character is also a quotation mark,\r\n        // add a quotation mark to the current column and skip the next character\r\n        if (currentChar === '\"' && quote && nextChar === '\"') {\r\n            arr[row][col] += currentChar;\r\n            ++i;\r\n            continue;\r\n        }\r\n\r\n        // If it's just one quotation mark, begin/end quoted field\r\n        if (currentChar === '\"') {\r\n            quote = !quote;\r\n            continue;\r\n        }\r\n\r\n        // If it's a delimiter and we're not in a quoted field, move on to the next column\r\n        if (currentChar === delimiter && !quote) {\r\n            ++col;\r\n            continue;\r\n        }\r\n\r\n        // If it's a newline (CRLF) and we're not in a quoted field, skip the next character\r\n        // and move on to the next row and move to column 0 of that new row\r\n        if (currentChar === '\\r' && nextChar === '\\n' && !quote) {\r\n            ++row;\r\n            col = 0;\r\n            ++i;\r\n            continue;\r\n        }\r\n\r\n        // If it's a newline (LF or CR) and we're not in a quoted field,\r\n        // move on to the next row and move to column 0 of that new row\r\n        if ((currentChar === '\\n' || currentChar === '\\r') && !quote) {\r\n            ++row;\r\n            col = 0;\r\n            continue;\r\n        }\r\n\r\n        // Otherwise, append the current character to the current column\r\n        arr[row][col] += currentChar;\r\n    }\r\n    return arr;\r\n}\r\n\r\n\r\nexport function writeCSV(values: Array<string[]>, separator: string, linebreak = '\\n') {\r\n\r\n    let content = '';\r\n    values.forEach((row, ri) => {\r\n        if (ri > 0) {\r\n            content += linebreak;\r\n        }\r\n        row.forEach((cell, ci) => {\r\n            cell = cell.replace(/\"/g, '\"\"');\r\n            if (cell.search(/(\"|,|\\n)/g) >= 0) {\r\n                cell = '\"' + cell + '\"';\r\n            }\r\n            if (ci > 0) {\r\n                content += separator;\r\n            }\r\n            content += cell;\r\n        });\r\n    });\r\n    return content;\r\n\r\n}\r\n"],"names":["this","EventEmitter","event","handler","handlers","push","splice","indexOf","args","forEach","createElement","html","div","document","innerHTML","trim","firstChild","on","element","listener","addEventListener","removeEventListener","offFunc","off","remove","node","parentNode","parentElement","removeChild","CSS_ROW","CSS_PREFIX","CSS_CELL","CSS_SELECT_CELL","CSS_SELECTED","CSS_READONLY","row","col","value","text","toString","readonly","className","InputCell","isSelectCss","doSelect","setSelectCSS","doActivate","classList","add","input","blur","select","style","width","offsetWidth","appendChild","focus","callback","options","selectElement","i","length","options_1","_i","option","optionElement","setOptions","_this","SelectCell","selectContent","index","Row","cells","updateValueCallback","c","columnIndex","cell","Array","isArray","DefaultRenderer","rows","_a","grid","head","r","VirtualRenderer","container","gridContainer","onScroll","currentRange","start","end","rowHeight","position","update","scrollTop","itemCount","viewportHeight","offsetHeight","totalContentHeight","startIndex","Math","floor","max","visibleNodesCount","ceil","endIndex","min","offsetY","height","renderedHeight","count","e","target","elOrCss","cssSelector","querySelector","init","Grid","cellInput","hiddenInput","scroll","stickyHeader","cols","createHeadCell","renderOptions","render","createRows","initMouse","initKeys","initClipboard","slice","call","querySelectorAll","destroy","cleanups","events","addHandler","setCell","canAddRows","apply","createAndAddRow","emitInput","flattenCells","renderRows","addRows","map","column","resizer","downPosition","nextColumn","currentWidth","currentNextWidth","selection","mousemove","ciAttr","getAttribute","ci","isNaN","minCol_1","maxCol_1","emitSelect","diff","pageX","mouseup","nextElementSibling","i_1","activate","focusHiddenInput","activeCell","preventDefault","preventScroll","addCells","rerender","reduce","a","b","concat","downCellIndex","downRowIndex","selectionIdentifier","rememberSelection","r1","c1","r2","c2","getTargetCell","cellIndexAttr","rowIndexAttr","cellIndex","rowIndex","moveEvent","targetCell","firstRow","lastRow","firstCol","lastCol","newSelectionIdentifier","unselect","ri","lastMouseDown","Date","now","cleanupMousedown","timeSinceLast","hasInput","startEdit","emitFocus","cleanupMouseup","selectionChanged","selected","rowDelta","colDelta","addRow","nextRow","keyCode","window","moveActive","updatValue","csvText","separator","startRow","startCol","csv","str","delimiter","arr","quote","currentChar","nextChar","parseCSV","csvRow","csvRowIndex","tableRow","prevRow","tableCol","isLastEmptyRow","csvCell","csvColIndex","clipboardData","getData","pasteCSV","setData","values","linebreak","content","replace","search","writeCSV","set","colIndex","rowOption","cellValue","emit","filter"],"mappings":"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"}