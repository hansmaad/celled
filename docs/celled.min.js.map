{"version":3,"file":"celled.min.js","sources":["../src/lib/events.ts","../src/lib/dom.ts","../src/lib/css.ts","../src/lib/cell.ts","../src/lib/grid.ts","../src/lib/csv.ts"],"sourcesContent":["\r\nexport interface EventArgs { }\r\n\r\nexport type EventHandlerBase = (arg: EventArgs) => any;\r\n\r\nexport interface EventHandler<T> extends EventHandlerBase {\r\n    (arg: T): any;\r\n}\r\n\r\nexport class EventEmitter {\r\n    handlers: { [event: string]: EventHandlerBase[] } = {};\r\n\r\n    addHandler(event: string, handler: EventHandlerBase) {\r\n        const handlers = this.handlers;\r\n        handlers[event] = handlers[event] || [];\r\n        handlers[event].push(handler);\r\n    }\r\n\r\n    removeHandler(event: string, handler: EventHandlerBase) {\r\n        const allHandlers = this.handlers;\r\n        const handlers = allHandlers[event];\r\n        if (handlers && handler) {\r\n            handlers.splice(handlers.indexOf(handler), 1);\r\n        }\r\n    }\r\n\r\n    emit<TArgs extends EventArgs>(event: string, args: TArgs) {\r\n        const handlers = this.handlers[event];\r\n        if (handlers) {\r\n           handlers.forEach(handler => {\r\n                try {\r\n                    handler(args);\r\n                }\r\n                catch {}\r\n            });\r\n        }\r\n    }\r\n}\r\n","export function query(elOrCss, cssSelector?): Element {\r\n    if (!cssSelector) {\r\n        cssSelector = elOrCss;\r\n        elOrCss = document;\r\n    }\r\n    return elOrCss.querySelector(cssSelector);\r\n}\r\n\r\nexport function queryAll(elOrCss, cssSelector?): Element[] {\r\n    if (!cssSelector) {\r\n        cssSelector = elOrCss;\r\n        elOrCss = document;\r\n    }\r\n    return [].slice.call(elOrCss.querySelectorAll(cssSelector));\r\n}\r\n\r\nexport function createElement<T extends HTMLElement>(html: string): T {\r\n    const div = document.createElement('div');\r\n    div.innerHTML = html.trim();\r\n    return div.firstChild as T;\r\n}\r\n\r\nexport function on(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    element.addEventListener(event, listener);\r\n    return offFunc(element, event, listener);\r\n}\r\n\r\nexport function off(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    element.removeEventListener(event, listener);\r\n}\r\n\r\nexport function offFunc(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    return () => element.removeEventListener(event, listener);\r\n}\r\n\r\nexport function getKey(e: KeyboardEvent) {\r\n    e = e || window.event as KeyboardEvent;\r\n    return String.fromCharCode(e.keyCode || e.which);\r\n}\r\n\r\nexport function remove(node: Node) {\r\n    if (node.parentNode) {\r\n        node.parentElement.removeChild(node);\r\n    }\r\n}\r\n\r\nexport function setOptions(selectElement: HTMLSelectElement, options: ReadonlyArray<any>) {\r\n    for (let i = selectElement.options.length; i > 0; i--) {\r\n        selectElement.remove(i);\r\n    }\r\n    for (const option of options) {\r\n        const optionElement = document.createElement('option');\r\n        optionElement.value = '' + option;\r\n        optionElement.innerHTML = '' + option;\r\n        selectElement.appendChild(optionElement);\r\n    }\r\n}\r\n","export const CSS_PREFIX = 'ced';\r\nexport const CSS_CONTAINER = `${CSS_PREFIX}-grid-container`;\r\nexport const CSS_GRID = `${CSS_PREFIX}-grid`;\r\nexport const CSS_ROW = `${CSS_PREFIX}-row`;\r\nexport const CSS_CELL = `${CSS_PREFIX}-cell`;\r\nexport const CSS_SELECT_CELL = `${CSS_PREFIX}-select-cell`;\r\nexport const CSS_HEAD = `${CSS_PREFIX}-head`;\r\nexport const CSS_RESIZER = `${CSS_PREFIX}-resizer`;\r\nexport const CSS_EDITING = `${CSS_PREFIX}-editing`;\r\nexport const CSS_ACTIVE = `${CSS_PREFIX}-active`;\r\nexport const CSS_SELECTED = `${CSS_PREFIX}-selected`;\r\nexport const CSS_READONLY = `${CSS_PREFIX}-readonly`;\r\n","import { CSS_CELL, CSS_READONLY, CSS_SELECTED, CSS_ACTIVE, CSS_EDITING, CSS_SELECT_CELL } from './css';\r\nimport { createElement, remove, setOptions } from './dom';\r\nimport { CellValue, CellValueOptions } from './options';\r\n\r\nexport type UpdateCallback = (cell: Cell) => unknown;\r\n\r\nexport interface Cell {\r\n    readonly: boolean;\r\n    row: number;\r\n    col: number;\r\n\r\n    /**\r\n     * Cleanup any resources, listeners...\r\n     */\r\n    destroy(): void;\r\n\r\n    /**\r\n     * The currently displayed value.\r\n     */\r\n    value(): string;\r\n\r\n    /**\r\n     * Show a new value.\r\n     */\r\n    set(value: string): void;\r\n\r\n    /**\r\n     * Mark the cell as selected. This will apply css classes\r\n     * to visualize the cell as a selected cell.\r\n     */\r\n    select(doSelect?: boolean): this;\r\n\r\n    /**\r\n     * Cell was selected with select(true).\r\n     */\r\n    selected(): boolean;\r\n\r\n    /**\r\n     * This will apply css classes to visualize the cell as a selected and active cell.\r\n     * The active cell is the leading cell in a multi edit situation. It will contain\r\n     * the editing control.\r\n     * If doActivate is false, the editing control will be removed.\r\n     */\r\n    activate(doActivate?: boolean): this;\r\n\r\n    /**\r\n     * Start the editing process. The cell can use the passed input element to let\r\n     * the user enter free text.\r\n     */\r\n    startEdit(input: HTMLInputElement, selectContent?: boolean);\r\n\r\n    /**\r\n     * This cell has taken control of the input element\r\n     */\r\n    hasInput(): boolean;\r\n}\r\n\r\n/**\r\n * Create a new Cell instance matching the definitions in the value parameter.\r\n * @param callback  Can be used by the cell to notify value changes that are not\r\n *                  triggered from outside.\r\n */\r\nexport function createCell(row: number, col: number, value: CellValue | CellValueOptions, callback: UpdateCallback) {\r\n    if (typeof value !== 'string' && typeof value !== 'number' && Array.isArray(value.options)) {\r\n        return new SelectCell(row, col, value, callback);\r\n    }\r\n    return new InputCell(row, col, value);\r\n}\r\n\r\n\r\nclass InputCell implements Cell {\r\n    element: HTMLElement;\r\n    input: HTMLInputElement;  // If the cell is active, this is the assigned input element\r\n    readonly = false;\r\n\r\n    constructor(public row: number, public col: number, value: CellValue | CellValueOptions) {\r\n        let text: string;\r\n        if (typeof value === 'string' || typeof value === 'number') {\r\n            text = value.toString();\r\n        }\r\n        else {\r\n            this.readonly = value.readonly;\r\n            text = value.value.toString();\r\n        }\r\n        const className = CSS_CELL + (this.readonly ? ' ' + CSS_READONLY : '');\r\n        this.element = createElement(`<div data-ci=\"${col}\" class=\"${className}\">${text}</div>`);\r\n    }\r\n\r\n    destroy() {\r\n\r\n    }\r\n\r\n    selected() {\r\n        return this.element.className.indexOf(CSS_SELECTED) >= 0;\r\n    }\r\n\r\n    select(doSelect = true) {\r\n        const classList = this.element.classList;\r\n        if (doSelect) {\r\n            classList.add(CSS_SELECTED);\r\n        }\r\n        else {\r\n            classList.remove(CSS_SELECTED);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    activate(doActivate = true) {\r\n        const classList = this.element.classList;\r\n        if (doActivate) {\r\n            classList.add(CSS_ACTIVE);\r\n            classList.add(CSS_SELECTED);\r\n        }\r\n        else {\r\n            classList.remove(CSS_ACTIVE);\r\n            classList.remove(CSS_EDITING);\r\n            if (this.input) {\r\n                this.input.blur();\r\n                remove(this.input);\r\n                this.element.innerHTML = this.input.value;\r\n                this.input = null;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    value() {\r\n        return this.input ? this.input.value : this.element.innerHTML;\r\n    }\r\n\r\n    set(value: string) {\r\n        if (!this.readonly) {\r\n            if (this.input) {\r\n                this.input.value = value;\r\n            }\r\n            else {\r\n                this.element.innerHTML = value;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    startEdit(input: HTMLInputElement, select = false) {\r\n        if (this.readonly) {\r\n            return;\r\n        }\r\n        const element = this.element;\r\n        this.input = input;\r\n        input.value = element.innerHTML;\r\n        if (select) {\r\n            input.select();\r\n        }\r\n        input.style.width = element.offsetWidth - 2 + 'px';\r\n        element.classList.add(CSS_EDITING);\r\n        element.innerHTML = '';\r\n        element.appendChild(input);\r\n        input.focus();\r\n    }\r\n\r\n    hasInput() {\r\n        return !!this.input;\r\n    }\r\n}\r\n\r\n\r\nclass SelectCell implements Cell {\r\n    element: HTMLElement;\r\n    selectElement: HTMLSelectElement;\r\n    readonly = false;\r\n    options: ReadonlyArray<CellValue> = null;\r\n    listener;\r\n\r\n    constructor(public row: number, public col: number, value: CellValueOptions, callback: UpdateCallback) {\r\n\r\n        this.readonly = value.readonly;\r\n        this.options = value.options;\r\n\r\n        const className = CSS_CELL + ' ' + CSS_SELECT_CELL + (this.readonly ? ' ' + CSS_READONLY : '');\r\n        this.element = createElement(`<div data-ci=\"${col}\" class=\"${className}\"></div>`);\r\n        this.selectElement = createElement<HTMLSelectElement>(`<select><select>`);\r\n        setOptions(this.selectElement, this.options);\r\n        this.element.appendChild(this.selectElement);\r\n        this.listener = () => callback(this);\r\n        this.selectElement.addEventListener('change', this.listener);\r\n    }\r\n\r\n    destroy() {\r\n        this.selectElement.removeEventListener('change', this.listener);\r\n    }\r\n\r\n    value(): string {\r\n        return this.selectElement.value;\r\n    }\r\n\r\n    set(value: string) {\r\n        this.selectElement.value = value;\r\n    }\r\n\r\n    select(doSelect?: boolean) {\r\n        return this;\r\n    }\r\n\r\n    selected(): boolean {\r\n        return false;\r\n    }\r\n\r\n    activate(doActivate?: boolean) {\r\n        return this;\r\n    }\r\n\r\n    startEdit(input: HTMLInputElement, selectContent?: boolean) {\r\n\r\n    }\r\n\r\n    hasInput(): boolean {\r\n        return false;\r\n    }\r\n}\r\n","import { EventEmitter, EventHandler, EventHandlerBase } from './events';\r\nimport { parseCSV, writeCSV } from './csv';\r\nimport { query, remove, createElement, queryAll, off, on } from './dom';\r\nimport { GridOptions, RowOptions, CellValue, CellValueOptions } from './options';\r\nimport { Cell, createCell } from './cell';\r\nimport { CSS_CELL, CSS_CONTAINER, CSS_GRID, CSS_HEAD, CSS_RESIZER, CSS_ROW } from './css';\r\n\r\n\r\nexport interface InputArgs {\r\n    grid: Grid;\r\n    row: number;\r\n    col: number;\r\n    value: string;\r\n}\r\n\r\nexport interface SelectArgs {\r\n    grid: Grid;\r\n    selection: Array<{ row: number, col: number }>;\r\n}\r\n\r\n\r\n\r\nfunction css(className) {\r\n    return '.' + className;\r\n}\r\n\r\nexport class Grid {\r\n    private container: Element;\r\n    private grid: HTMLElement;\r\n    private rows: Row[] = [];\r\n    private cells: Cell[] = [];\r\n    private activeCell: Cell;\r\n    private events: EventEmitter = new EventEmitter();\r\n    private options: GridOptions;\r\n    private cellInput: HTMLInputElement;\r\n    private hiddenInput: HTMLElement;\r\n    private cleanups: Array<() => any> = [];\r\n\r\n    constructor(container: string | Element, options?: GridOptions) {\r\n        this.container = typeof container === 'string' ? query(container) : container;\r\n        if (options) {\r\n            this.init(options);\r\n        }\r\n    }\r\n\r\n    init(options: GridOptions) {\r\n        this.options = options;\r\n        const container = this.container;\r\n        const rows = this.rows;\r\n        container.innerHTML = '';\r\n        rows.length = 0;\r\n\r\n        if (options.input) {\r\n            this.cellInput = typeof options.input === 'function' ? options.input() : options.input;\r\n            remove(this.cellInput);\r\n        }\r\n        else {\r\n            this.cellInput = createElement<HTMLInputElement>(`<input id=\"celled-cell-input\" type=\"text\" >`);\r\n        }\r\n        // this.cellSelect = createElement<HTMLSelectElement>(`<select id=\"celled-cell-select\"><select>`);\r\n        this.hiddenInput = createElement(\r\n            '<div id=\"celled-hidden-input\" style=\"position:absolute; z-index:-1; left:2px; top: 2px;\" contenteditable tabindex=\"0\"></div>');\r\n        const gridContainer = createElement(`<div class=\"${CSS_CONTAINER}\"></div>`);\r\n        const grid = this.grid = createElement(\r\n            `<div class=\"${CSS_GRID}\"><div class=\"${CSS_ROW} ${CSS_HEAD}\"></div></div>`);\r\n\r\n        container.appendChild(gridContainer);\r\n        gridContainer.appendChild(this.hiddenInput);\r\n        gridContainer.appendChild(grid);\r\n        const head = query(container, css(CSS_HEAD));\r\n        options.cols.forEach((c, index) => head.appendChild(this.createHeadCell(c, index)));\r\n        this.createRows();\r\n        this.initMouse();\r\n        this.initKeys();\r\n        this.initClipboard();\r\n        queryAll(head, css(CSS_CELL)).forEach((c: HTMLElement) => c.style.width = c.offsetWidth + 'px');\r\n    }\r\n\r\n    destroy() {\r\n        this.cleanups.forEach(c => c());\r\n        this.cleanups.length = 0;\r\n        remove(this.grid);\r\n        this.cells.forEach(c => c.destroy());\r\n        this.grid = null;\r\n        this.hiddenInput = null;\r\n        this.cellInput = null;\r\n        this.rows = null;\r\n        this.cells = null;\r\n    }\r\n\r\n    /**\r\n     * Adds an event listener.\r\n     * Grid fires these events:\r\n     * 'input', 'focus', 'select'\r\n     */\r\n    on(event: 'input' | 'focus', handler: EventHandler<InputArgs>);\r\n    on(event: 'select', handler: EventHandler<SelectArgs>);\r\n    on(event: string, handler: EventHandlerBase) {\r\n        this.events.addHandler(event, handler);\r\n    }\r\n\r\n    update(row: number, col: number, value: string) {\r\n        this.setCell(this.rows[row].cells[col], value);\r\n    }\r\n\r\n    addRows(rows: RowOptions[]) {\r\n        if (this.options.canAddRows) {\r\n            [].push.apply(this.options.rows, rows);\r\n            rows.forEach(r => {\r\n                const newRow = this.createRow(r);\r\n                newRow.cells.forEach(c => this.emitInput(c));\r\n            });\r\n            this.flattenCells();\r\n        }\r\n    }\r\n\r\n    addRow() {\r\n        this.addRows([this.options.cols.map(c => '')]);\r\n    }\r\n\r\n    private createHeadCell(text: string | number, columnIndex: number) {\r\n        const column = createElement(`<div class=\"${CSS_CELL}\" data-ci=\"${columnIndex}\"><span>${text}</span></div>`);\r\n        const resizer = createElement(`<div class=\"${CSS_RESIZER}\"></div>`);\r\n        column.appendChild(resizer);\r\n\r\n        let downPosition = null;\r\n        let nextColumn = null;\r\n        let currentWidth = null;\r\n        let currentNextWidth = null;\r\n        let selection = null;\r\n\r\n        const mousemove = (e: MouseEvent) => {\r\n            if (selection) {\r\n                let col = e.target as Element;\r\n                while (col) {\r\n                    const ciAttr = col.getAttribute('data-ci');\r\n                    const ci = +ciAttr;\r\n                    if (ciAttr !== null && !isNaN(ci)) {\r\n                        const minCol = Math.min(columnIndex, ci);\r\n                        const maxCol = Math.max(columnIndex, ci);\r\n                        if (selection[0] !== minCol || selection[1] !== maxCol) {\r\n                            selection = [minCol, maxCol];\r\n                            this.cells.forEach(c => c.select(c.col >= minCol && c.col <= maxCol));\r\n                            this.emitSelect();\r\n                        }\r\n                        break;\r\n                    }\r\n                    col = col.parentElement;\r\n                }\r\n            }\r\n            else {\r\n                const diff = e.pageX - downPosition;\r\n                if (nextColumn) {\r\n                    nextColumn.style.width = (currentNextWidth - diff) + 'px';\r\n                }\r\n                column.style.width = (currentWidth + diff) + 'px';\r\n            }\r\n        };\r\n\r\n        const mouseup = () => {\r\n            downPosition = null;\r\n            selection = null;\r\n            off(document, 'mousemove', mousemove);\r\n            off(document, 'mouseup', mouseup);\r\n        };\r\n\r\n        on(column, 'mousedown', (e: MouseEvent) => {\r\n            if (e.target === resizer) {\r\n                // Resize columns\r\n                nextColumn = column.nextElementSibling;\r\n                downPosition = e.pageX;\r\n                currentWidth = column.offsetWidth;\r\n                currentNextWidth = nextColumn ? nextColumn.offsetWidth : null;\r\n            }\r\n            else if (this.rows.length) {\r\n                // Select column\r\n                const i = +column.getAttribute('data-ci');\r\n                selection = true;\r\n                this.cells.forEach(c => c.activate(false).select(c.col === i));\r\n                selection = [i, i];\r\n                this.focusHiddenInput();\r\n                this.activeCell = this.rows[0].cells[i];\r\n                this.emitSelect();\r\n            }\r\n            on(document, 'mouseup', mouseup);\r\n            on(document, 'mousemove', mousemove);\r\n            e.preventDefault();\r\n        });\r\n\r\n        return column;\r\n    }\r\n\r\n    private focusHiddenInput() {\r\n        // Focus the hidden input element to receive paste events.\r\n        // Prevent scrolling up if input was blurred at the end of a long table.\r\n        this.hiddenInput.focus({ preventScroll: true });\r\n    }\r\n\r\n    private createRow(r: RowOptions): Row {\r\n        const row = new Row(this.rows.length);\r\n        row.addCells(r, cell => this.emitInput(cell));\r\n        this.rows.push(row);\r\n        this.grid.appendChild(row.element);\r\n        return row;\r\n    }\r\n\r\n    private createRows() {\r\n        this.rows = [];\r\n        this.options.rows.forEach(r => this.createRow(r));\r\n        this.flattenCells();\r\n    }\r\n\r\n    private flattenCells() {\r\n        this.cells = this.rows.reduce((a, b) => a.concat(b.cells), [] as Cell[]);\r\n    }\r\n\r\n    private initMouse() {\r\n        const rows = this.rows;\r\n        let downCellIndex: number;\r\n        let downRowIndex: number;\r\n\r\n        let selectionIdentifier: string = null;\r\n        const rememberSelection = (r1, c1, r2, c2) => '' + r1 + c1 + r2 + c2;\r\n\r\n        const getTargetCell = (e: MouseEvent) => {\r\n            const cell = e.target as Element;\r\n            if (!cell || !cell.parentElement) {\r\n                return;\r\n            }\r\n            const cellIndexAttr = cell.getAttribute('data-ci');\r\n            const rowIndexAttr = cell.parentElement.getAttribute('data-ri');\r\n            const cellIndex = +cellIndexAttr;\r\n            const rowIndex = +rowIndexAttr;\r\n            if (cellIndexAttr && rowIndexAttr && !isNaN(cellIndex) && !isNaN(rowIndex)) {\r\n                return this.rows[rowIndex].cells[cellIndex];\r\n            }\r\n        };\r\n\r\n        const mousemove = (moveEvent: MouseEvent) => {\r\n            const targetCell = getTargetCell(moveEvent);\r\n            if (targetCell) {\r\n                const rowIndex = targetCell.row;\r\n                const cellIndex = targetCell.col;\r\n                const firstRow = Math.min(rowIndex, downRowIndex);\r\n                const lastRow = Math.max(rowIndex, downRowIndex);\r\n                const firstCol = Math.min(cellIndex, downCellIndex);\r\n                const lastCol = Math.max(cellIndex, downCellIndex);\r\n                const newSelectionIdentifier = rememberSelection(firstRow, firstCol, lastRow, lastCol);\r\n                if (selectionIdentifier !== newSelectionIdentifier) {\r\n                    selectionIdentifier = newSelectionIdentifier;\r\n                    this.unselect();\r\n                    for (let ri = firstRow; ri <= lastRow; ++ri) {\r\n                        for (let ci = firstCol; ci <= lastCol; ++ci) {\r\n                            this.rows[ri].cells[ci].select();\r\n                        }\r\n                    }\r\n                    this.emitSelect();\r\n                }\r\n            }\r\n        };\r\n\r\n        const mouseup = () => {\r\n            off(document, 'mousemove', mousemove);\r\n            off(document, 'mouseup', mouseup);\r\n        };\r\n\r\n        let lastMouseDown = Date.now();\r\n        const cleanupMousedown = on(this.grid, 'mousedown', (e: MouseEvent) => {\r\n            const cell = getTargetCell(e);\r\n            if (cell) {\r\n                const timeSinceLast = Date.now() - lastMouseDown;\r\n                lastMouseDown = Date.now();\r\n                if (cell.hasInput()) {\r\n                    // The cell is already in edit mode. Do nothing and continue with default event handling\r\n                    return;\r\n                }\r\n                else if (cell === this.activeCell && !cell.readonly && timeSinceLast < 300) {\r\n                    // Double click on cell to start edit mode\r\n                    // if (Array.isArray(cell.options)) {\r\n                    //     cell.startSelect(this.cellSelect);\r\n                    // }\r\n                    cell.startEdit(this.cellInput);\r\n                    this.emitFocus();\r\n                }\r\n                else {\r\n                    const rowIndex = cell.row;\r\n                    const cellIndex = cell.col;\r\n                    downRowIndex = rowIndex;\r\n                    downCellIndex = cellIndex;\r\n                    selectionIdentifier = rememberSelection(rowIndex, cellIndex, rowIndex, cellIndex);\r\n                    this.activate(cell);\r\n                    on(document, 'mouseup', mouseup);\r\n                    on(document, 'mousemove', mousemove);\r\n                }\r\n                e.preventDefault();\r\n            }\r\n        });\r\n        this.cleanups.push(cleanupMousedown);\r\n\r\n        const cleanupMouseup = on(document, 'mouseup', (e: MouseEvent) => {\r\n            if (this.activeCell) {\r\n                // Unselect all if was click outside of the grid.\r\n                for (let target = e.target as Node; target; target = target.parentNode) {\r\n                    if (target === this.container) {\r\n                        return;\r\n                    }\r\n                }\r\n                this.activeCell.activate(false);\r\n                if (this.unselect()) {\r\n                    this.emitSelect();\r\n                }\r\n            }\r\n        });\r\n        this.cleanups.push(cleanupMouseup);\r\n    }\r\n\r\n    private activate(cell: Cell, doActivate = true) {\r\n        if (this.activeCell) {\r\n            this.activeCell.activate(false);\r\n        }\r\n        let selectionChanged = false;\r\n        this.cells.forEach(c => {\r\n            selectionChanged = c === cell ? (c.selected() !== doActivate) : (selectionChanged || c.selected());\r\n            c.select(false);\r\n        });\r\n        this.activeCell = cell.select(doActivate).activate(doActivate);\r\n        if (selectionChanged) {\r\n            this.emitSelect();\r\n        }\r\n        this.focusHiddenInput();\r\n    }\r\n\r\n    private moveActive(rowDelta: number, colDelta: number, addRows = false) {\r\n        const activeCell = this.activeCell;\r\n        if (activeCell) {\r\n            const rows = this.rows;\r\n            const rowIndex = activeCell.row + rowDelta;\r\n            while (addRows && this.options.canAddRows && rowIndex >= rows.length) {\r\n                this.addRow();\r\n            }\r\n            const nextRow = rows[rowIndex];\r\n            if (nextRow) {\r\n                const cell = nextRow.cells[activeCell.col + colDelta];\r\n                if (cell) {\r\n                    this.activate(cell);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private initKeys() {\r\n        const hiddenInput = this.hiddenInput;\r\n        const cellInput = this.cellInput;\r\n\r\n        this.cleanups.push(on(hiddenInput, 'keydown', (e: KeyboardEvent) => {\r\n            e = e || window.event as KeyboardEvent;\r\n            const keyCode = e.keyCode;\r\n            if (keyCode === 46) {  // del\r\n                this.cells.forEach(cell => {\r\n                    if (cell.selected()) {\r\n                        this.setCell(cell, '');\r\n                    }\r\n                });\r\n                e.preventDefault();\r\n            }\r\n            if (keyCode === 37) {\r\n                this.moveActive(0, -1);\r\n            }\r\n            if (keyCode === 38) {\r\n                this.moveActive(-1, 0);\r\n            }\r\n            if (keyCode === 39) {\r\n                this.moveActive(0, 1);\r\n            }\r\n            if (keyCode === 40) {\r\n                this.moveActive(1, 0);\r\n            }\r\n        }));\r\n\r\n        const onInput = (e: KeyboardEvent) => {\r\n            const activeCell = this.activeCell;\r\n            if (activeCell && !activeCell.readonly && activeCell.hasInput()) {\r\n                this.updatValue(activeCell);\r\n                this.cells.forEach(cell => {\r\n                    if (cell.selected() && cell !== activeCell) {\r\n                        this.setCell(cell, activeCell.value());\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        this.cleanups.push(on(cellInput, 'input', onInput));\r\n        this.cleanups.push(on(cellInput, 'keydown', (e: KeyboardEvent) => {\r\n            if (e.keyCode === 13) {\r\n                // ENTER, stop edit and move to next row\r\n                this.moveActive(0, 0);\r\n                this.moveActive(1, 0, true);\r\n                e.preventDefault();\r\n            }\r\n            if (e.keyCode === 27) {\r\n                // ESCAPE, stop edit but stay at same cell\r\n                this.moveActive(0, 0);\r\n                e.preventDefault();\r\n            }\r\n        }));\r\n\r\n        this.cleanups.push(on(hiddenInput, 'keypress', (e: KeyboardEvent) => {\r\n            const activeCell = this.activeCell;\r\n            if (activeCell && !activeCell.readonly && !activeCell.hasInput()) {\r\n                activeCell.startEdit(cellInput, true);\r\n                this.emitFocus();\r\n            }\r\n            else {\r\n                e.preventDefault();\r\n            }\r\n        }));\r\n    }\r\n\r\n    pasteCSV(csvText: string, separator: string, startRow?: number, startCol?: number) {\r\n        const csv = parseCSV(csvText, separator);\r\n        const activeCell = this.activeCell;\r\n        if (isNaN(startRow) && !activeCell) {\r\n            return;\r\n        }\r\n        startRow = isNaN(startRow) ? activeCell.row : startRow;\r\n        startCol = isNaN(startCol) ? activeCell.col : startCol;\r\n\r\n        csv.forEach((csvRow, csvRowIndex) => {\r\n            let tableRow = this.rows[startRow + csvRowIndex];\r\n            if (!tableRow && this.options.canAddRows) {\r\n                const prevRow = this.rows[startRow];\r\n                this.addRows([prevRow.cells.map(c => '')]);\r\n                tableRow = this.rows[startRow + csvRowIndex];\r\n            }\r\n            const tableCol = startCol;\r\n            const isLastEmptyRow = csvRow.length === 1 && csvRow[0] === '';\r\n            if (tableRow && !isLastEmptyRow) {\r\n                csvRow.forEach((csvCell, csvColIndex) => {\r\n                    const cell = tableRow.cells[tableCol + csvColIndex];\r\n                    if (cell && !cell.readonly) {\r\n                        this.setCell(cell, csvCell);\r\n                        cell.select();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private initClipboard() {\r\n        on(this.hiddenInput, 'paste', (e: ClipboardEvent) => {\r\n            // Don't actually paste to hidden input\r\n            e.preventDefault();\r\n            const text = (e.clipboardData || (window as any).clipboardData).getData('text');\r\n            this.pasteCSV(text, '\\t');\r\n        });\r\n\r\n        on(this.hiddenInput, 'copy', (e: ClipboardEvent) => {\r\n            e.preventDefault();\r\n            const activeCell = this.activeCell;\r\n            if (!activeCell) {\r\n                return;\r\n            }\r\n\r\n            const csv = [];\r\n            for (let ri = activeCell.row; ; ri++) {\r\n                const row = this.rows[ri];\r\n                const csvRow = [];\r\n                if (!row || !row.cells[activeCell.col] || !row.cells[activeCell.col].selected()) {\r\n                    break;\r\n                }\r\n                for (let ci = activeCell.col; ; ++ci) {\r\n                    const cell = row.cells[ci];\r\n                    if (!cell || !cell.selected()) {\r\n                        break;\r\n                    }\r\n                    csvRow.push(cell.value());\r\n                }\r\n                csv.push(csvRow);\r\n            }\r\n            const clipboard = (e.clipboardData || (window as any).clipboardData);\r\n            clipboard.setData('text/plain', writeCSV(csv, '\\t'));\r\n        });\r\n    }\r\n\r\n    private setCell(cell: Cell, value: string) {\r\n        if (!cell.readonly) {\r\n            cell.set(value);\r\n            this.updatValue(cell);\r\n        }\r\n    }\r\n\r\n    private unselect(): boolean {\r\n        let selectionChanged = false;\r\n        this.cells.forEach(c => {\r\n            selectionChanged = selectionChanged || c.selected();\r\n            c.select(false);\r\n        });\r\n        return selectionChanged;\r\n    }\r\n\r\n    private updatValue(cell: Cell) {\r\n        const colIndex = cell.col;\r\n        const rowOption = this.options.rows[cell.row];\r\n        const cellValue = rowOption[colIndex];\r\n        if (typeof cellValue === 'string' || typeof cellValue === 'number') {\r\n            rowOption[colIndex] = cell.value();\r\n        }\r\n        else {\r\n            cellValue.value = cell.value();\r\n        }\r\n        this.emitInput(cell);\r\n    }\r\n\r\n    private emitInput(cell: Cell) {\r\n        this.events.emit<InputArgs>('input', {\r\n            grid: this,\r\n            col: cell.col,\r\n            row: cell.row,\r\n            value: cell.value(),\r\n        });\r\n    }\r\n\r\n    private emitFocus() {\r\n        const cell = this.activeCell;\r\n        this.events.emit<InputArgs>('focus', {\r\n            grid: this,\r\n            col: cell.col,\r\n            row: cell.row,\r\n            value: cell.value(),\r\n        });\r\n    }\r\n\r\n    private emitSelect() {\r\n        this.events.emit<SelectArgs>('select', {\r\n            grid: this,\r\n            selection: this.cells.filter(c => c.selected()).map(c => ({\r\n                row: c.row,\r\n                col: c.col,\r\n            })),\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nclass Row {\r\n    element: Element;\r\n    cells: Cell[] = [];\r\n\r\n    constructor(public index: number) {\r\n        this.element = createElement(`<div data-ri=\"${index}\" class=\"${CSS_ROW}\"></div>`) as Element;\r\n    }\r\n\r\n    addCells(cells: Array<CellValue | CellValueOptions>, updateValueCallback: (cell: Cell) => unknown) {\r\n        cells.forEach((c, columnIndex) => {\r\n            const cell = createCell(this.index, columnIndex, c, updateValueCallback);\r\n            this.cells.push(cell);\r\n            this.element.appendChild(cell.element);\r\n        });\r\n    }\r\n}\r\n\r\n// ----\r\n","// ref: https://stackoverflow.com/a/14991797/498298\r\n// This will parse a delimited string into an array of\r\n// arrays. The default delimiter is the comma, but this\r\n// can be overriden in the second argument.\r\nexport function parseCSV(str: string, delimiter: string) {\r\n    const arr: string[][] = [];\r\n    let quote = false;  // 'true' means we're inside a quoted field\r\n\r\n    // Iterate over each character, keep track of current row and column (of the returned array)\r\n    for (let row = 0, col = 0, i = 0; i < str.length; i++) {\r\n        const currentChar = str[i];\r\n        const nextChar = str[i + 1];\r\n        arr[row] = arr[row] || [];             // Create a new row if necessary\r\n        arr[row][col] = arr[row][col] || '';   // Create a new column (start with empty string) if necessary\r\n\r\n        // If the current character is a quotation mark, and we're inside a\r\n        // quoted field, and the next character is also a quotation mark,\r\n        // add a quotation mark to the current column and skip the next character\r\n        if (currentChar === '\"' && quote && nextChar === '\"') {\r\n            arr[row][col] += currentChar;\r\n            ++i;\r\n            continue;\r\n        }\r\n\r\n        // If it's just one quotation mark, begin/end quoted field\r\n        if (currentChar === '\"') {\r\n            quote = !quote;\r\n            continue;\r\n        }\r\n\r\n        // If it's a delimiter and we're not in a quoted field, move on to the next column\r\n        if (currentChar === delimiter && !quote) {\r\n            ++col;\r\n            continue;\r\n        }\r\n\r\n        // If it's a newline (CRLF) and we're not in a quoted field, skip the next character\r\n        // and move on to the next row and move to column 0 of that new row\r\n        if (currentChar === '\\r' && nextChar === '\\n' && !quote) {\r\n            ++row;\r\n            col = 0;\r\n            ++i;\r\n            continue;\r\n        }\r\n\r\n        // If it's a newline (LF or CR) and we're not in a quoted field,\r\n        // move on to the next row and move to column 0 of that new row\r\n        if ((currentChar === '\\n' || currentChar === '\\r') && !quote) {\r\n            ++row;\r\n            col = 0;\r\n            continue;\r\n        }\r\n\r\n        // Otherwise, append the current character to the current column\r\n        arr[row][col] += currentChar;\r\n    }\r\n    return arr;\r\n}\r\n\r\n\r\nexport function writeCSV(values: Array<string[]>, separator: string, linebreak = '\\n') {\r\n\r\n    let content = '';\r\n    values.forEach((row, ri) => {\r\n        if (ri > 0) {\r\n            content += linebreak;\r\n        }\r\n        row.forEach((cell, ci) => {\r\n            cell = cell.replace(/\"/g, '\"\"');\r\n            if (cell.search(/(\"|,|\\n)/g) >= 0) {\r\n                cell = '\"' + cell + '\"';\r\n            }\r\n            if (ci > 0) {\r\n                content += separator;\r\n            }\r\n            content += cell;\r\n        });\r\n    });\r\n    return content;\r\n\r\n}\r\n"],"names":["this","EventEmitter","event","handler","handlers","push","splice","indexOf","args","forEach","query","elOrCss","cssSelector","document","querySelector","createElement","html","div","innerHTML","trim","firstChild","on","element","listener","addEventListener","removeEventListener","offFunc","off","remove","node","parentNode","parentElement","removeChild","CSS_ROW","CSS_PREFIX","CSS_CELL","CSS_SELECT_CELL","CSS_READONLY","row","col","value","text","toString","readonly","className","InputCell","doSelect","classList","add","doActivate","input","blur","select","style","width","offsetWidth","appendChild","focus","callback","options","selectElement","i","length","options_1","_i","option","optionElement","setOptions","_this","SelectCell","selectContent","css","container","init","Grid","rows","cellInput","hiddenInput","gridContainer","grid","head","cols","c","index","createHeadCell","createRows","initMouse","initKeys","initClipboard","slice","call","querySelectorAll","cleanups","cells","destroy","events","addHandler","setCell","canAddRows","apply","r","createRow","emitInput","flattenCells","addRows","map","columnIndex","column","resizer","downPosition","nextColumn","currentWidth","currentNextWidth","selection","mousemove","e","target","ciAttr","getAttribute","ci","isNaN","minCol_1","Math","min","maxCol_1","max","emitSelect","diff","pageX","mouseup","nextElementSibling","i_1","activate","focusHiddenInput","activeCell","preventDefault","preventScroll","Row","addCells","cell","reduce","a","b","concat","downCellIndex","downRowIndex","selectionIdentifier","rememberSelection","r1","c1","r2","c2","getTargetCell","cellIndexAttr","rowIndexAttr","cellIndex","rowIndex","moveEvent","targetCell","firstRow","lastRow","firstCol","lastCol","newSelectionIdentifier","unselect","ri","lastMouseDown","Date","now","cleanupMousedown","timeSinceLast","hasInput","startEdit","emitFocus","cleanupMouseup","selectionChanged","selected","rowDelta","colDelta","addRow","nextRow","keyCode","window","moveActive","updatValue","csvText","separator","startRow","startCol","csv","str","delimiter","arr","quote","currentChar","nextChar","parseCSV","csvRow","csvRowIndex","tableRow","prevRow","tableCol","isLastEmptyRow","csvCell","csvColIndex","clipboardData","getData","pasteCSV","setData","values","linebreak","content","replace","search","writeCSV","set","colIndex","rowOption","cellValue","emit","filter","updateValueCallback","Array","isArray"],"mappings":"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"}