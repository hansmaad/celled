{"version":3,"file":"celled.min.js","sources":["../src/lib/events.ts","../src/lib/dom.ts","../src/lib/css.ts","../src/lib/cell.ts","../src/lib/row.ts","../src/lib/render.ts","../src/lib/grid.ts","../src/lib/csv.ts"],"sourcesContent":["\r\nexport interface EventArgs { }\r\n\r\nexport type EventHandlerBase = (arg: EventArgs) => any;\r\n\r\nexport interface EventHandler<T> extends EventHandlerBase {\r\n    (arg: T): any;\r\n}\r\n\r\nexport class EventEmitter {\r\n    handlers: { [event: string]: EventHandlerBase[] } = {};\r\n\r\n    addHandler(event: string, handler: EventHandlerBase) {\r\n        const handlers = this.handlers;\r\n        handlers[event] = handlers[event] || [];\r\n        handlers[event].push(handler);\r\n    }\r\n\r\n    removeHandler(event: string, handler: EventHandlerBase) {\r\n        const allHandlers = this.handlers;\r\n        const handlers = allHandlers[event];\r\n        if (handlers && handler) {\r\n            handlers.splice(handlers.indexOf(handler), 1);\r\n        }\r\n    }\r\n\r\n    emit<TArgs extends EventArgs>(event: string, args: TArgs) {\r\n        const handlers = this.handlers[event];\r\n        if (handlers) {\r\n           handlers.forEach(handler => {\r\n                try {\r\n                    handler(args);\r\n                }\r\n                catch {}\r\n            });\r\n        }\r\n    }\r\n}\r\n","export function query<T = Element>(elOrCss, cssSelector?): T {\r\n    if (!cssSelector) {\r\n        cssSelector = elOrCss;\r\n        elOrCss = document;\r\n    }\r\n    return elOrCss.querySelector(cssSelector);\r\n}\r\n\r\nexport function queryAll<T = Element>(elOrCss, cssSelector?): T[] {\r\n    if (!cssSelector) {\r\n        cssSelector = elOrCss;\r\n        elOrCss = document;\r\n    }\r\n    return [].slice.call(elOrCss.querySelectorAll(cssSelector));\r\n}\r\n\r\nexport function createElement<T extends HTMLElement>(html: string): T {\r\n    const div = document.createElement('div');\r\n    div.innerHTML = html.trim();\r\n    return div.firstChild as T;\r\n}\r\n\r\nexport function on(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    element.addEventListener(event, listener);\r\n    return offFunc(element, event, listener);\r\n}\r\n\r\nexport function off(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    element.removeEventListener(event, listener);\r\n}\r\n\r\nexport function offFunc(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    return () => element.removeEventListener(event, listener);\r\n}\r\n\r\nexport function getKey(e: KeyboardEvent) {\r\n    e = e || window.event as KeyboardEvent;\r\n    return String.fromCharCode(e.keyCode || e.which);\r\n}\r\n\r\nexport function remove(node: Node) {\r\n    if (node.parentNode) {\r\n        node.parentElement.removeChild(node);\r\n    }\r\n}\r\n\r\nexport function setOptions(selectElement: HTMLSelectElement, options: ReadonlyArray<any>) {\r\n    for (let i = selectElement.options.length; i > 0; i--) {\r\n        selectElement.remove(i);\r\n    }\r\n    for (const option of options) {\r\n        const optionElement = document.createElement('option');\r\n        optionElement.value = '' + option;\r\n        optionElement.innerHTML = '' + option;\r\n        selectElement.appendChild(optionElement);\r\n    }\r\n}\r\n","export const CSS_PREFIX = 'ced';\r\nexport const CSS_CONTAINER = `${CSS_PREFIX}-grid-container`;\r\nexport const CSS_CONTAINER_SCROLL = `${CSS_PREFIX}-grid-container-scroll`;\r\nexport const CSS_GRID = `${CSS_PREFIX}-grid`;\r\nexport const CSS_ROW = `${CSS_PREFIX}-row`;\r\nexport const CSS_CELL = `${CSS_PREFIX}-cell`;\r\nexport const CSS_SELECT_CELL = `${CSS_PREFIX}-select-cell`;\r\nexport const CSS_HEAD = `${CSS_PREFIX}-head`;\r\nexport const CSS_HEAD_STICKY = `${CSS_PREFIX}-head-sticky`;\r\nexport const CSS_RESIZER = `${CSS_PREFIX}-resizer`;\r\nexport const CSS_EDITING = `${CSS_PREFIX}-editing`;\r\nexport const CSS_ACTIVE = `${CSS_PREFIX}-active`;\r\nexport const CSS_SELECTED = `${CSS_PREFIX}-selected`;\r\nexport const CSS_READONLY = `${CSS_PREFIX}-readonly`;\r\n","import { CSS_CELL, CSS_READONLY, CSS_SELECTED, CSS_ACTIVE, CSS_EDITING, CSS_SELECT_CELL } from './css';\r\nimport { createElement, remove, setOptions } from './dom';\r\nimport { CellValue, CellValueOptions } from './options';\r\n\r\nexport type UpdateCallback = (cell: Cell) => unknown;\r\n\r\nexport interface Cell {\r\n    readonly: boolean;\r\n    row: number;\r\n    col: number;\r\n\r\n    /**\r\n     * Cleanup any resources, listeners...\r\n     */\r\n    destroy(): void;\r\n\r\n    /**\r\n     * The currently displayed value.\r\n     */\r\n    value(): string;\r\n\r\n    /**\r\n     * Show a new value.\r\n     */\r\n    set(value: string): void;\r\n\r\n    /**\r\n     * Mark the cell as selected. This will apply css classes\r\n     * to visualize the cell as a selected cell.\r\n     */\r\n    select(doSelect?: boolean): this;\r\n\r\n    /**\r\n     * Cell was selected with select(true).\r\n     */\r\n    selected(): boolean;\r\n\r\n    /**\r\n     * This will apply css classes to visualize the cell as a selected and active cell.\r\n     * The active cell is the leading cell in a multi edit situation. It will contain\r\n     * the editing control.\r\n     * If doActivate is false, the editing control will be removed.\r\n     */\r\n    activate(doActivate?: boolean): this;\r\n\r\n    /**\r\n     * Start the editing process. The cell can use the passed input element to let\r\n     * the user enter free text.\r\n     */\r\n    startEdit(input: HTMLInputElement, selectContent?: boolean);\r\n\r\n    /**\r\n     * This cell is ready to consume key events\r\n     */\r\n    takesKey(): boolean;\r\n\r\n    /**\r\n     * This cell is ready to consume mouse click events\r\n     */\r\n    takesMouse(): boolean;\r\n}\r\n\r\n/**\r\n * Create a new Cell instance matching the definitions in the value parameter.\r\n * @param callback  Can be used by the cell to notify value changes that are not\r\n *                  triggered from outside.\r\n */\r\nexport function createCell(row: number, col: number, value: CellValue | CellValueOptions, callback: UpdateCallback) {\r\n    if (typeof value !== 'string' && typeof value !== 'number' && Array.isArray(value.options)) {\r\n        return new SelectCell(row, col, value, callback);\r\n    }\r\n    return new InputCell(row, col, value);\r\n}\r\n\r\n\r\nclass InputCell implements Cell {\r\n    element: HTMLElement;\r\n    input: HTMLInputElement;  // If the cell is active, this is the assigned input element\r\n    readonly = false;\r\n\r\n    constructor(public row: number, public col: number, value: CellValue | CellValueOptions) {\r\n        let text: string;\r\n        if (typeof value === 'string' || typeof value === 'number') {\r\n            text = value.toString();\r\n        }\r\n        else {\r\n            this.readonly = value.readonly;\r\n            text = value.value.toString();\r\n        }\r\n        const className = CSS_CELL + (this.readonly ? ' ' + CSS_READONLY : '');\r\n        this.element = createElement(`<div data-ci=\"${col}\" class=\"${className}\">${valueHTML(text)}</div>`);\r\n    }\r\n\r\n    destroy() {\r\n\r\n    }\r\n\r\n    selected() {\r\n        return isSelectCss(this.element);\r\n    }\r\n\r\n    select(doSelect = true) {\r\n        setSelectCSS(this.element, doSelect);\r\n        return this;\r\n    }\r\n\r\n    activate(doActivate = true) {\r\n        const classList = this.element.classList;\r\n        if (doActivate) {\r\n            classList.add(CSS_ACTIVE);\r\n            classList.add(CSS_SELECTED);\r\n        }\r\n        else {\r\n            classList.remove(CSS_ACTIVE);\r\n            classList.remove(CSS_EDITING);\r\n            if (this.input) {\r\n                this.input.blur();\r\n                remove(this.input);\r\n                this.element.innerHTML = valueHTML(this.input.value);\r\n                this.input = null;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    value() {\r\n        return this.input ? this.input.value : this.element.textContent;\r\n    }\r\n\r\n    set(value: string) {\r\n        if (!this.readonly) {\r\n            if (this.input) {\r\n                this.input.value = value;\r\n            }\r\n            else {\r\n                this.element.innerHTML = valueHTML(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    startEdit(input: HTMLInputElement, select = false) {\r\n        if (this.readonly) {\r\n            return;\r\n        }\r\n        const element = this.element;\r\n        this.input = input;\r\n        input.value = element.textContent;\r\n        if (select) {\r\n            input.select();\r\n        }\r\n        input.style.width = element.offsetWidth - 2 + 'px';\r\n        element.classList.add(CSS_EDITING);\r\n        element.innerHTML = '';\r\n        element.appendChild(input);\r\n        input.focus();\r\n    }\r\n\r\n    takesKey(): boolean {\r\n        return !!this.input;\r\n    }\r\n\r\n    takesMouse(): boolean {\r\n        return this.takesKey();\r\n    }\r\n}\r\n\r\nfunction valueHTML(value) {\r\n    return `<span>${value}</span>`;\r\n}\r\n\r\nclass SelectCell implements Cell {\r\n    element: HTMLElement;\r\n    selectElement: HTMLSelectElement;\r\n    readonly = false;\r\n    options: ReadonlyArray<CellValue> = null;\r\n    listener;\r\n\r\n    constructor(public row: number, public col: number, value: CellValueOptions, callback: UpdateCallback) {\r\n\r\n        this.readonly = value.readonly;\r\n        this.options = value.options;\r\n\r\n        const className = CSS_CELL + ' ' + CSS_SELECT_CELL + (this.readonly ? ' ' + CSS_READONLY : '');\r\n        this.element = createElement(`<div data-ci=\"${col}\" class=\"${className}\"></div>`);\r\n        this.selectElement = createElement<HTMLSelectElement>(`<select><select>`);\r\n        setOptions(this.selectElement, this.options);\r\n        this.set('' + value.value);\r\n        this.element.appendChild(this.selectElement);\r\n        this.listener = () => callback(this);\r\n        this.selectElement.addEventListener('change', this.listener);\r\n    }\r\n\r\n    destroy() {\r\n        this.selectElement.removeEventListener('change', this.listener);\r\n    }\r\n\r\n    value(): string {\r\n        return this.selectElement.value;\r\n    }\r\n\r\n    set(value: string) {\r\n        this.selectElement.value = value;\r\n    }\r\n\r\n    select(doSelect = true) {\r\n        setSelectCSS(this.element, doSelect);\r\n        return this;\r\n    }\r\n\r\n    selected(): boolean {\r\n        return isSelectCss(this.element);\r\n    }\r\n\r\n    activate(doActivate?: boolean) {\r\n        return this;\r\n    }\r\n\r\n    startEdit(input: HTMLInputElement, selectContent?: boolean) {\r\n\r\n    }\r\n\r\n    takesKey(): boolean {\r\n        return false;\r\n    }\r\n\r\n    takesMouse(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction setSelectCSS(element: HTMLElement, doSelect: boolean) {\r\n    const classList = element.classList;\r\n    if (doSelect) {\r\n        classList.add(CSS_SELECTED);\r\n    }\r\n    else {\r\n        classList.remove(CSS_SELECTED);\r\n    }\r\n}\r\n\r\nfunction isSelectCss(element: HTMLElement) {\r\n    return element.className.indexOf(CSS_SELECTED) >= 0;\r\n}\r\n","import { Cell, createCell } from './cell';\r\nimport { CSS_ROW } from './css';\r\nimport { createElement } from './dom';\r\nimport { CellValue, CellValueOptions } from './options';\r\n\r\nexport class Row {\r\n    element: HTMLElement;\r\n    cells: Cell[] = [];\r\n\r\n    constructor(public index: number) {\r\n        this.element = createElement(`<div data-ri=\"${index}\" class=\"${CSS_ROW}\"></div>`);\r\n    }\r\n\r\n    addCells(cells: Array<CellValue | CellValueOptions>, updateValueCallback: (cell: Cell) => unknown) {\r\n        cells.forEach((c, columnIndex) => {\r\n            const cell = createCell(this.index, columnIndex, c, updateValueCallback);\r\n            this.cells.push(cell);\r\n            this.element.appendChild(cell.element);\r\n        });\r\n    }\r\n}\r\n","import { Row } from './row';\r\n\r\nexport interface RenderOptions {\r\n    container: HTMLElement;\r\n    gridContainer: HTMLElement;  // child of container\r\n    grid: HTMLElement;           // child of gridContainer\r\n    head: HTMLElement;\r\n}\r\n\r\nexport interface Renderer {\r\n    rerender(rows: Row[]);\r\n    destroy();\r\n}\r\n\r\nexport class DefaultRenderer implements Renderer {\r\n\r\n    constructor(private options: RenderOptions) {\r\n    }\r\n\r\n    rerender(rows: Row[]) {\r\n        const { grid, head } = this.options;\r\n        grid.innerHTML = '';\r\n        grid.appendChild(head);\r\n        rows.forEach(r => {\r\n            grid.appendChild(r.element);\r\n        });\r\n    }\r\n\r\n    destroy() {\r\n        this.options = null;\r\n    }\r\n}\r\n\r\n\r\nexport class VirtualRenderer implements Renderer {\r\n\r\n    private onScroll;\r\n\r\n    constructor(private options: RenderOptions) {\r\n    }\r\n\r\n    rerender(rows: Row[]) {\r\n        const { grid, head, container, gridContainer } = this.options;\r\n\r\n        if (this.onScroll) {\r\n            container.removeEventListener('scroll', this.onScroll);\r\n        }\r\n        const itemPadding = 4;\r\n\r\n        const currentRange = {\r\n            start: undefined,\r\n            end: undefined,\r\n        };\r\n\r\n        let rowHeight = 34;  // just a guess\r\n        grid.style.position = 'absolute';\r\n\r\n        const update = (scrollTop: number) => {\r\n            const itemCount = rows.length;\r\n            const viewportHeight = container.offsetHeight;\r\n            const totalContentHeight = itemCount * rowHeight;\r\n\r\n            let startIndex = Math.floor(scrollTop / rowHeight) - itemPadding;\r\n            if (startIndex % 2 > 0) {\r\n                // always start with an odd index to keep alternating styles consistent\r\n                startIndex -= 1;\r\n            }\r\n            startIndex = Math.max(0, startIndex);\r\n\r\n            let visibleNodesCount = Math.ceil(viewportHeight / rowHeight) + 2 * itemPadding;\r\n            visibleNodesCount = Math.min(itemCount - startIndex, visibleNodesCount);\r\n            const endIndex = startIndex + visibleNodesCount;\r\n            const offsetY = startIndex * rowHeight;\r\n\r\n            gridContainer.style.height = `${totalContentHeight}px`;\r\n            grid.style['top'] = `${offsetY}px`;\r\n\r\n            // Render\r\n            if (currentRange.start !== startIndex || currentRange.end !== endIndex) {\r\n                const desiredRenderHeight = visibleNodesCount * rowHeight; // viewport + padding\r\n                currentRange.start = startIndex;\r\n                currentRange.end = endIndex;\r\n                grid.innerHTML = '';\r\n                grid.appendChild(head);\r\n                const headerHeight = grid.offsetHeight;\r\n                let renderedHeight = 0;\r\n\r\n                // First add items from start to end index at once\r\n                const fragment = document.createDocumentFragment();\r\n                let i = startIndex;\r\n                for (; i <= endIndex && i < rows.length; ++i) {\r\n                    const row = rows[i];\r\n                    fragment.appendChild(row.element);\r\n                }\r\n                grid.appendChild(fragment);\r\n                renderedHeight = grid.offsetHeight - headerHeight;\r\n\r\n                // Add items until we reached the desired height\r\n                for (; renderedHeight < desiredRenderHeight && i < rows.length; ++i) {\r\n                    const row = rows[i];\r\n                    grid.appendChild(row.element);\r\n                    renderedHeight += row.element.offsetHeight;\r\n                }\r\n\r\n                const numberOfRenderedItems = i - startIndex;\r\n                if (numberOfRenderedItems) {\r\n                    rowHeight = renderedHeight / numberOfRenderedItems;\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        const updateFunc = update;\r\n        let animationFrame;\r\n        this.onScroll = (e) => {\r\n            if (animationFrame) {\r\n                cancelAnimationFrame(animationFrame);\r\n            }\r\n            animationFrame = requestAnimationFrame(() => {\r\n                updateFunc(e.target.scrollTop);\r\n            });\r\n        };\r\n\r\n        container.addEventListener('scroll', this.onScroll);\r\n        updateFunc(container.scrollTop);\r\n    }\r\n\r\n    destroy() {\r\n        this.options.container.removeEventListener('scroll', this.onScroll);\r\n        this.options = null;\r\n        this.onScroll = null;\r\n    }\r\n}\r\n","import { EventEmitter, EventHandler, EventHandlerBase } from './events';\r\nimport { parseCSV, writeCSV } from './csv';\r\nimport { query, remove, createElement, queryAll, off, on } from './dom';\r\nimport { GridOptions, RowOptions, ScrollOptions } from './options';\r\nimport { Cell } from './cell';\r\nimport { CSS_CELL, CSS_CONTAINER, CSS_CONTAINER_SCROLL, CSS_GRID, CSS_HEAD, CSS_HEAD_STICKY, CSS_RESIZER, CSS_ROW } from './css';\r\nimport { Row } from './row';\r\nimport { DefaultRenderer, Renderer, VirtualRenderer } from './render';\r\n\r\n\r\nexport interface InputArgs {\r\n    grid: Grid;\r\n    row: number;\r\n    col: number;\r\n    value: string;\r\n}\r\n\r\nexport interface SelectArgs {\r\n    grid: Grid;\r\n    selection: Array<{ row: number, col: number }>;\r\n}\r\n\r\n\r\nexport class Grid {\r\n    private container: HTMLElement;\r\n    private grid: HTMLElement;\r\n    private rows: Row[] = [];\r\n    private cells: Cell[] = [];\r\n    private activeCell: Cell;\r\n    private events: EventEmitter = new EventEmitter();\r\n    private options: GridOptions;\r\n    private cellInput: HTMLInputElement;\r\n    private hiddenInput: HTMLElement;\r\n    private cleanups: Array<() => any> = [];\r\n    private render: Renderer;\r\n\r\n    constructor(container: string | HTMLElement, options?: GridOptions) {\r\n        this.container = typeof container === 'string' ? query<HTMLElement>(container) : container;\r\n        if (options) {\r\n            this.init(options);\r\n        }\r\n    }\r\n\r\n    init(options: GridOptions) {\r\n        options.scroll = getScrollOptions(options);\r\n        this.options = options;\r\n        const container = this.container;\r\n        const rows = this.rows;\r\n        container.innerHTML = '';\r\n        rows.length = 0;\r\n\r\n        if (options.input) {\r\n            this.cellInput = typeof options.input === 'function' ? options.input() : options.input;\r\n            remove(this.cellInput);\r\n        }\r\n        else {\r\n            this.cellInput = createElement<HTMLInputElement>(`<input id=\"celled-cell-input\" type=\"text\" >`);\r\n        }\r\n        this.hiddenInput = createElement(\r\n            '<div id=\"celled-hidden-input\" style=\"position:absolute; z-index:-1; left:2px; top: 2px;\" contenteditable tabindex=\"0\"></div>');\r\n\r\n        if (options.scroll) {\r\n            container.classList.add(CSS_CONTAINER_SCROLL);\r\n        }\r\n        const gridContainer = createElement(`<div class=\"${CSS_CONTAINER}\"></div>`);\r\n\r\n        const stickyHeader = options.scroll.stickyHeader;\r\n        const headCss = `${CSS_ROW} ${CSS_HEAD} ${stickyHeader ? CSS_HEAD_STICKY : ''}`;\r\n        const head = createElement(`<div class=\"${headCss}\"></div>`);\r\n        const grid = this.grid = createElement(`<div class=\"${CSS_GRID}\"></div>`);\r\n\r\n        container.appendChild(gridContainer);\r\n        gridContainer.appendChild(this.hiddenInput);\r\n        gridContainer.appendChild(grid);\r\n        options.cols.forEach((c, index) => head.appendChild(this.createHeadCell(c, index)));\r\n\r\n        const renderOptions = { container, gridContainer, grid, head };\r\n        this.render = options.scroll.virtualScroll ? new VirtualRenderer(renderOptions) : new DefaultRenderer(renderOptions);\r\n\r\n        this.createRows();\r\n        this.initMouse();\r\n        this.initKeys();\r\n        this.initClipboard();\r\n        queryAll(head, css(CSS_CELL)).forEach((c: HTMLElement) => {\r\n            c.style.width = c.offsetWidth + 'px';\r\n        });\r\n    }\r\n\r\n    destroy() {\r\n        this.render.destroy();\r\n        this.cleanups.forEach(c => c());\r\n        this.cleanups.length = 0;\r\n        remove(this.grid);\r\n        this.cells.forEach(c => c.destroy());\r\n        this.grid = null;\r\n        this.hiddenInput = null;\r\n        this.cellInput = null;\r\n        this.rows = null;\r\n        this.cells = null;\r\n    }\r\n\r\n    /**\r\n     * Adds an event listener.\r\n     * Grid fires these events:\r\n     * 'input', 'focus', 'select'\r\n     */\r\n    on(event: 'input' | 'focus', handler: EventHandler<InputArgs>);\r\n    on(event: 'select', handler: EventHandler<SelectArgs>);\r\n    on(event: string, handler: EventHandlerBase) {\r\n        this.events.addHandler(event, handler);\r\n    }\r\n\r\n    update(row: number, col: number, value: string) {\r\n        this.setCell(this.rows[row].cells[col], value);\r\n    }\r\n\r\n    addRows(rows: RowOptions[]) {\r\n        if (this.options.canAddRows) {\r\n            [].push.apply(this.options.rows, rows);\r\n            rows.forEach(r => {\r\n                const newRow = this.createAndAddRow(r);\r\n                newRow.cells.forEach(c => this.emitInput(c));\r\n            });\r\n            this.flattenCells();\r\n            this.renderRows();\r\n        }\r\n    }\r\n\r\n    addRow() {\r\n        this.addRows([this.options.cols.map(c => '')]);\r\n    }\r\n\r\n    private createHeadCell(text: string | number, columnIndex: number) {\r\n        const column = createElement(`<div class=\"${CSS_CELL}\" data-ci=\"${columnIndex}\"><span>${text}</span></div>`);\r\n        const resizer = createElement(`<div class=\"${CSS_RESIZER}\"></div>`);\r\n        column.appendChild(resizer);\r\n\r\n        let downPosition = null;\r\n        let nextColumn = null;\r\n        let currentWidth = null;\r\n        let currentNextWidth = null;\r\n        let selection = null;\r\n\r\n        const mousemove = (e: MouseEvent) => {\r\n            if (selection) {\r\n                let col = e.target as Element;\r\n                while (col) {\r\n                    const ciAttr = col.getAttribute('data-ci');\r\n                    const ci = +ciAttr;\r\n                    if (ciAttr !== null && !isNaN(ci)) {\r\n                        const minCol = Math.min(columnIndex, ci);\r\n                        const maxCol = Math.max(columnIndex, ci);\r\n                        if (selection[0] !== minCol || selection[1] !== maxCol) {\r\n                            selection = [minCol, maxCol];\r\n                            this.cells.forEach(c => c.select(c.col >= minCol && c.col <= maxCol));\r\n                            this.emitSelect();\r\n                        }\r\n                        break;\r\n                    }\r\n                    col = col.parentElement;\r\n                }\r\n            }\r\n            else {\r\n                const diff = e.pageX - downPosition;\r\n                if (nextColumn) {\r\n                    nextColumn.style.width = (currentNextWidth - diff) + 'px';\r\n                }\r\n                column.style.width = (currentWidth + diff) + 'px';\r\n            }\r\n        };\r\n\r\n        const mouseup = () => {\r\n            downPosition = null;\r\n            selection = null;\r\n            off(document, 'mousemove', mousemove);\r\n            off(document, 'mouseup', mouseup);\r\n        };\r\n\r\n        on(column, 'mousedown', (e: MouseEvent) => {\r\n            if (e.target === resizer) {\r\n                // Resize columns\r\n                nextColumn = column.nextElementSibling;\r\n                downPosition = e.pageX;\r\n                currentWidth = column.offsetWidth;\r\n                currentNextWidth = nextColumn ? nextColumn.offsetWidth : null;\r\n            }\r\n            else if (this.rows.length) {\r\n                // Select column\r\n                const i = +column.getAttribute('data-ci');\r\n                selection = true;\r\n                this.cells.forEach(c => c.activate(false).select(c.col === i));\r\n                selection = [i, i];\r\n                this.focusHiddenInput();\r\n                this.activeCell = this.rows[0].cells[i];\r\n                this.emitSelect();\r\n            }\r\n            on(document, 'mouseup', mouseup);\r\n            on(document, 'mousemove', mousemove);\r\n            e.preventDefault();\r\n        });\r\n\r\n        return column;\r\n    }\r\n\r\n    private focusHiddenInput() {\r\n        // Focus the hidden input element to receive paste events.\r\n        // Prevent scrolling up if input was blurred at the end of a long table.\r\n        this.hiddenInput.focus({ preventScroll: true });\r\n    }\r\n\r\n    private createAndAddRow(r: RowOptions): Row {\r\n        const row = new Row(this.rows.length);\r\n        row.addCells(r, cell => this.emitInput(cell));\r\n        this.rows.push(row);\r\n        return row;\r\n    }\r\n\r\n    private createRows() {\r\n        this.rows = [];\r\n        this.options.rows.forEach(r => this.createAndAddRow(r));\r\n        this.flattenCells();\r\n        this.renderRows();\r\n    }\r\n\r\n    private renderRows() {\r\n        this.render.rerender(this.rows);\r\n    }\r\n\r\n    private flattenCells() {\r\n        this.cells = this.rows.reduce((a, b) => a.concat(b.cells), [] as Cell[]);\r\n    }\r\n\r\n    private initMouse() {\r\n        let downCellIndex: number;\r\n        let downRowIndex: number;\r\n\r\n        let selectionIdentifier: string = null;\r\n        const rememberSelection = (r1, c1, r2, c2) => '' + r1 + c1 + r2 + c2;\r\n\r\n        const findTargetCell = (cell: Element, level = 0): Cell => {\r\n            if (!cell || !cell.parentElement) {\r\n                return;\r\n            }\r\n            const cellIndexAttr = cell.getAttribute('data-ci');\r\n            if (cellIndexAttr === null && level < 2) {\r\n                return findTargetCell(cell.parentElement, level + 1);\r\n            }\r\n            const rowIndexAttr = cell.parentElement.getAttribute('data-ri');\r\n            const cellIndex = +cellIndexAttr;\r\n            const rowIndex = +rowIndexAttr;\r\n            if (cellIndexAttr && rowIndexAttr && !isNaN(cellIndex) && !isNaN(rowIndex)) {\r\n                return this.rows[rowIndex].cells[cellIndex];\r\n            }\r\n        };\r\n\r\n        const getTargetCell = (e: MouseEvent) => {\r\n            const cell = e.target as Element;\r\n            return findTargetCell(cell);\r\n        };\r\n\r\n        const mousemove = (moveEvent: MouseEvent) => {\r\n            const targetCell = getTargetCell(moveEvent);\r\n            if (targetCell) {\r\n                const rowIndex = targetCell.row;\r\n                const cellIndex = targetCell.col;\r\n                const firstRow = Math.min(rowIndex, downRowIndex);\r\n                const lastRow = Math.max(rowIndex, downRowIndex);\r\n                const firstCol = Math.min(cellIndex, downCellIndex);\r\n                const lastCol = Math.max(cellIndex, downCellIndex);\r\n                const newSelectionIdentifier = rememberSelection(firstRow, firstCol, lastRow, lastCol);\r\n                if (selectionIdentifier !== newSelectionIdentifier) {\r\n                    selectionIdentifier = newSelectionIdentifier;\r\n                    this.unselect();\r\n                    for (let ri = firstRow; ri <= lastRow; ++ri) {\r\n                        for (let ci = firstCol; ci <= lastCol; ++ci) {\r\n                            this.rows[ri].cells[ci].select();\r\n                        }\r\n                    }\r\n                    this.emitSelect();\r\n                }\r\n            }\r\n        };\r\n\r\n        const mouseup = () => {\r\n            off(document, 'mousemove', mousemove);\r\n            off(document, 'mouseup', mouseup);\r\n        };\r\n\r\n        let lastMouseDown = Date.now();\r\n        const cleanupMousedown = on(this.grid, 'mousedown', (e: MouseEvent) => {\r\n            const cell = getTargetCell(e);\r\n            if (cell) {\r\n                const timeSinceLast = Date.now() - lastMouseDown;\r\n                lastMouseDown = Date.now();\r\n                if (cell.takesMouse()) {\r\n                    // The cell is already in edit mode. Do nothing and continue with default event handling\r\n                    return;\r\n                }\r\n                else if (cell === this.activeCell && !cell.readonly && timeSinceLast < 300) {\r\n                    // Double click on cell to start edit mode\r\n                    // if (Array.isArray(cell.options)) {\r\n                    //     cell.startSelect(this.cellSelect);\r\n                    // }\r\n                    cell.startEdit(this.cellInput);\r\n                    this.emitFocus();\r\n                }\r\n                else {\r\n                    const rowIndex = cell.row;\r\n                    const cellIndex = cell.col;\r\n                    downRowIndex = rowIndex;\r\n                    downCellIndex = cellIndex;\r\n                    selectionIdentifier = rememberSelection(rowIndex, cellIndex, rowIndex, cellIndex);\r\n                    this.activate(cell);\r\n                    on(document, 'mouseup', mouseup);\r\n                    on(document, 'mousemove', mousemove);\r\n                }\r\n                e.preventDefault();\r\n            }\r\n        });\r\n        this.cleanups.push(cleanupMousedown);\r\n\r\n        const cleanupMouseup = on(document, 'mouseup', (e: MouseEvent) => {\r\n            if (this.activeCell) {\r\n                // Unselect all if was click outside of the grid.\r\n                for (let target = e.target as Node; target; target = target.parentNode) {\r\n                    if (target === this.container) {\r\n                        return;\r\n                    }\r\n                }\r\n                this.activeCell.activate(false);\r\n                if (this.unselect()) {\r\n                    this.emitSelect();\r\n                }\r\n            }\r\n        });\r\n        this.cleanups.push(cleanupMouseup);\r\n    }\r\n\r\n    private activate(cell: Cell, doActivate = true) {\r\n        if (this.activeCell) {\r\n            this.activeCell.activate(false);\r\n        }\r\n        let selectionChanged = false;\r\n        this.cells.forEach(c => {\r\n            selectionChanged = c === cell ? (c.selected() !== doActivate) : (selectionChanged || c.selected());\r\n            c.select(false);\r\n        });\r\n        this.activeCell = cell.select(doActivate).activate(doActivate);\r\n        if (selectionChanged) {\r\n            this.emitSelect();\r\n        }\r\n        this.focusHiddenInput();\r\n    }\r\n\r\n    private moveActive(rowDelta: number, colDelta: number, addRows = false) {\r\n        const activeCell = this.activeCell;\r\n        if (activeCell) {\r\n            const rows = this.rows;\r\n            const rowIndex = activeCell.row + rowDelta;\r\n            while (addRows && this.options.canAddRows && rowIndex >= rows.length) {\r\n                this.addRow();\r\n            }\r\n            const nextRow = rows[rowIndex];\r\n            if (nextRow) {\r\n                const cell = nextRow.cells[activeCell.col + colDelta];\r\n                if (cell) {\r\n                    this.activate(cell);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private initKeys() {\r\n        const hiddenInput = this.hiddenInput;\r\n        const cellInput = this.cellInput;\r\n\r\n        this.cleanups.push(on(hiddenInput, 'keydown', (e: KeyboardEvent) => {\r\n            e = e || window.event as KeyboardEvent;\r\n            const keyCode = e.keyCode;\r\n            if (keyCode === 46) {  // del\r\n                this.cells.forEach(cell => {\r\n                    if (cell.selected()) {\r\n                        this.setCell(cell, '');\r\n                    }\r\n                });\r\n                e.preventDefault();\r\n            }\r\n            if (keyCode === 37) {\r\n                this.moveActive(0, -1);\r\n            }\r\n            if (keyCode === 38) {\r\n                this.moveActive(-1, 0);\r\n            }\r\n            if (keyCode === 39) {\r\n                this.moveActive(0, 1);\r\n            }\r\n            if (keyCode === 40) {\r\n                this.moveActive(1, 0);\r\n            }\r\n        }));\r\n\r\n        const onInput = (e: KeyboardEvent) => {\r\n            const activeCell = this.activeCell;\r\n            if (activeCell && !activeCell.readonly && activeCell.takesKey()) {\r\n                this.updatValue(activeCell);\r\n                this.cells.forEach(cell => {\r\n                    if (cell.selected() && cell !== activeCell) {\r\n                        this.setCell(cell, activeCell.value());\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        this.cleanups.push(on(cellInput, 'input', onInput));\r\n        this.cleanups.push(on(cellInput, 'keydown', (e: KeyboardEvent) => {\r\n            if (e.keyCode === 13) {\r\n                // ENTER, stop edit and move to next row\r\n                this.moveActive(0, 0);\r\n                this.moveActive(1, 0, true);\r\n                e.preventDefault();\r\n            }\r\n            if (e.keyCode === 27) {\r\n                // ESCAPE, stop edit but stay at same cell\r\n                this.moveActive(0, 0);\r\n                e.preventDefault();\r\n            }\r\n        }));\r\n\r\n        this.cleanups.push(on(hiddenInput, 'keypress', (e: KeyboardEvent) => {\r\n            const activeCell = this.activeCell;\r\n            if (activeCell && !activeCell.readonly && !activeCell.takesKey()) {\r\n                activeCell.startEdit(cellInput, true);\r\n                this.emitFocus();\r\n            }\r\n            else {\r\n                e.preventDefault();\r\n            }\r\n        }));\r\n    }\r\n\r\n    pasteCSV(csvText: string, separator: string, startRow?: number, startCol?: number) {\r\n        const csv = parseCSV(csvText, separator);\r\n        const activeCell = this.activeCell;\r\n        if (isNaN(startRow) && !activeCell) {\r\n            return;\r\n        }\r\n        startRow = isNaN(startRow) ? activeCell.row : startRow;\r\n        startCol = isNaN(startCol) ? activeCell.col : startCol;\r\n\r\n        csv.forEach((csvRow, csvRowIndex) => {\r\n            let tableRow = this.rows[startRow + csvRowIndex];\r\n            if (!tableRow && this.options.canAddRows) {\r\n                const prevRow = this.rows[startRow];\r\n                this.addRows([prevRow.cells.map(c => '')]);\r\n                tableRow = this.rows[startRow + csvRowIndex];\r\n            }\r\n            const tableCol = startCol;\r\n            const isLastEmptyRow = csvRow.length === 1 && csvRow[0] === '';\r\n            if (tableRow && !isLastEmptyRow) {\r\n                csvRow.forEach((csvCell, csvColIndex) => {\r\n                    const cell = tableRow.cells[tableCol + csvColIndex];\r\n                    if (cell && !cell.readonly) {\r\n                        this.setCell(cell, csvCell);\r\n                        cell.select();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private initClipboard() {\r\n        on(this.hiddenInput, 'paste', (e: ClipboardEvent) => {\r\n            // Don't actually paste to hidden input\r\n            e.preventDefault();\r\n            const text = (e.clipboardData || (window as any).clipboardData).getData('text');\r\n            this.pasteCSV(text, '\\t');\r\n        });\r\n\r\n        on(this.hiddenInput, 'copy', (e: ClipboardEvent) => {\r\n            e.preventDefault();\r\n            const activeCell = this.activeCell;\r\n            if (!activeCell) {\r\n                return;\r\n            }\r\n\r\n            const csv = [];\r\n            for (let ri = activeCell.row; ; ri++) {\r\n                const row = this.rows[ri];\r\n                const csvRow = [];\r\n                if (!row || !row.cells[activeCell.col] || !row.cells[activeCell.col].selected()) {\r\n                    break;\r\n                }\r\n                for (let ci = activeCell.col; ; ++ci) {\r\n                    const cell = row.cells[ci];\r\n                    if (!cell || !cell.selected()) {\r\n                        break;\r\n                    }\r\n                    csvRow.push(cell.value());\r\n                }\r\n                csv.push(csvRow);\r\n            }\r\n            const clipboard = (e.clipboardData || (window as any).clipboardData);\r\n            clipboard.setData('text/plain', writeCSV(csv, '\\t'));\r\n        });\r\n    }\r\n\r\n    private setCell(cell: Cell, value: string) {\r\n        if (!cell.readonly) {\r\n            cell.set(value);\r\n            this.updatValue(cell);\r\n        }\r\n    }\r\n\r\n    private unselect(): boolean {\r\n        let selectionChanged = false;\r\n        this.cells.forEach(c => {\r\n            selectionChanged = selectionChanged || c.selected();\r\n            c.select(false);\r\n        });\r\n        return selectionChanged;\r\n    }\r\n\r\n    private updatValue(cell: Cell) {\r\n        const colIndex = cell.col;\r\n        const rowOption = this.options.rows[cell.row];\r\n        const cellValue = rowOption[colIndex];\r\n        if (typeof cellValue === 'string' || typeof cellValue === 'number') {\r\n            rowOption[colIndex] = cell.value();\r\n        }\r\n        else {\r\n            cellValue.value = cell.value();\r\n        }\r\n        this.emitInput(cell);\r\n    }\r\n\r\n    private emitInput(cell: Cell) {\r\n        this.events.emit<InputArgs>('input', {\r\n            grid: this,\r\n            col: cell.col,\r\n            row: cell.row,\r\n            value: cell.value(),\r\n        });\r\n    }\r\n\r\n    private emitFocus() {\r\n        const cell = this.activeCell;\r\n        this.events.emit<InputArgs>('focus', {\r\n            grid: this,\r\n            col: cell.col,\r\n            row: cell.row,\r\n            value: cell.value(),\r\n        });\r\n    }\r\n\r\n    private emitSelect() {\r\n        this.events.emit<SelectArgs>('select', {\r\n            grid: this,\r\n            selection: this.cells.filter(c => c.selected()).map(c => ({\r\n                row: c.row,\r\n                col: c.col,\r\n            })),\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction css(className) {\r\n    return '.' + className;\r\n}\r\n\r\nfunction trueOr(value: boolean): boolean {\r\n    return value === false ? false : true;\r\n}\r\n\r\nfunction getScrollOptions(options: GridOptions): ScrollOptions {\r\n    const scroll = options.scroll;\r\n    if (!scroll) {\r\n        return {};\r\n    }\r\n    return {\r\n        enabled: trueOr(scroll.enabled),\r\n        virtualScroll: trueOr(scroll.virtualScroll),\r\n        stickyHeader: trueOr(scroll.stickyHeader),\r\n    };\r\n}\r\n\r\n// ----\r\n","// ref: https://stackoverflow.com/a/14991797/498298\r\n// This will parse a delimited string into an array of\r\n// arrays. The default delimiter is the comma, but this\r\n// can be overriden in the second argument.\r\nexport function parseCSV(str: string, delimiter: string) {\r\n    const arr: string[][] = [];\r\n    let quote = false;  // 'true' means we're inside a quoted field\r\n\r\n    // Iterate over each character, keep track of current row and column (of the returned array)\r\n    for (let row = 0, col = 0, i = 0; i < str.length; i++) {\r\n        const currentChar = str[i];\r\n        const nextChar = str[i + 1];\r\n        arr[row] = arr[row] || [];             // Create a new row if necessary\r\n        arr[row][col] = arr[row][col] || '';   // Create a new column (start with empty string) if necessary\r\n\r\n        // If the current character is a quotation mark, and we're inside a\r\n        // quoted field, and the next character is also a quotation mark,\r\n        // add a quotation mark to the current column and skip the next character\r\n        if (currentChar === '\"' && quote && nextChar === '\"') {\r\n            arr[row][col] += currentChar;\r\n            ++i;\r\n            continue;\r\n        }\r\n\r\n        // If it's just one quotation mark, begin/end quoted field\r\n        if (currentChar === '\"') {\r\n            quote = !quote;\r\n            continue;\r\n        }\r\n\r\n        // If it's a delimiter and we're not in a quoted field, move on to the next column\r\n        if (currentChar === delimiter && !quote) {\r\n            ++col;\r\n            continue;\r\n        }\r\n\r\n        // If it's a newline (CRLF) and we're not in a quoted field, skip the next character\r\n        // and move on to the next row and move to column 0 of that new row\r\n        if (currentChar === '\\r' && nextChar === '\\n' && !quote) {\r\n            ++row;\r\n            col = 0;\r\n            ++i;\r\n            continue;\r\n        }\r\n\r\n        // If it's a newline (LF or CR) and we're not in a quoted field,\r\n        // move on to the next row and move to column 0 of that new row\r\n        if ((currentChar === '\\n' || currentChar === '\\r') && !quote) {\r\n            ++row;\r\n            col = 0;\r\n            continue;\r\n        }\r\n\r\n        // Otherwise, append the current character to the current column\r\n        arr[row][col] += currentChar;\r\n    }\r\n    return arr;\r\n}\r\n\r\n\r\nexport function writeCSV(values: Array<string[]>, separator: string, linebreak = '\\n') {\r\n\r\n    let content = '';\r\n    values.forEach((row, ri) => {\r\n        if (ri > 0) {\r\n            content += linebreak;\r\n        }\r\n        row.forEach((cell, ci) => {\r\n            cell = cell.replace(/\"/g, '\"\"');\r\n            if (cell.search(/(\"|,|\\n)/g) >= 0) {\r\n                cell = '\"' + cell + '\"';\r\n            }\r\n            if (ci > 0) {\r\n                content += separator;\r\n            }\r\n            content += cell;\r\n        });\r\n    });\r\n    return content;\r\n\r\n}\r\n"],"names":["this","EventEmitter","event","handler","handlers","push","splice","indexOf","args","forEach","createElement","html","div","document","innerHTML","trim","firstChild","on","element","listener","addEventListener","removeEventListener","offFunc","off","remove","node","parentNode","parentElement","removeChild","CSS_ROW","CSS_PREFIX","CSS_CELL","CSS_SELECT_CELL","CSS_SELECTED","CSS_READONLY","row","col","value","text","toString","readonly","className","valueHTML","InputCell","isSelectCss","doSelect","setSelectCSS","doActivate","classList","add","input","blur","textContent","select","style","width","offsetWidth","appendChild","focus","takesKey","callback","options","selectElement","i","length","options_1","_i","option","optionElement","setOptions","set","_this","SelectCell","selectContent","index","Row","cells","updateValueCallback","c","columnIndex","cell","Array","isArray","DefaultRenderer","rows","_a","grid","head","r","VirtualRenderer","container","gridContainer","onScroll","currentRange","start","undefined","end","rowHeight","position","animationFrame","updateFunc","scrollTop","itemCount","viewportHeight","offsetHeight","totalContentHeight","startIndex","Math","floor","max","visibleNodesCount","ceil","endIndex","min","offsetY","height","desiredRenderHeight","headerHeight","renderedHeight","fragment","createDocumentFragment","numberOfRenderedItems","e","cancelAnimationFrame","requestAnimationFrame","target","elOrCss","cssSelector","querySelector","init","Grid","scroll","enabled","trueOr","virtualScroll","stickyHeader","getScrollOptions","cellInput","hiddenInput","cols","createHeadCell","renderOptions","render","createRows","initMouse","initKeys","initClipboard","slice","call","querySelectorAll","destroy","cleanups","events","addHandler","setCell","canAddRows","apply","createAndAddRow","emitInput","flattenCells","renderRows","addRows","map","column","resizer","downPosition","nextColumn","currentWidth","currentNextWidth","selection","mousemove","ciAttr","getAttribute","ci","isNaN","minCol_1","maxCol_1","emitSelect","diff","pageX","mouseup","nextElementSibling","i_1","activate","focusHiddenInput","activeCell","preventDefault","preventScroll","addCells","rerender","reduce","a","b","concat","downCellIndex","downRowIndex","selectionIdentifier","rememberSelection","r1","c1","r2","c2","findTargetCell","level","cellIndexAttr","rowIndexAttr","cellIndex","rowIndex","getTargetCell","moveEvent","targetCell","firstRow","lastRow","firstCol","lastCol","newSelectionIdentifier","unselect","ri","lastMouseDown","Date","now","cleanupMousedown","timeSinceLast","takesMouse","startEdit","emitFocus","cleanupMouseup","selectionChanged","selected","rowDelta","colDelta","addRow","nextRow","keyCode","window","moveActive","updatValue","csvText","separator","startRow","startCol","csv","str","delimiter","arr","quote","currentChar","nextChar","parseCSV","csvRow","csvRowIndex","tableRow","prevRow","tableCol","isLastEmptyRow","csvCell","csvColIndex","clipboardData","getData","pasteCSV","setData","values","linebreak","content","replace","search","writeCSV","colIndex","rowOption","cellValue","emit","filter"],"mappings":"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"}