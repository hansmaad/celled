{"version":3,"file":"celled.min.js","sources":["../src/lib/events.ts","../src/lib/dom.ts","../src/lib/css.ts","../src/lib/cell.ts","../src/lib/row.ts","../src/lib/render.ts","../src/lib/grid.ts","../src/lib/csv.ts"],"sourcesContent":["\r\nexport interface EventArgs { }\r\n\r\nexport type EventHandlerBase = (arg: EventArgs) => any;\r\n\r\nexport interface EventHandler<T> extends EventHandlerBase {\r\n    (arg: T): any;\r\n}\r\n\r\nexport class EventEmitter {\r\n    handlers: { [event: string]: EventHandlerBase[] } = {};\r\n\r\n    addHandler(event: string, handler: EventHandlerBase) {\r\n        const handlers = this.handlers;\r\n        handlers[event] = handlers[event] || [];\r\n        handlers[event].push(handler);\r\n    }\r\n\r\n    removeHandler(event: string, handler: EventHandlerBase) {\r\n        const allHandlers = this.handlers;\r\n        const handlers = allHandlers[event];\r\n        if (handlers && handler) {\r\n            handlers.splice(handlers.indexOf(handler), 1);\r\n        }\r\n    }\r\n\r\n    emit<TArgs extends EventArgs>(event: string, args: TArgs) {\r\n        const handlers = this.handlers[event];\r\n        if (handlers) {\r\n           handlers.forEach(handler => {\r\n                try {\r\n                    handler(args);\r\n                }\r\n                catch {}\r\n            });\r\n        }\r\n    }\r\n}\r\n","export function query<T = Element>(elOrCss, cssSelector?): T {\r\n    if (!cssSelector) {\r\n        cssSelector = elOrCss;\r\n        elOrCss = document;\r\n    }\r\n    return elOrCss.querySelector(cssSelector);\r\n}\r\n\r\nexport function queryAll<T = Element>(elOrCss, cssSelector?): T[] {\r\n    if (!cssSelector) {\r\n        cssSelector = elOrCss;\r\n        elOrCss = document;\r\n    }\r\n    return [].slice.call(elOrCss.querySelectorAll(cssSelector));\r\n}\r\n\r\nexport function createElement<T extends HTMLElement>(html: string): T {\r\n    const div = document.createElement('div');\r\n    div.innerHTML = html.trim();\r\n    return div.firstChild as T;\r\n}\r\n\r\nexport function on(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    element.addEventListener(event, listener);\r\n    return offFunc(element, event, listener);\r\n}\r\n\r\nexport function off(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    element.removeEventListener(event, listener);\r\n}\r\n\r\nexport function offFunc(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    return () => element.removeEventListener(event, listener);\r\n}\r\n\r\nexport function getKey(e: KeyboardEvent) {\r\n    e = e || window.event as KeyboardEvent;\r\n    return String.fromCharCode(e.keyCode || e.which);\r\n}\r\n\r\nexport function remove(node: Node) {\r\n    if (node.parentNode) {\r\n        node.parentElement.removeChild(node);\r\n    }\r\n}\r\n\r\nexport function setOptions(selectElement: HTMLSelectElement, options: ReadonlyArray<any>) {\r\n    for (let i = selectElement.options.length; i > 0; i--) {\r\n        selectElement.remove(i);\r\n    }\r\n    for (const option of options) {\r\n        const optionElement = document.createElement('option');\r\n        optionElement.value = '' + option;\r\n        optionElement.innerHTML = '' + option;\r\n        selectElement.appendChild(optionElement);\r\n    }\r\n}\r\n","export const CSS_PREFIX = 'ced';\r\nexport const CSS_CONTAINER = `${CSS_PREFIX}-grid-container`;\r\nexport const CSS_CONTAINER_SCROLL = `${CSS_PREFIX}-grid-container-scroll`;\r\nexport const CSS_GRID = `${CSS_PREFIX}-grid`;\r\nexport const CSS_ROW = `${CSS_PREFIX}-row`;\r\nexport const CSS_CELL = `${CSS_PREFIX}-cell`;\r\nexport const CSS_SELECT_CELL = `${CSS_PREFIX}-select-cell`;\r\nexport const CSS_HEAD = `${CSS_PREFIX}-head`;\r\nexport const CSS_HEAD_STICKY = `${CSS_PREFIX}-head-sticky`;\r\nexport const CSS_RESIZER = `${CSS_PREFIX}-resizer`;\r\nexport const CSS_EDITING = `${CSS_PREFIX}-editing`;\r\nexport const CSS_ACTIVE = `${CSS_PREFIX}-active`;\r\nexport const CSS_SELECTED = `${CSS_PREFIX}-selected`;\r\nexport const CSS_READONLY = `${CSS_PREFIX}-readonly`;\r\n","import { CSS_CELL, CSS_READONLY, CSS_SELECTED, CSS_ACTIVE, CSS_EDITING, CSS_SELECT_CELL } from './css';\r\nimport { createElement, remove, setOptions } from './dom';\r\nimport { CellUpdateOptions, CellValue, CellValueOptions } from './options';\r\n\r\nexport type UpdateCallback = (cell: Cell) => unknown;\r\n\r\nexport interface Cell {\r\n    readonly element: HTMLElement;\r\n    readonly readonly: boolean;\r\n    row: number;\r\n    col: number;\r\n\r\n    /**\r\n     * Cleanup any resources, listeners...\r\n     */\r\n    destroy(): void;\r\n\r\n    /**\r\n     * The currently displayed value.\r\n     */\r\n    value(): string;\r\n\r\n    /**\r\n     * Show a new value.\r\n     */\r\n    set(value: CellValue | CellUpdateOptions): void;\r\n\r\n    /**\r\n     * Mark the cell as selected. This will apply css classes\r\n     * to visualize the cell as a selected cell.\r\n     */\r\n    select(doSelect?: boolean): this;\r\n\r\n    /**\r\n     * Cell was selected with select(true).\r\n     */\r\n    selected(): boolean;\r\n\r\n    /**\r\n     * This will apply css classes to visualize the cell as a selected and active cell.\r\n     * The active cell is the leading cell in a multi edit situation. It will contain\r\n     * the editing control.\r\n     * If doActivate is false, the editing control will be removed.\r\n     */\r\n    activate(doActivate?: boolean): this;\r\n\r\n    /**\r\n     * Start the editing process. The cell can use the passed input element to let\r\n     * the user enter free text.\r\n     */\r\n    startEdit(input: HTMLInputElement, selectContent?: boolean);\r\n\r\n    /**\r\n     * This cell is ready to consume key events\r\n     */\r\n    takesKey(): boolean;\r\n\r\n    /**\r\n     * This cell is ready to consume mouse click events\r\n     */\r\n    takesMouse(): boolean;\r\n}\r\n\r\n/**\r\n * Create a new Cell instance matching the definitions in the value parameter.\r\n * @param callback  Can be used by the cell to notify value changes that are not\r\n *                  triggered from outside.\r\n */\r\nexport function createCell(row: number, col: number, value: CellValue | CellValueOptions, callback: UpdateCallback) {\r\n    if (typeof value !== 'string' && typeof value !== 'number' && Array.isArray(value.options)) {\r\n        return new SelectCell(row, col, value, callback);\r\n    }\r\n    return new InputCell(row, col, value);\r\n}\r\n\r\n\r\nclass InputCell implements Cell {\r\n    element: HTMLElement;\r\n    input: HTMLInputElement;  // If the cell is active, this is the assigned input element\r\n    readonly = false;\r\n\r\n    private isActive = false;\r\n    private isSelected = false;\r\n    private extraCss = '';\r\n\r\n    constructor(public row: number, public col: number, value: CellValue | CellValueOptions) {\r\n        let text: string;\r\n        if (isPlainValue(value)) {\r\n            text = value.toString();\r\n        }\r\n        else {\r\n            this.readonly = value.readonly;\r\n            text = value.value.toString();\r\n            this.extraCss = value.css;\r\n        }\r\n        this.element = createElement(`<div data-ci=\"${col}\">${valueHTML(text)}</div>`);\r\n        this.setCss();\r\n    }\r\n\r\n    destroy() {\r\n    }\r\n\r\n    selected() {\r\n        return this.isSelected;\r\n    }\r\n\r\n    select(doSelect = true) {\r\n        this.isSelected = doSelect;\r\n        this.setCss();\r\n        return this;\r\n    }\r\n\r\n    activate(doActivate = true) {\r\n        if (doActivate) {\r\n            this.isActive = this.isSelected = true;\r\n        }\r\n        else {\r\n            this.isActive = false;\r\n            if (this.input) {\r\n                this.input.blur();\r\n                remove(this.input);\r\n                this.element.innerHTML = valueHTML(this.input.value);\r\n                this.input = null;\r\n            }\r\n        }\r\n        this.setCss();\r\n        return this;\r\n    }\r\n\r\n    value() {\r\n        return this.input ? this.input.value : this.element.textContent;\r\n    }\r\n\r\n    set(value: CellValue | CellUpdateOptions) {\r\n        if (isPlainValue(value)) {\r\n            this.setValue(value);\r\n        }\r\n        else {\r\n            // Update properties only if it's set in value\r\n            if (isDefined(value.value)) {\r\n                this.setValue(value.value);\r\n            }\r\n            this.readonly = isDefined(value.readonly) ? value.readonly : this.readonly;\r\n            this.extraCss = value.css;\r\n            this.setCss();\r\n        }\r\n    }\r\n\r\n    private setValue(value: CellValue) {\r\n        if (this.input) {\r\n            this.input.value = value.toString();\r\n        }\r\n        else {\r\n            this.element.innerHTML = valueHTML(value);\r\n        }\r\n    }\r\n\r\n    private setCss() {\r\n        const className = CSS_CELL +\r\n            cssIf(this.readonly, CSS_READONLY) +\r\n            cssIf(this.isActive, CSS_ACTIVE) +\r\n            cssIf(this.isSelected, CSS_SELECTED) +\r\n            cssIf(!!this.input, CSS_EDITING) +\r\n            cssIf(!!this.extraCss, this.extraCss);\r\n        this.element.className = className;\r\n    }\r\n\r\n    startEdit(input: HTMLInputElement, select = false) {\r\n        if (this.readonly) {\r\n            return;\r\n        }\r\n        const element = this.element;\r\n        this.input = input;\r\n        input.value = element.textContent;\r\n        if (select) {\r\n            input.select();\r\n        }\r\n        input.style.width = element.offsetWidth - 2 + 'px';\r\n        element.innerHTML = '';\r\n        element.appendChild(input);\r\n        input.focus();\r\n        this.setCss();\r\n    }\r\n\r\n    takesKey(): boolean {\r\n        return !!this.input;\r\n    }\r\n\r\n    takesMouse(): boolean {\r\n        return this.takesKey();\r\n    }\r\n}\r\n\r\nfunction valueHTML(value) {\r\n    return `<span>${value}</span>`;\r\n}\r\n\r\nclass SelectCell implements Cell {\r\n    element: HTMLElement;\r\n    selectElement: HTMLSelectElement;\r\n    readonly = false;\r\n    options: ReadonlyArray<CellValue> = null;\r\n    listener;\r\n\r\n    private isSelected = false;\r\n    private extraCss = '';\r\n\r\n    constructor(public row: number, public col: number, value: CellValueOptions, callback: UpdateCallback) {\r\n\r\n        this.readonly = value.readonly;\r\n        this.options = value.options;\r\n        this.element = createElement(`<div data-ci=\"${col}\"></div>`);\r\n        this.selectElement = createElement<HTMLSelectElement>(`<select><select>`);\r\n        setOptions(this.selectElement, this.options);\r\n        this.set('' + value.value);\r\n        this.element.appendChild(this.selectElement);\r\n        this.listener = () => callback(this);\r\n        this.selectElement.addEventListener('change', this.listener);\r\n        this.extraCss = value.css;\r\n        this.setCss();\r\n    }\r\n\r\n    destroy() {\r\n        this.selectElement.removeEventListener('change', this.listener);\r\n    }\r\n\r\n    value(): string {\r\n        return this.selectElement.value;\r\n    }\r\n\r\n    set(value: CellValue | CellUpdateOptions) {\r\n        if (isPlainValue(value)) {\r\n            this.setValue(value);\r\n        }\r\n        else {\r\n            // Update properties only if it's set in value\r\n            if (isDefined(value.value)) {\r\n                this.setValue(value.value);\r\n            }\r\n            this.extraCss = value.css;\r\n            this.setCss();\r\n        }\r\n    }\r\n\r\n    private setValue(value: CellValue) {\r\n        this.selectElement.value = value ? value.toString() : null;\r\n    }\r\n\r\n    private setCss() {\r\n        const className = CSS_CELL + ' ' + CSS_SELECT_CELL +\r\n            cssIf(this.readonly, CSS_READONLY) +\r\n            cssIf(this.isSelected, CSS_SELECTED) +\r\n            cssIf(!!this.extraCss, this.extraCss);\r\n        this.element.className = className;\r\n    }\r\n\r\n    select(doSelect = true) {\r\n        this.isSelected = doSelect;\r\n        this.setCss();\r\n        return this;\r\n    }\r\n\r\n    selected(): boolean {\r\n        return this.isSelected;\r\n    }\r\n\r\n    activate(doActivate?: boolean) {\r\n        return this;\r\n    }\r\n\r\n    startEdit(input: HTMLInputElement, selectContent?: boolean) {\r\n    }\r\n\r\n    takesKey(): boolean {\r\n        return false;\r\n    }\r\n\r\n    takesMouse(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\n// function setSelectCSS(element: HTMLElement, doSelect: boolean) {\r\n//     const classList = element.classList;\r\n//     if (doSelect) {\r\n//         classList.add(CSS_SELECTED);\r\n//     }\r\n//     else {\r\n//         classList.remove(CSS_SELECTED);\r\n//     }\r\n// }\r\n\r\nfunction isSelectCss(element: HTMLElement) {\r\n    return element.className.indexOf(CSS_SELECTED) >= 0;\r\n}\r\n\r\nfunction isPlainValue(value: CellValue | CellUpdateOptions): value is CellValue {\r\n    return typeof value === 'string' || typeof value === 'number';\r\n}\r\n\r\nfunction isDefined(value: any) {\r\n    return typeof value !== 'undefined';\r\n}\r\n\r\n\r\nfunction cssIf(useValue: boolean, css: string) {\r\n    return useValue ? ' ' + css : '';\r\n}\r\n","import { Cell, createCell } from './cell';\r\nimport { CSS_ROW } from './css';\r\nimport { createElement } from './dom';\r\nimport { CellValue, CellValueOptions } from './options';\r\n\r\nexport class Row {\r\n    element: HTMLElement;\r\n    cells: Cell[] = [];\r\n\r\n    constructor(public index: number) {\r\n        this.element = createElement(`<div data-ri=\"${index}\" class=\"${CSS_ROW}\"></div>`);\r\n    }\r\n\r\n    addCells(cells: Array<CellValue | CellValueOptions>, updateValueCallback: (cell: Cell) => unknown) {\r\n        cells.forEach((c, columnIndex) => {\r\n            const cell = createCell(this.index, columnIndex, c, updateValueCallback);\r\n            this.cells.push(cell);\r\n            this.element.appendChild(cell.element);\r\n        });\r\n    }\r\n}\r\n","import { Row } from './row';\r\n\r\nexport interface RenderOptions {\r\n    container: HTMLElement;\r\n    gridContainer: HTMLElement;  // child of container\r\n    grid: HTMLElement;           // child of gridContainer\r\n    head: HTMLElement;\r\n}\r\n\r\nexport interface Renderer {\r\n    rerender(rows: Row[]);\r\n    destroy();\r\n}\r\n\r\nexport class DefaultRenderer implements Renderer {\r\n\r\n    constructor(private options: RenderOptions) {\r\n    }\r\n\r\n    rerender(rows: Row[]) {\r\n        const { grid, head } = this.options;\r\n        grid.innerHTML = '';\r\n        grid.appendChild(head);\r\n        rows.forEach(r => {\r\n            grid.appendChild(r.element);\r\n        });\r\n    }\r\n\r\n    destroy() {\r\n        this.options = null;\r\n    }\r\n}\r\n\r\n\r\nexport class VirtualRenderer implements Renderer {\r\n\r\n    private onScroll;\r\n\r\n    constructor(private options: RenderOptions) {\r\n    }\r\n\r\n    rerender(rows: Row[]) {\r\n        const { grid, head, container, gridContainer } = this.options;\r\n\r\n        if (this.onScroll) {\r\n            container.removeEventListener('scroll', this.onScroll);\r\n        }\r\n        const itemPadding = 4;\r\n\r\n        const current = {\r\n            viewportHeight: undefined,\r\n            itemCount: undefined,\r\n            start: undefined,\r\n            end: undefined,  // last rendered item (including)\r\n        };\r\n\r\n        let rowHeight = 34;  // just a guess\r\n        grid.style.position = 'absolute';\r\n\r\n        const update = (scrollTop: number) => {\r\n            const itemCount = rows.length;\r\n            const viewportHeight = container.offsetHeight;\r\n            const totalContentHeight = itemCount * rowHeight;\r\n\r\n            let startIndex = Math.floor(scrollTop / rowHeight) - itemPadding;\r\n            if (startIndex % 2 > 0) {\r\n                // always start with an odd index to keep alternating styles consistent\r\n                startIndex -= 1;\r\n            }\r\n            startIndex = Math.max(0, startIndex);\r\n\r\n            let visibleNodesCount = Math.ceil(viewportHeight / rowHeight) + 2 * itemPadding;\r\n            visibleNodesCount = Math.min(itemCount - startIndex, visibleNodesCount);\r\n            const endIndex = startIndex + visibleNodesCount - 1;  // last rendered item (including)\r\n            const maxOffsetY = totalContentHeight - viewportHeight - itemPadding * rowHeight;  // do not go beyond this\r\n            const offsetY = Math.min(maxOffsetY, startIndex * rowHeight);\r\n\r\n            // At the end of the list we will not rerender in order to avoid jumping scrollbar.\r\n            const lastItemIndex = itemCount - 1;\r\n            const lastWasAdded = current.end === lastItemIndex;\r\n            const lastWillBeAdded = endIndex === lastItemIndex;\r\n            const noMoreItemsAvailable = lastWasAdded && lastWillBeAdded;\r\n            const newRangeDiffers = current.start !== startIndex || current.end !== endIndex;\r\n            const heightChanged = viewportHeight !== current.viewportHeight;\r\n            const itemCountChanged = itemCount !== current.itemCount;\r\n            const shouldRerender = itemCountChanged || heightChanged || (newRangeDiffers && !noMoreItemsAvailable);\r\n\r\n            // Render\r\n            if (shouldRerender) {\r\n                const desiredRenderHeight = visibleNodesCount * rowHeight; // viewport + padding\r\n                current.start = startIndex;\r\n                current.end = endIndex;\r\n                current.viewportHeight = viewportHeight;\r\n                current.itemCount = itemCount;\r\n                grid.innerHTML = '';\r\n                grid.appendChild(head);\r\n                const headerHeight = grid.offsetHeight;\r\n                let renderedHeight = 0;\r\n\r\n                // First add items from start to end index at once\r\n                const fragment = document.createDocumentFragment();\r\n                let i = startIndex;\r\n                for (; i <= endIndex && i < rows.length; ++i) {\r\n                    const row = rows[i];\r\n                    fragment.appendChild(row.element);\r\n                }\r\n                grid.appendChild(fragment);\r\n                renderedHeight = grid.offsetHeight - headerHeight;\r\n\r\n                // Add items until we reached the desired height\r\n                for (; renderedHeight < desiredRenderHeight && i < rows.length; ++i) {\r\n                    const row = rows[i];\r\n                    grid.appendChild(row.element);\r\n                    renderedHeight += row.element.offsetHeight;\r\n                }\r\n\r\n                const numberOfRenderedItems = i - startIndex;\r\n                if (numberOfRenderedItems) {\r\n                    rowHeight = renderedHeight / numberOfRenderedItems;\r\n                }\r\n\r\n                gridContainer.style.height = `${totalContentHeight}px`;\r\n                grid.style['top'] = `${offsetY}px`;\r\n            }\r\n        };\r\n\r\n\r\n        const updateFunc = update;\r\n        let animationFrame;\r\n        this.onScroll = (e) => {\r\n            if (animationFrame) {\r\n                cancelAnimationFrame(animationFrame);\r\n            }\r\n            animationFrame = requestAnimationFrame(() => {\r\n                updateFunc(e.target.scrollTop);\r\n            });\r\n        };\r\n\r\n        container.addEventListener('scroll', this.onScroll);\r\n        updateFunc(container.scrollTop);\r\n    }\r\n\r\n    destroy() {\r\n        this.options.container.removeEventListener('scroll', this.onScroll);\r\n        this.options = null;\r\n        this.onScroll = null;\r\n    }\r\n}\r\n","import { EventEmitter, EventHandler, EventHandlerBase } from './events';\r\nimport { parseCSV, writeCSV } from './csv';\r\nimport { query, remove, createElement, queryAll, off, on } from './dom';\r\nimport { CellUpdateOptions, CellValue, CellValueOptions, GridOptions, RowOptions, ScrollOptions } from './options';\r\nimport { Cell } from './cell';\r\nimport { CSS_CELL, CSS_CONTAINER, CSS_CONTAINER_SCROLL, CSS_GRID, CSS_HEAD, CSS_HEAD_STICKY, CSS_RESIZER, CSS_ROW } from './css';\r\nimport { Row } from './row';\r\nimport { DefaultRenderer, Renderer, VirtualRenderer } from './render';\r\n\r\n\r\nexport interface InputArgs {\r\n    grid: Grid;\r\n    row: number;\r\n    col: number;\r\n    value: string;\r\n}\r\n\r\nexport interface SelectArgs {\r\n    grid: Grid;\r\n    selection: Array<{ row: number, col: number }>;\r\n}\r\n\r\n\r\nexport class Grid {\r\n    private container: HTMLElement;\r\n    private grid: HTMLElement;\r\n    private rows: Row[] = [];\r\n    private cells: Cell[] = [];\r\n    private activeCell: Cell;\r\n    private events: EventEmitter = new EventEmitter();\r\n    private options: GridOptions;\r\n    private cellInput: HTMLInputElement;\r\n    private hiddenInput: HTMLElement;\r\n    private cleanups: Array<() => any> = [];\r\n    private render: Renderer;\r\n\r\n    constructor(container: string | HTMLElement, options?: GridOptions) {\r\n        this.container = typeof container === 'string' ? query<HTMLElement>(container) : container;\r\n        if (options) {\r\n            this.init(options);\r\n        }\r\n    }\r\n\r\n    init(options: GridOptions) {\r\n        options.scroll = getScrollOptions(options);\r\n        this.options = options;\r\n        const container = this.container;\r\n        const rows = this.rows;\r\n        container.innerHTML = '';\r\n        rows.length = 0;\r\n\r\n        if (options.input) {\r\n            this.cellInput = typeof options.input === 'function' ? options.input() : options.input;\r\n            remove(this.cellInput);\r\n        }\r\n        else {\r\n            this.cellInput = createElement<HTMLInputElement>(`<input id=\"celled-cell-input\" type=\"text\" >`);\r\n        }\r\n        this.hiddenInput = createElement(\r\n            '<div id=\"celled-hidden-input\" style=\"position:absolute; z-index:-1; left:2px; top: 2px;\" contenteditable tabindex=\"0\"></div>');\r\n\r\n        if (options.scroll) {\r\n            container.classList.add(CSS_CONTAINER_SCROLL);\r\n        }\r\n        const gridContainer = createElement(`<div class=\"${CSS_CONTAINER}\"></div>`);\r\n\r\n        const stickyHeader = options.scroll.stickyHeader;\r\n        const headCss = `${CSS_ROW} ${CSS_HEAD} ${stickyHeader ? CSS_HEAD_STICKY : ''}`;\r\n        const head = createElement(`<div class=\"${headCss}\"></div>`);\r\n        const grid = this.grid = createElement(`<div class=\"${CSS_GRID}\"></div>`);\r\n\r\n        container.appendChild(gridContainer);\r\n        gridContainer.appendChild(this.hiddenInput);\r\n        gridContainer.appendChild(grid);\r\n        options.cols.forEach((c, index) => head.appendChild(this.createHeadCell(c, index)));\r\n\r\n        const renderOptions = { container, gridContainer, grid, head };\r\n        this.render = options.scroll.virtualScroll ? new VirtualRenderer(renderOptions) : new DefaultRenderer(renderOptions);\r\n\r\n        this.createRows();\r\n        this.initMouse();\r\n        this.initKeys();\r\n        this.initClipboard();\r\n        this.resetColumnWidths();\r\n    }\r\n\r\n    destroy() {\r\n        this.render.destroy();\r\n        this.cleanups.forEach(c => c());\r\n        this.cleanups.length = 0;\r\n        remove(this.grid);\r\n        this.cells.forEach(c => c.destroy());\r\n        this.grid = null;\r\n        this.hiddenInput = null;\r\n        this.cellInput = null;\r\n        this.rows = null;\r\n        this.cells = null;\r\n    }\r\n\r\n    /**\r\n     * Adds an event listener.\r\n     * Grid fires these events:\r\n     * 'input', 'focus', 'select'\r\n     */\r\n    on(event: 'input' | 'focus', handler: EventHandler<InputArgs>);\r\n    on(event: 'select', handler: EventHandler<SelectArgs>);\r\n    on(event: string, handler: EventHandlerBase) {\r\n        this.events.addHandler(event, handler);\r\n    }\r\n\r\n    update(rowIndex: number, colIndex: number, value: CellValue | CellUpdateOptions, emit?: boolean) {\r\n        const row = this.rows[rowIndex];\r\n        const cell = row.cells[colIndex];\r\n        if (cell) {\r\n            cell.set(value);\r\n            this.updatValue(cell, emit);\r\n        }\r\n    }\r\n\r\n    addRows(rows: RowOptions[]) {\r\n        [].push.apply(this.options.rows, rows);\r\n        rows.forEach(r => {\r\n            const newRow = this.createAndAddRow(r);\r\n            newRow.cells.forEach(c => this.emitInput(c));\r\n        });\r\n        this.flattenCells();\r\n        this.renderRows();\r\n    }\r\n\r\n    addRow() {\r\n        this.addRows([this.options.cols.map(c => '')]);\r\n    }\r\n\r\n    private resetColumnWidths() {\r\n        const allCells = queryAll(this.container, `${css(CSS_HEAD)} ${css(CSS_CELL)}`);\r\n        allCells.forEach((c: HTMLElement, i) => {\r\n            c.style.width = c.offsetWidth + 'px';\r\n        });\r\n    }\r\n\r\n    private createHeadCell(text: string | number, columnIndex: number) {\r\n        const column = createElement(`<div class=\"${CSS_CELL}\" data-ci=\"${columnIndex}\"><span>${text}</span></div>`);\r\n        const resizer = createElement(`<div class=\"${CSS_RESIZER}\"></div>`);\r\n        column.appendChild(resizer);\r\n\r\n        let downPosition = null;\r\n        let nextColumn = null;\r\n        let currentWidth = null;\r\n        let currentNextWidth = null;\r\n        let selection = null;\r\n\r\n        const mousemove = (e: MouseEvent) => {\r\n            if (selection) {\r\n                let col = e.target as Element;\r\n                while (col) {\r\n                    const ciAttr = col.getAttribute('data-ci');\r\n                    const ci = +ciAttr;\r\n                    if (ciAttr !== null && !isNaN(ci)) {\r\n                        const minCol = Math.min(columnIndex, ci);\r\n                        const maxCol = Math.max(columnIndex, ci);\r\n                        if (selection[0] !== minCol || selection[1] !== maxCol) {\r\n                            selection = [minCol, maxCol];\r\n                            this.cells.forEach(c => c.select(c.col >= minCol && c.col <= maxCol));\r\n                            this.emitSelect();\r\n                        }\r\n                        break;\r\n                    }\r\n                    col = col.parentElement;\r\n                }\r\n            }\r\n            else {\r\n                // column resizing\r\n                const diff = e.pageX - downPosition;\r\n                if (nextColumn) {\r\n                    nextColumn.style.width = (currentNextWidth - diff) + 'px';\r\n                }\r\n                column.style.width = (currentWidth + diff) + 'px';\r\n            }\r\n        };\r\n\r\n        const mouseup = () => {\r\n            downPosition = null;\r\n            selection = null;\r\n            off(document, 'mousemove', mousemove);\r\n            off(document, 'mouseup', mouseup);\r\n            this.resetColumnWidths();\r\n        };\r\n\r\n        on(column, 'mousedown', (e: MouseEvent) => {\r\n            if (e.target === resizer) {\r\n                // Resize columns\r\n                nextColumn = column.nextElementSibling;\r\n                downPosition = e.pageX;\r\n                currentWidth = column.offsetWidth;\r\n                currentNextWidth = nextColumn ? nextColumn.offsetWidth : null;\r\n            }\r\n            else if (this.rows.length) {\r\n                // Select column\r\n                const i = +column.getAttribute('data-ci');\r\n                selection = true;\r\n                this.cells.forEach(c => c.activate(false).select(c.col === i));\r\n                selection = [i, i];\r\n                this.focusHiddenInput();\r\n                this.activeCell = this.rows[0].cells[i];\r\n                this.emitSelect();\r\n            }\r\n            on(document, 'mouseup', mouseup);\r\n            on(document, 'mousemove', mousemove);\r\n            e.preventDefault();\r\n        });\r\n\r\n        return column;\r\n    }\r\n\r\n    private focusHiddenInput() {\r\n        // Focus the hidden input element to receive paste events.\r\n        // Prevent scrolling up if input was blurred at the end of a long table.\r\n        this.hiddenInput.focus({ preventScroll: true });\r\n    }\r\n\r\n    private createAndAddRow(r: RowOptions): Row {\r\n        const row = new Row(this.rows.length);\r\n        row.addCells(r, this.updateValueCallback());\r\n        this.rows.push(row);\r\n        return row;\r\n    }\r\n\r\n    private updateValueCallback() {\r\n        return cell => this.emitInput(cell);\r\n    }\r\n\r\n    private createRows() {\r\n        this.rows = [];\r\n        this.options.rows.forEach(r => this.createAndAddRow(r));\r\n        this.flattenCells();\r\n        this.renderRows();\r\n    }\r\n\r\n    private renderRows() {\r\n        this.render.rerender(this.rows);\r\n    }\r\n\r\n    private flattenCells() {\r\n        this.cells = this.rows.reduce((a, b) => a.concat(b.cells), [] as Cell[]);\r\n    }\r\n\r\n    private initMouse() {\r\n        let downCellIndex: number;\r\n        let downRowIndex: number;\r\n\r\n        let selectionIdentifier: string = null;\r\n        const rememberSelection = (r1, c1, r2, c2) => '' + r1 + c1 + r2 + c2;\r\n\r\n        const findTargetCell = (cell: Element, level = 0): Cell => {\r\n            if (!cell || !cell.parentElement) {\r\n                return;\r\n            }\r\n            const cellIndexAttr = cell.getAttribute('data-ci');\r\n            if (cellIndexAttr === null && level < 2) {\r\n                return findTargetCell(cell.parentElement, level + 1);\r\n            }\r\n            const rowIndexAttr = cell.parentElement.getAttribute('data-ri');\r\n            const cellIndex = +cellIndexAttr;\r\n            const rowIndex = +rowIndexAttr;\r\n            if (cellIndexAttr && rowIndexAttr && !isNaN(cellIndex) && !isNaN(rowIndex)) {\r\n                return this.rows[rowIndex].cells[cellIndex];\r\n            }\r\n        };\r\n\r\n        const getTargetCell = (e: MouseEvent) => {\r\n            const cell = e.target as Element;\r\n            return findTargetCell(cell);\r\n        };\r\n\r\n        const mousemove = (moveEvent: MouseEvent) => {\r\n            const targetCell = getTargetCell(moveEvent);\r\n            if (targetCell) {\r\n                const rowIndex = targetCell.row;\r\n                const cellIndex = targetCell.col;\r\n                const firstRow = Math.min(rowIndex, downRowIndex);\r\n                const lastRow = Math.max(rowIndex, downRowIndex);\r\n                const firstCol = Math.min(cellIndex, downCellIndex);\r\n                const lastCol = Math.max(cellIndex, downCellIndex);\r\n                const newSelectionIdentifier = rememberSelection(firstRow, firstCol, lastRow, lastCol);\r\n                if (selectionIdentifier !== newSelectionIdentifier) {\r\n                    selectionIdentifier = newSelectionIdentifier;\r\n                    this.unselect();\r\n                    for (let ri = firstRow; ri <= lastRow; ++ri) {\r\n                        for (let ci = firstCol; ci <= lastCol; ++ci) {\r\n                            this.rows[ri].cells[ci].select();\r\n                        }\r\n                    }\r\n                    this.emitSelect();\r\n                }\r\n            }\r\n        };\r\n\r\n        const mouseup = () => {\r\n            off(document, 'mousemove', mousemove);\r\n            off(document, 'mouseup', mouseup);\r\n        };\r\n\r\n        let lastMouseDown = Date.now();\r\n        const cleanupMousedown = on(this.grid, 'mousedown', (e: MouseEvent) => {\r\n            const cell = getTargetCell(e);\r\n            if (cell) {\r\n                const timeSinceLast = Date.now() - lastMouseDown;\r\n                lastMouseDown = Date.now();\r\n                if (cell.takesMouse()) {\r\n                    // The cell is already in edit mode. Do nothing and continue with default event handling\r\n                    return;\r\n                }\r\n                else if (cell === this.activeCell && !cell.readonly && timeSinceLast < 300) {\r\n                    // Double click on cell to start edit mode\r\n                    // if (Array.isArray(cell.options)) {\r\n                    //     cell.startSelect(this.cellSelect);\r\n                    // }\r\n                    cell.startEdit(this.cellInput);\r\n                    this.emitFocus();\r\n                }\r\n                else {\r\n                    const rowIndex = cell.row;\r\n                    const cellIndex = cell.col;\r\n                    downRowIndex = rowIndex;\r\n                    downCellIndex = cellIndex;\r\n                    selectionIdentifier = rememberSelection(rowIndex, cellIndex, rowIndex, cellIndex);\r\n                    this.activate(cell);\r\n                    on(document, 'mouseup', mouseup);\r\n                    on(document, 'mousemove', mousemove);\r\n                }\r\n                e.preventDefault();\r\n            }\r\n        });\r\n        this.cleanups.push(cleanupMousedown);\r\n\r\n        const cleanupMouseup = on(document, 'mouseup', (e: MouseEvent) => {\r\n            if (this.activeCell) {\r\n                // Unselect all if was click outside of the grid.\r\n                for (let target = e.target as Node; target; target = target.parentNode) {\r\n                    if (target === this.container) {\r\n                        return;\r\n                    }\r\n                }\r\n                this.activeCell.activate(false);\r\n                if (this.unselect()) {\r\n                    this.emitSelect();\r\n                }\r\n            }\r\n        });\r\n        this.cleanups.push(cleanupMouseup);\r\n    }\r\n\r\n    private activate(cell: Cell, doActivate = true) {\r\n        if (this.activeCell) {\r\n            this.activeCell.activate(false);\r\n        }\r\n        let selectionChanged = false;\r\n        this.cells.forEach(c => {\r\n            selectionChanged = c === cell ? (c.selected() !== doActivate) : (selectionChanged || c.selected());\r\n            c.select(false);\r\n        });\r\n        this.activeCell = cell.select(doActivate).activate(doActivate);\r\n        if (selectionChanged) {\r\n            this.emitSelect();\r\n        }\r\n        this.focusHiddenInput();\r\n    }\r\n\r\n    private moveActive(rowDelta: number, colDelta: number, addRows = false) {\r\n        const activeCell = this.activeCell;\r\n        if (activeCell) {\r\n            const rows = this.rows;\r\n            const rowIndex = activeCell.row + rowDelta;\r\n            while (addRows && this.options.canAddRows && rowIndex >= rows.length) {\r\n                this.addRow();\r\n            }\r\n            const nextRow = rows[rowIndex];\r\n            if (nextRow) {\r\n                const cell = nextRow.cells[activeCell.col + colDelta];\r\n                if (cell) {\r\n                    this.activate(cell);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private initKeys() {\r\n        const hiddenInput = this.hiddenInput;\r\n        const cellInput = this.cellInput;\r\n\r\n        this.cleanups.push(on(hiddenInput, 'keydown', (e: KeyboardEvent) => {\r\n            e = e || window.event as KeyboardEvent;\r\n            const keyCode = e.keyCode;\r\n            if (keyCode === 46) {  // del\r\n                this.cells.forEach(cell => {\r\n                    if (cell.selected()) {\r\n                        this.setCell(cell, '');\r\n                    }\r\n                });\r\n                e.preventDefault();\r\n            }\r\n            if (keyCode === 37) {\r\n                this.moveActive(0, -1);\r\n            }\r\n            if (keyCode === 38) {\r\n                this.moveActive(-1, 0);\r\n            }\r\n            if (keyCode === 39) {\r\n                this.moveActive(0, 1);\r\n            }\r\n            if (keyCode === 40) {\r\n                this.moveActive(1, 0);\r\n            }\r\n        }));\r\n\r\n        const onInput = (e: KeyboardEvent) => {\r\n            const activeCell = this.activeCell;\r\n            if (activeCell && !activeCell.readonly && activeCell.takesKey()) {\r\n                this.updatValue(activeCell, true);\r\n                this.cells.forEach(cell => {\r\n                    if (cell.selected() && cell !== activeCell) {\r\n                        this.setCell(cell, activeCell.value());\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        this.cleanups.push(on(cellInput, 'input', onInput));\r\n        this.cleanups.push(on(cellInput, 'keydown', (e: KeyboardEvent) => {\r\n            if (e.keyCode === 13) {\r\n                // ENTER, stop edit and move to next row\r\n                this.moveActive(0, 0);\r\n                this.moveActive(1, 0, true);\r\n                e.preventDefault();\r\n            }\r\n            if (e.keyCode === 27) {\r\n                // ESCAPE, stop edit but stay at same cell\r\n                this.moveActive(0, 0);\r\n                e.preventDefault();\r\n            }\r\n        }));\r\n\r\n        this.cleanups.push(on(hiddenInput, 'keypress', (e: KeyboardEvent) => {\r\n            const activeCell = this.activeCell;\r\n            if (activeCell && !activeCell.readonly && !activeCell.takesKey()) {\r\n                activeCell.startEdit(cellInput, true);\r\n                this.emitFocus();\r\n            }\r\n            else {\r\n                e.preventDefault();\r\n            }\r\n        }));\r\n    }\r\n\r\n    pasteCSV(csvText: string, separator: string, startRow?: number, startCol?: number) {\r\n        const csv = parseCSV(csvText, separator);\r\n        const activeCell = this.activeCell;\r\n        if (isNaN(startRow) && !activeCell) {\r\n            return;\r\n        }\r\n        startRow = isNaN(startRow) ? activeCell.row : startRow;\r\n        startCol = isNaN(startCol) ? activeCell.col : startCol;\r\n\r\n        csv.forEach((csvRow, csvRowIndex) => {\r\n            let tableRow = this.rows[startRow + csvRowIndex];\r\n            if (!tableRow && this.options.canAddRows) {\r\n                const prevRow = this.rows[startRow];\r\n                this.addRows([prevRow.cells.map(c => '')]);\r\n                tableRow = this.rows[startRow + csvRowIndex];\r\n            }\r\n            const tableCol = startCol;\r\n            const isLastEmptyRow = csvRow.length === 1 && csvRow[0] === '';\r\n            if (tableRow && !isLastEmptyRow) {\r\n                csvRow.forEach((csvCell, csvColIndex) => {\r\n                    const cell = tableRow.cells[tableCol + csvColIndex];\r\n                    if (cell && !cell.readonly) {\r\n                        this.setCell(cell, csvCell);\r\n                        cell.select();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private initClipboard() {\r\n        on(this.hiddenInput, 'paste', (e: ClipboardEvent) => {\r\n            // Don't actually paste to hidden input\r\n            e.preventDefault();\r\n            const text = (e.clipboardData || (window as any).clipboardData).getData('text');\r\n            this.pasteCSV(text, '\\t');\r\n        });\r\n\r\n        on(this.hiddenInput, 'copy', (e: ClipboardEvent) => {\r\n            e.preventDefault();\r\n            const activeCell = this.activeCell;\r\n            if (!activeCell) {\r\n                return;\r\n            }\r\n\r\n            const csv = [];\r\n            for (let ri = activeCell.row; ; ri++) {\r\n                const row = this.rows[ri];\r\n                const csvRow = [];\r\n                if (!row || !row.cells[activeCell.col] || !row.cells[activeCell.col].selected()) {\r\n                    break;\r\n                }\r\n                for (let ci = activeCell.col; ; ++ci) {\r\n                    const cell = row.cells[ci];\r\n                    if (!cell || !cell.selected()) {\r\n                        break;\r\n                    }\r\n                    csvRow.push(cell.value());\r\n                }\r\n                csv.push(csvRow);\r\n            }\r\n            const clipboard = (e.clipboardData || (window as any).clipboardData);\r\n            clipboard.setData('text/plain', writeCSV(csv, '\\t'));\r\n        });\r\n    }\r\n\r\n    private setCell(cell: Cell, value: string) {\r\n        if (!cell.readonly) {\r\n            cell.set(value);\r\n            this.updatValue(cell, true);\r\n        }\r\n    }\r\n\r\n    private unselect(): boolean {\r\n        let selectionChanged = false;\r\n        this.cells.forEach(c => {\r\n            selectionChanged = selectionChanged || c.selected();\r\n            c.select(false);\r\n        });\r\n        return selectionChanged;\r\n    }\r\n\r\n    private updatValue(cell: Cell, emit: boolean) {\r\n        const colIndex = cell.col;\r\n        const rowOption = this.options.rows[cell.row];\r\n        const cellValue = rowOption[colIndex];\r\n        if (typeof cellValue === 'string' || typeof cellValue === 'number') {\r\n            rowOption[colIndex] = cell.value();\r\n        }\r\n        else {\r\n            cellValue.value = cell.value();\r\n        }\r\n        if (emit) {\r\n            this.emitInput(cell);\r\n        }\r\n    }\r\n\r\n    private emitInput(cell: Cell) {\r\n        this.events.emit<InputArgs>('input', {\r\n            grid: this,\r\n            col: cell.col,\r\n            row: cell.row,\r\n            value: cell.value(),\r\n        });\r\n    }\r\n\r\n    private emitFocus() {\r\n        const cell = this.activeCell;\r\n        this.events.emit<InputArgs>('focus', {\r\n            grid: this,\r\n            col: cell.col,\r\n            row: cell.row,\r\n            value: cell.value(),\r\n        });\r\n    }\r\n\r\n    private emitSelect() {\r\n        this.events.emit<SelectArgs>('select', {\r\n            grid: this,\r\n            selection: this.cells.filter(c => c.selected()).map(c => ({\r\n                row: c.row,\r\n                col: c.col,\r\n            })),\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction css(className) {\r\n    return '.' + className;\r\n}\r\n\r\nfunction trueOr(value: boolean): boolean {\r\n    return value === false ? false : true;\r\n}\r\n\r\nfunction getScrollOptions(options: GridOptions): ScrollOptions {\r\n    const scroll = options.scroll;\r\n    if (!scroll) {\r\n        return {};\r\n    }\r\n    return {\r\n        enabled: trueOr(scroll.enabled),\r\n        virtualScroll: trueOr(scroll.virtualScroll),\r\n        stickyHeader: trueOr(scroll.stickyHeader),\r\n    };\r\n}\r\n\r\n// ----\r\n","// ref: https://stackoverflow.com/a/14991797/498298\r\n// This will parse a delimited string into an array of\r\n// arrays. The default delimiter is the comma, but this\r\n// can be overriden in the second argument.\r\nexport function parseCSV(str: string, delimiter: string) {\r\n    const arr: string[][] = [];\r\n    let quote = false;  // 'true' means we're inside a quoted field\r\n\r\n    // Iterate over each character, keep track of current row and column (of the returned array)\r\n    for (let row = 0, col = 0, i = 0; i < str.length; i++) {\r\n        const currentChar = str[i];\r\n        const nextChar = str[i + 1];\r\n        arr[row] = arr[row] || [];             // Create a new row if necessary\r\n        arr[row][col] = arr[row][col] || '';   // Create a new column (start with empty string) if necessary\r\n\r\n        // If the current character is a quotation mark, and we're inside a\r\n        // quoted field, and the next character is also a quotation mark,\r\n        // add a quotation mark to the current column and skip the next character\r\n        if (currentChar === '\"' && quote && nextChar === '\"') {\r\n            arr[row][col] += currentChar;\r\n            ++i;\r\n            continue;\r\n        }\r\n\r\n        // If it's just one quotation mark, begin/end quoted field\r\n        if (currentChar === '\"') {\r\n            quote = !quote;\r\n            continue;\r\n        }\r\n\r\n        // If it's a delimiter and we're not in a quoted field, move on to the next column\r\n        if (currentChar === delimiter && !quote) {\r\n            ++col;\r\n            continue;\r\n        }\r\n\r\n        // If it's a newline (CRLF) and we're not in a quoted field, skip the next character\r\n        // and move on to the next row and move to column 0 of that new row\r\n        if (currentChar === '\\r' && nextChar === '\\n' && !quote) {\r\n            ++row;\r\n            col = 0;\r\n            ++i;\r\n            continue;\r\n        }\r\n\r\n        // If it's a newline (LF or CR) and we're not in a quoted field,\r\n        // move on to the next row and move to column 0 of that new row\r\n        if ((currentChar === '\\n' || currentChar === '\\r') && !quote) {\r\n            ++row;\r\n            col = 0;\r\n            continue;\r\n        }\r\n\r\n        // Otherwise, append the current character to the current column\r\n        arr[row][col] += currentChar;\r\n    }\r\n    return arr;\r\n}\r\n\r\n\r\nexport function writeCSV(values: Array<string[]>, separator: string, linebreak = '\\n') {\r\n\r\n    let content = '';\r\n    values.forEach((row, ri) => {\r\n        if (ri > 0) {\r\n            content += linebreak;\r\n        }\r\n        row.forEach((cell, ci) => {\r\n            cell = cell.replace(/\"/g, '\"\"');\r\n            if (cell.search(/(\"|,|\\n)/g) >= 0) {\r\n                cell = '\"' + cell + '\"';\r\n            }\r\n            if (ci > 0) {\r\n                content += separator;\r\n            }\r\n            content += cell;\r\n        });\r\n    });\r\n    return content;\r\n\r\n}\r\n"],"names":["this","EventEmitter","event","handler","handlers","push","splice","indexOf","args","forEach","createElement","html","div","document","innerHTML","trim","firstChild","on","element","listener","addEventListener","removeEventListener","offFunc","off","remove","node","parentNode","parentElement","removeChild","CSS_ROW","CSS_PREFIX","row","col","value","text","isPlainValue","toString","readonly","extraCss","css","valueHTML","setCss","InputCell","isSelected","doSelect","doActivate","isActive","input","blur","textContent","setValue","isDefined","className","cssIf","select","style","width","offsetWidth","appendChild","focus","takesKey","callback","options","selectElement","i","length","options_1","_i","option","optionElement","setOptions","set","_this","SelectCell","CSS_CELL","selectContent","useValue","index","Row","cells","updateValueCallback","c","columnIndex","cell","Array","isArray","DefaultRenderer","rows","_a","grid","head","r","VirtualRenderer","container","gridContainer","onScroll","current","viewportHeight","undefined","itemCount","start","end","rowHeight","position","animationFrame","updateFunc","scrollTop","offsetHeight","totalContentHeight","startIndex","Math","floor","max","visibleNodesCount","ceil","endIndex","min","maxOffsetY","offsetY","lastItemIndex","noMoreItemsAvailable","newRangeDiffers","heightChanged","desiredRenderHeight","headerHeight","renderedHeight","fragment","createDocumentFragment","numberOfRenderedItems","height","e","cancelAnimationFrame","requestAnimationFrame","target","elOrCss","cssSelector","querySelector","init","Grid","scroll","enabled","trueOr","virtualScroll","stickyHeader","getScrollOptions","cellInput","hiddenInput","classList","add","cols","createHeadCell","renderOptions","render","createRows","initMouse","initKeys","initClipboard","resetColumnWidths","destroy","cleanups","events","addHandler","rowIndex","colIndex","emit","updatValue","apply","createAndAddRow","emitInput","flattenCells","renderRows","addRows","map","slice","call","querySelectorAll","column","resizer","downPosition","nextColumn","currentWidth","currentNextWidth","selection","mousemove","ciAttr","getAttribute","ci","isNaN","minCol_1","maxCol_1","emitSelect","diff","pageX","mouseup","nextElementSibling","i_1","activate","focusHiddenInput","activeCell","preventDefault","preventScroll","addCells","rerender","reduce","a","b","concat","downCellIndex","downRowIndex","selectionIdentifier","rememberSelection","r1","c1","r2","c2","findTargetCell","level","cellIndexAttr","rowIndexAttr","cellIndex","getTargetCell","moveEvent","targetCell","firstRow","lastRow","firstCol","lastCol","newSelectionIdentifier","unselect","ri","lastMouseDown","Date","now","cleanupMousedown","timeSinceLast","takesMouse","startEdit","emitFocus","cleanupMouseup","selectionChanged","selected","rowDelta","colDelta","canAddRows","addRow","nextRow","keyCode","window","setCell","moveActive","csvText","separator","startRow","startCol","csv","str","delimiter","arr","quote","currentChar","nextChar","parseCSV","csvRow","csvRowIndex","tableRow","prevRow","tableCol","isLastEmptyRow","csvCell","csvColIndex","clipboardData","getData","pasteCSV","setData","values","linebreak","content","replace","search","writeCSV","rowOption","cellValue","filter"],"mappings":"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"}