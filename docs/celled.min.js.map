{"version":3,"file":"celled.min.js","sources":["../src/lib/events.ts","../src/lib/dom.ts","../src/lib/cell.ts","../src/lib/css.ts","../src/lib/row.ts","../src/lib/render.ts","../src/lib/grid.ts","../src/lib/csv.ts"],"sourcesContent":["\r\nexport interface EventArgs { }\r\n\r\nexport type EventHandlerBase = (arg: EventArgs) => any;\r\n\r\nexport interface EventHandler<T> extends EventHandlerBase {\r\n    (arg: T): any;\r\n}\r\n\r\nexport class EventEmitter {\r\n    handlers: { [event: string]: EventHandlerBase[] } = {};\r\n\r\n    addHandler(event: string, handler: EventHandlerBase) {\r\n        const handlers = this.handlers;\r\n        handlers[event] = handlers[event] || [];\r\n        handlers[event].push(handler);\r\n    }\r\n\r\n    removeHandler(event: string, handler: EventHandlerBase) {\r\n        const allHandlers = this.handlers;\r\n        const handlers = allHandlers[event];\r\n        if (handlers && handler) {\r\n            handlers.splice(handlers.indexOf(handler), 1);\r\n        }\r\n    }\r\n\r\n    emit<TArgs extends EventArgs>(event: string, args: TArgs) {\r\n        const handlers = this.handlers[event];\r\n        if (handlers) {\r\n           handlers.forEach(handler => {\r\n                try {\r\n                    handler(args);\r\n                }\r\n                catch {}\r\n            });\r\n        }\r\n    }\r\n}\r\n","export function query<T = Element>(elOrCss, cssSelector?): T {\r\n    if (!cssSelector) {\r\n        cssSelector = elOrCss;\r\n        elOrCss = document;\r\n    }\r\n    return elOrCss.querySelector(cssSelector);\r\n}\r\n\r\nexport function queryAll<T = Element>(elOrCss, cssSelector?): T[] {\r\n    if (!cssSelector) {\r\n        cssSelector = elOrCss;\r\n        elOrCss = document;\r\n    }\r\n    return [].slice.call(elOrCss.querySelectorAll(cssSelector));\r\n}\r\n\r\nexport function createElement<T extends HTMLElement>(html: string): T {\r\n    const div = document.createElement('div');\r\n    div.innerHTML = html.trim();\r\n    return div.firstChild as T;\r\n}\r\n\r\nexport function on(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    element.addEventListener(event, listener);\r\n    return offFunc(element, event, listener);\r\n}\r\n\r\nexport function off(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    element.removeEventListener(event, listener);\r\n}\r\n\r\nexport function offFunc(element: Node, event: string, listener: EventListenerOrEventListenerObject) {\r\n    return () => element.removeEventListener(event, listener);\r\n}\r\n\r\nexport function getKey(e: KeyboardEvent) {\r\n    e = e || window.event as KeyboardEvent;\r\n    return String.fromCharCode(e.keyCode || e.which);\r\n}\r\n\r\nexport function remove(node: Node) {\r\n    if (node.parentNode) {\r\n        node.parentElement.removeChild(node);\r\n    }\r\n}\r\n\r\nexport function setOptions(selectElement: HTMLSelectElement, options: ReadonlyArray<any>) {\r\n    for (let i = selectElement.options.length; i > 0; i--) {\r\n        selectElement.remove(i);\r\n    }\r\n    for (const option of options) {\r\n        const optionElement = document.createElement('option');\r\n        optionElement.value = '' + option;\r\n        optionElement.innerHTML = '' + option;\r\n        selectElement.appendChild(optionElement);\r\n    }\r\n}\r\n","import { CSS_CELL, CSS_READONLY, CSS_SELECTED, CSS_ACTIVE, CSS_EDITING, CSS_SELECT_CELL } from './css';\r\nimport { createElement, remove, setOptions } from './dom';\r\nimport { CellUpdateOptions, CellValue, CellValueOptions } from './options';\r\n\r\nexport type UpdateCallback = (cell: Cell) => unknown;\r\n\r\nexport interface Cell {\r\n\r\n    readonly readonly: boolean;\r\n    row: number;\r\n    col: number;\r\n\r\n    element(): HTMLElement;\r\n\r\n    /**\r\n     * Cleanup any resources, listeners...\r\n     */\r\n    destroy(): void;\r\n\r\n    /**\r\n     * The currently displayed value.\r\n     */\r\n    value(): string;\r\n\r\n    /**\r\n     * Show a new value.\r\n     */\r\n    set(value: CellValue | CellUpdateOptions): void;\r\n\r\n    /**\r\n     * Mark the cell as selected. This will apply css classes\r\n     * to visualize the cell as a selected cell.\r\n     */\r\n    select(doSelect?: boolean): this;\r\n\r\n    /**\r\n     * Cell was selected with select(true).\r\n     */\r\n    selected(): boolean;\r\n\r\n    /**\r\n     * This will apply css classes to visualize the cell as a selected and active cell.\r\n     * The active cell is the leading cell in a multi edit situation. It will contain\r\n     * the editing control.\r\n     * If doActivate is false, the editing control will be removed.\r\n     */\r\n    activate(doActivate?: boolean): this;\r\n\r\n    /**\r\n     * Start the editing process. The cell can use the passed input element to let\r\n     * the user enter free text.\r\n     */\r\n    startEdit(input: HTMLInputElement, selectContent?: boolean);\r\n\r\n    /**\r\n     * This cell is ready to consume key events\r\n     */\r\n    takesKey(): boolean;\r\n\r\n    /**\r\n     * This cell is ready to consume mouse click events\r\n     */\r\n    takesMouse(): boolean;\r\n}\r\n\r\n/**\r\n * Create a new Cell instance matching the definitions in the value parameter.\r\n * @param callback  Can be used by the cell to notify value changes that are not\r\n *                  triggered from outside.\r\n */\r\nexport function createCell(row: number, col: number, value: CellValue | CellValueOptions, callback: UpdateCallback) {\r\n    if (typeof value !== 'string' && typeof value !== 'number' && Array.isArray(value.options)) {\r\n        return new SelectCell(row, col, value, callback);\r\n    }\r\n    return new InputCell(row, col, value);\r\n}\r\n\r\n\r\nclass InputCell implements Cell {\r\n\r\n    input: HTMLInputElement;  // If the cell is active, this is the assigned input element\r\n    readonly = false;\r\n\r\n    private isActive = false;\r\n    private isSelected = false;\r\n    private extraCss = '';\r\n    private val: string;\r\n    private elem: HTMLElement;\r\n\r\n    constructor(public row: number, public col: number, value: CellValue | CellValueOptions) {\r\n        if (isPlainValue(value)) {\r\n            this.val = String(value);\r\n        }\r\n        else {\r\n            this.readonly = value.readonly;\r\n            this.val = String(value.value);\r\n            this.extraCss = value.css;\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n    }\r\n\r\n    element(): HTMLElement {\r\n        if (!this.elem) {\r\n            const element = document.createElement('div');\r\n            element.appendChild(valueElement(this.val));\r\n            element.setAttribute('data-ci', String(this.col));\r\n            this.elem = element;\r\n            this.setCss();\r\n        }\r\n        return this.elem;\r\n    }\r\n\r\n    selected() {\r\n        return this.isSelected;\r\n    }\r\n\r\n    select(doSelect = true) {\r\n        this.isSelected = doSelect;\r\n        this.setCss();\r\n        return this;\r\n    }\r\n\r\n    activate(doActivate = true) {\r\n        if (doActivate) {\r\n            this.isActive = this.isSelected = true;\r\n        }\r\n        else {\r\n            this.isActive = false;\r\n            if (this.input) {\r\n                this.input.blur();\r\n                remove(this.input);\r\n                this.elem.innerHTML = '';\r\n                this.elem.appendChild(valueElement(this.input.value));\r\n                this.input = null;\r\n            }\r\n        }\r\n        this.setCss();\r\n        return this;\r\n    }\r\n\r\n    value() {\r\n        return this.input ? this.input.value : this.val;\r\n    }\r\n\r\n    set(value: CellValue | CellUpdateOptions) {\r\n        if (isPlainValue(value)) {\r\n            this.setValue(value);\r\n        }\r\n        else {\r\n            // Update properties only if it's set in value\r\n            if (isDefined(value.value)) {\r\n                this.setValue(value.value);\r\n            }\r\n            this.readonly = isDefined(value.readonly) ? value.readonly : this.readonly;\r\n            this.extraCss = value.css;\r\n            this.setCss();\r\n        }\r\n    }\r\n\r\n    private setValue(value: CellValue) {\r\n        this.val = String(value);\r\n        if (this.input) {\r\n            this.input.value = value.toString();\r\n        }\r\n        else if (this.elem) {\r\n            this.elem.innerHTML = '';\r\n            this.elem.appendChild(valueElement(value));\r\n        }\r\n    }\r\n\r\n    private setCss() {\r\n        const className = CSS_CELL +\r\n            cssIf(this.readonly, CSS_READONLY) +\r\n            cssIf(this.isActive, CSS_ACTIVE) +\r\n            cssIf(this.isSelected, CSS_SELECTED) +\r\n            cssIf(!!this.input, CSS_EDITING) +\r\n            cssIf(!!this.extraCss, this.extraCss);\r\n        if (this.elem) {\r\n            this.elem.className = className;\r\n        }\r\n    }\r\n\r\n    startEdit(input: HTMLInputElement, select = false) {\r\n        if (this.readonly) {\r\n            return;\r\n        }\r\n        const element = this.elem;\r\n        this.input = input;\r\n        input.value = element.textContent;\r\n        if (select) {\r\n            input.select();\r\n        }\r\n        input.style.width = element.offsetWidth - 2 + 'px';\r\n        element.innerHTML = '';\r\n        element.appendChild(input);\r\n        input.focus();\r\n        this.setCss();\r\n    }\r\n\r\n    takesKey(): boolean {\r\n        return !!this.input;\r\n    }\r\n\r\n    takesMouse(): boolean {\r\n        return this.takesKey();\r\n    }\r\n}\r\n\r\nfunction valueElement(value: string|Number) {\r\n    const valueSpan = document.createElement('span');\r\n    valueSpan.appendChild(document.createTextNode(String(value)));\r\n    return valueSpan;\r\n}\r\n\r\nclass SelectCell implements Cell {\r\n\r\n    selectElement: HTMLSelectElement;\r\n    readonly = false;\r\n    options: ReadonlyArray<CellValue> = null;\r\n\r\n    private listener;\r\n    private isSelected = false;\r\n    private extraCss = '';\r\n    private elem: HTMLElement;\r\n\r\n    constructor(public row: number, public col: number, value: CellValueOptions, callback: UpdateCallback) {\r\n\r\n        this.readonly = value.readonly;\r\n        this.options = value.options;\r\n        this.elem = createElement(`<div data-ci=\"${col}\"></div>`);\r\n        this.selectElement = createElement<HTMLSelectElement>(`<select><select>`);\r\n        setOptions(this.selectElement, this.options);\r\n        this.set('' + value.value);\r\n        this.elem.appendChild(this.selectElement);\r\n        this.listener = () => callback(this);\r\n        this.selectElement.addEventListener('change', this.listener);\r\n        this.extraCss = value.css;\r\n        this.setCss();\r\n    }\r\n\r\n    destroy() {\r\n        this.selectElement.removeEventListener('change', this.listener);\r\n        this.listener = null;\r\n    }\r\n\r\n    element(): HTMLElement {\r\n        return this.elem;\r\n    }\r\n\r\n    value(): string {\r\n        return this.selectElement.value;\r\n    }\r\n\r\n    set(value: CellValue | CellUpdateOptions) {\r\n        if (isPlainValue(value)) {\r\n            this.setValue(value);\r\n        }\r\n        else {\r\n            // Update properties only if it's set in value\r\n            if (isDefined(value.value)) {\r\n                this.setValue(value.value);\r\n            }\r\n            this.extraCss = value.css;\r\n            this.setCss();\r\n        }\r\n    }\r\n\r\n    private setValue(value: CellValue) {\r\n        this.selectElement.value = value ? value.toString() : null;\r\n    }\r\n\r\n    private setCss() {\r\n        const className = CSS_CELL + ' ' + CSS_SELECT_CELL +\r\n            cssIf(this.readonly, CSS_READONLY) +\r\n            cssIf(this.isSelected, CSS_SELECTED) +\r\n            cssIf(!!this.extraCss, this.extraCss);\r\n        this.elem.className = className;\r\n    }\r\n\r\n    select(doSelect = true) {\r\n        this.isSelected = doSelect;\r\n        this.setCss();\r\n        return this;\r\n    }\r\n\r\n    selected(): boolean {\r\n        return this.isSelected;\r\n    }\r\n\r\n    activate(doActivate?: boolean) {\r\n        return this;\r\n    }\r\n\r\n    startEdit(input: HTMLInputElement, selectContent?: boolean) {\r\n    }\r\n\r\n    takesKey(): boolean {\r\n        return false;\r\n    }\r\n\r\n    takesMouse(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\n// function setSelectCSS(element: HTMLElement, doSelect: boolean) {\r\n//     const classList = element.classList;\r\n//     if (doSelect) {\r\n//         classList.add(CSS_SELECTED);\r\n//     }\r\n//     else {\r\n//         classList.remove(CSS_SELECTED);\r\n//     }\r\n// }\r\n\r\nfunction isSelectCss(element: HTMLElement) {\r\n    return element.className.indexOf(CSS_SELECTED) >= 0;\r\n}\r\n\r\nfunction isPlainValue(value: CellValue | CellUpdateOptions): value is CellValue {\r\n    return typeof value === 'string' || typeof value === 'number';\r\n}\r\n\r\nfunction isDefined(value: any) {\r\n    return typeof value !== 'undefined';\r\n}\r\n\r\n\r\nfunction cssIf(useValue: boolean, css: string) {\r\n    return useValue ? ' ' + css : '';\r\n}\r\n","export const CSS_PREFIX = 'ced';\r\nexport const CSS_CONTAINER = `${CSS_PREFIX}-grid-container`;\r\nexport const CSS_CONTAINER_SCROLL = `${CSS_PREFIX}-grid-container-scroll`;\r\nexport const CSS_GRID = `${CSS_PREFIX}-grid`;\r\nexport const CSS_ROW = `${CSS_PREFIX}-row`;\r\nexport const CSS_CELL = `${CSS_PREFIX}-cell`;\r\nexport const CSS_SELECT_CELL = `${CSS_PREFIX}-select-cell`;\r\nexport const CSS_HEAD = `${CSS_PREFIX}-head`;\r\nexport const CSS_HEAD_STICKY = `${CSS_PREFIX}-head-sticky`;\r\nexport const CSS_RESIZER = `${CSS_PREFIX}-resizer`;\r\nexport const CSS_EDITING = `${CSS_PREFIX}-editing`;\r\nexport const CSS_ACTIVE = `${CSS_PREFIX}-active`;\r\nexport const CSS_SELECTED = `${CSS_PREFIX}-selected`;\r\nexport const CSS_READONLY = `${CSS_PREFIX}-readonly`;\r\n","import { Cell, createCell } from './cell';\r\nimport { CSS_ROW } from './css';\r\nimport { CellValue, CellValueOptions } from './options';\r\n\r\n\r\nexport interface RowArgs {\r\n    index: number;\r\n    cells: Array<CellValue | CellValueOptions>;\r\n    updateValueCallback: (cell: Cell) => unknown;\r\n}\r\n\r\nexport class Row {\r\n\r\n    cells: Cell[] = [];\r\n    index: number;\r\n\r\n    private elem: HTMLElement;\r\n\r\n    constructor(args: RowArgs) {\r\n        this.index = args.index;\r\n        this.cells = args.cells.map((cell, columnIndex) => createCell(this.index, columnIndex, cell, args.updateValueCallback));\r\n    }\r\n\r\n    element() {\r\n        if (!this.elem) {\r\n            const element = document.createElement('div');\r\n            element.setAttribute('data-ri', String(this.index));\r\n            element.className = CSS_ROW;\r\n            this.elem = element;\r\n            this.cells.forEach(cell => this.elem.appendChild(cell.element()));\r\n        }\r\n        return this.elem;\r\n    }\r\n}\r\n","import { Row } from './row';\r\n\r\nexport interface RenderOptions {\r\n    container: HTMLElement;\r\n    gridContainer: HTMLElement;  // child of container\r\n    grid: HTMLElement;           // child of gridContainer\r\n    head: HTMLElement;\r\n}\r\n\r\nexport interface Renderer {\r\n    rerender(rows: Row[]);\r\n    destroy();\r\n}\r\n\r\nexport class DefaultRenderer implements Renderer {\r\n\r\n    constructor(private options: RenderOptions) {\r\n    }\r\n\r\n    rerender(rows: Row[]) {\r\n        const { grid, head } = this.options;\r\n        grid.innerHTML = '';\r\n        grid.appendChild(head);\r\n        rows.forEach(r => {\r\n            grid.appendChild(r.element());\r\n        });\r\n    }\r\n\r\n    destroy() {\r\n        this.options = null;\r\n    }\r\n}\r\n\r\n\r\nexport class VirtualRenderer implements Renderer {\r\n\r\n    private onScroll;\r\n\r\n    constructor(private options: RenderOptions) {\r\n    }\r\n\r\n    rerender(rows: Row[]) {\r\n        const { grid, head, container, gridContainer } = this.options;\r\n\r\n        if (this.onScroll) {\r\n            container.removeEventListener('scroll', this.onScroll);\r\n        }\r\n        const itemPadding = 4;\r\n\r\n        const current = {\r\n            viewportHeight: undefined,\r\n            itemCount: undefined,\r\n            start: undefined,\r\n            end: undefined,  // last rendered item (including)\r\n        };\r\n\r\n        let rowHeight = 34;  // just a guess\r\n        grid.style.position = 'absolute';\r\n\r\n        const update = (scrollTop: number) => {\r\n            const itemCount = rows.length;\r\n            const viewportHeight = container.offsetHeight;\r\n            const totalContentHeight = itemCount * rowHeight;\r\n\r\n            let startIndex = Math.floor(scrollTop / rowHeight) - itemPadding;\r\n            if (startIndex % 2 > 0) {\r\n                // always start with an odd index to keep alternating styles consistent\r\n                startIndex -= 1;\r\n            }\r\n            startIndex = Math.max(0, startIndex);\r\n\r\n            let visibleNodesCount = Math.ceil(viewportHeight / rowHeight) + 2 * itemPadding;\r\n            visibleNodesCount = Math.min(itemCount - startIndex, visibleNodesCount);\r\n            const endIndex = startIndex + visibleNodesCount - 1;  // last rendered item (including)\r\n            const maxOffsetY = Math.max(0, totalContentHeight - viewportHeight - itemPadding * rowHeight);  // do not go beyond this\r\n            const offsetY = Math.min(maxOffsetY, startIndex * rowHeight);\r\n\r\n            // At the end of the list we will not rerender in order to avoid jumping scrollbar.\r\n            const lastItemIndex = itemCount - 1;\r\n            const lastWasAdded = current.end === lastItemIndex;\r\n            const lastWillBeAdded = endIndex === lastItemIndex;\r\n            const noMoreItemsAvailable = lastWasAdded && lastWillBeAdded;\r\n            const newRangeDiffers = current.start !== startIndex || current.end !== endIndex;\r\n            const heightChanged = viewportHeight !== current.viewportHeight;\r\n            const itemCountChanged = itemCount !== current.itemCount;\r\n            const shouldRerender = itemCountChanged || heightChanged || (newRangeDiffers && !noMoreItemsAvailable);\r\n\r\n            // Render\r\n            if (shouldRerender) {\r\n                const desiredRenderHeight = visibleNodesCount * rowHeight; // viewport + padding\r\n                current.start = startIndex;\r\n                current.end = endIndex;\r\n                current.viewportHeight = viewportHeight;\r\n                current.itemCount = itemCount;\r\n                grid.innerHTML = '';\r\n                grid.appendChild(head);\r\n                const headerHeight = grid.offsetHeight;\r\n                let renderedHeight = 0;\r\n\r\n                // First add items from start to end index at once\r\n                const fragment = document.createDocumentFragment();\r\n                let i = startIndex;\r\n                for (; i <= endIndex && i < rows.length; ++i) {\r\n                    const row = rows[i];\r\n                    fragment.appendChild(row.element());\r\n                }\r\n                grid.appendChild(fragment);\r\n                renderedHeight = grid.offsetHeight - headerHeight;\r\n\r\n                // Add items until we reached the desired height\r\n                for (; renderedHeight < desiredRenderHeight && i < rows.length; ++i) {\r\n                    const row = rows[i];\r\n                    const rowElement = row.element();\r\n                    grid.appendChild(rowElement);\r\n                    renderedHeight += rowElement.offsetHeight;\r\n                }\r\n\r\n                const numberOfRenderedItems = i - startIndex;\r\n                if (numberOfRenderedItems) {\r\n                    rowHeight = renderedHeight / numberOfRenderedItems;\r\n                }\r\n\r\n                gridContainer.style.height = `${totalContentHeight}px`;\r\n                grid.style['top'] = `${offsetY}px`;\r\n            }\r\n        };\r\n\r\n\r\n        const updateFunc = update;\r\n        let animationFrame;\r\n        this.onScroll = (e) => {\r\n            if (animationFrame) {\r\n                cancelAnimationFrame(animationFrame);\r\n            }\r\n            animationFrame = requestAnimationFrame(() => {\r\n                updateFunc(e.target.scrollTop);\r\n            });\r\n        };\r\n\r\n        container.addEventListener('scroll', this.onScroll);\r\n        updateFunc(container.scrollTop);\r\n    }\r\n\r\n    destroy() {\r\n        this.options.container.removeEventListener('scroll', this.onScroll);\r\n        this.options = null;\r\n        this.onScroll = null;\r\n    }\r\n}\r\n","import { EventEmitter, EventHandler, EventHandlerBase } from './events';\r\nimport { parseCSV, writeCSV } from './csv';\r\nimport { query, remove, createElement, queryAll, off, on } from './dom';\r\nimport { CellUpdateOptions, CellValue, CellValueOptions, GridOptions, RowOptions, ScrollOptions } from './options';\r\nimport { Cell } from './cell';\r\nimport { CSS_CELL, CSS_CONTAINER, CSS_CONTAINER_SCROLL, CSS_GRID, CSS_HEAD, CSS_HEAD_STICKY, CSS_RESIZER, CSS_ROW } from './css';\r\nimport { Row } from './row';\r\nimport { DefaultRenderer, Renderer, VirtualRenderer } from './render';\r\n\r\n\r\nexport interface InputArgs {\r\n    grid: Grid;\r\n    row: number;\r\n    col: number;\r\n    value: string;\r\n}\r\n\r\nexport interface SelectArgs {\r\n    grid: Grid;\r\n    selection: Array<{ row: number, col: number }>;\r\n}\r\n\r\n\r\nexport class Grid {\r\n    private container: HTMLElement;\r\n    private grid: HTMLElement;\r\n    private rows: Row[] = [];\r\n    private cells: Cell[] = [];\r\n    private activeCell: Cell;\r\n    private events: EventEmitter = new EventEmitter();\r\n    private options: GridOptions;\r\n    private cellInput: HTMLInputElement;\r\n    private hiddenInput: HTMLElement;\r\n    private cleanups: Array<() => any> = [];\r\n    private render: Renderer;\r\n\r\n    constructor(container: string | HTMLElement, options?: GridOptions) {\r\n        this.container = typeof container === 'string' ? query<HTMLElement>(container) : container;\r\n        if (options) {\r\n            this.init(options);\r\n        }\r\n    }\r\n\r\n    init(options: GridOptions) {\r\n        this.destroy();\r\n        options.scroll = getScrollOptions(options);\r\n        this.options = options;\r\n        const container = this.container;\r\n        const rows = this.rows;\r\n        container.innerHTML = '';\r\n        rows.length = 0;\r\n\r\n        if (options.input) {\r\n            this.cellInput = typeof options.input === 'function' ? options.input() : options.input;\r\n            remove(this.cellInput);\r\n        }\r\n        else {\r\n            this.cellInput = createElement<HTMLInputElement>(`<input id=\"celled-cell-input\" type=\"text\" >`);\r\n        }\r\n        this.hiddenInput = createElement(\r\n            '<div id=\"celled-hidden-input\" style=\"position:absolute; z-index:-1; left:2px; top: 2px;\" contenteditable tabindex=\"0\"></div>');\r\n\r\n        if (options.scroll) {\r\n            container.classList.add(CSS_CONTAINER_SCROLL);\r\n        }\r\n        const gridContainer = createElement(`<div class=\"${CSS_CONTAINER}\"></div>`);\r\n\r\n        const stickyHeader = options.scroll.stickyHeader;\r\n        const headCss = `${CSS_ROW} ${CSS_HEAD} ${stickyHeader ? CSS_HEAD_STICKY : ''}`;\r\n        const head = createElement(`<div class=\"${headCss}\"></div>`);\r\n        const grid = this.grid = createElement(`<div class=\"${CSS_GRID}\"></div>`);\r\n\r\n        container.appendChild(gridContainer);\r\n        gridContainer.appendChild(this.hiddenInput);\r\n        gridContainer.appendChild(grid);\r\n        options.cols.forEach((c, index) => head.appendChild(this.createHeadCell(c, index)));\r\n\r\n        const renderOptions = { container, gridContainer, grid, head };\r\n        this.render = options.scroll.virtualScroll ? new VirtualRenderer(renderOptions) : new DefaultRenderer(renderOptions);\r\n\r\n        this.createRows();\r\n        this.initMouse();\r\n        this.initKeys();\r\n        this.initClipboard();\r\n        this.resetColumnWidths();\r\n    }\r\n\r\n    destroy() {\r\n        if (this.render) {\r\n            this.render.destroy();\r\n            this.render = null;\r\n        }\r\n        this.cleanups.forEach(c => c());\r\n        this.cleanups.length = 0;\r\n        if (this.grid) {\r\n            remove(this.grid);\r\n        }\r\n        this.cells.forEach(c => c.destroy());\r\n        this.cells.length = 0;\r\n        this.rows.length = 0;\r\n        this.grid = null;\r\n        this.hiddenInput = null;\r\n        this.cellInput = null;\r\n        this.events = new EventEmitter();\r\n    }\r\n\r\n\r\n    /**\r\n     * Adds an event listener.\r\n     * Grid fires these events:\r\n     * 'input', 'focus', 'select'\r\n     */\r\n    on(event: 'input' | 'focus', handler: EventHandler<InputArgs>);\r\n    on(event: 'select', handler: EventHandler<SelectArgs>);\r\n    on(event: string, handler: EventHandlerBase) {\r\n        this.events.addHandler(event, handler);\r\n    }\r\n\r\n    update(rowIndex: number, colIndex: number, value: CellValue | CellUpdateOptions, emit?: boolean) {\r\n        const row = this.rows[rowIndex];\r\n        const cell = row.cells[colIndex];\r\n        if (cell) {\r\n            cell.set(value);\r\n            this.updateValue(cell, emit);\r\n        }\r\n    }\r\n\r\n    addRows(rows: RowOptions[]) {\r\n        [].push.apply(this.options.rows, rows);\r\n        rows.forEach(r => {\r\n            const newRow = this.createAndAddRow(r);\r\n            newRow.cells.forEach(c => this.emitInput(c));\r\n        });\r\n        this.flattenCells();\r\n        this.renderRows();\r\n    }\r\n\r\n    addRow() {\r\n        this.addRows([this.options.cols.map(c => '')]);\r\n    }\r\n\r\n    private resetColumnWidths() {\r\n        const allCells = queryAll(this.container, `${css(CSS_HEAD)} ${css(CSS_CELL)}`);\r\n        allCells.forEach((c: HTMLElement, i) => {\r\n            c.style.width = c.offsetWidth + 'px';\r\n        });\r\n    }\r\n\r\n    private createHeadCell(text: string | number, columnIndex: number) {\r\n        const column = createElement(`<div class=\"${CSS_CELL}\" data-ci=\"${columnIndex}\"><span>${text}</span></div>`);\r\n        const resizer = createElement(`<div class=\"${CSS_RESIZER}\"></div>`);\r\n        column.appendChild(resizer);\r\n\r\n        let downPosition = null;\r\n        let nextColumn = null;\r\n        let currentWidth = null;\r\n        let currentNextWidth = null;\r\n        let selection = null;\r\n\r\n        const mousemove = (e: MouseEvent) => {\r\n            if (selection) {\r\n                let col = e.target as Element;\r\n                while (col) {\r\n                    const ciAttr = col.getAttribute('data-ci');\r\n                    const ci = +ciAttr;\r\n                    if (ciAttr !== null && !isNaN(ci)) {\r\n                        const minCol = Math.min(columnIndex, ci);\r\n                        const maxCol = Math.max(columnIndex, ci);\r\n                        if (selection[0] !== minCol || selection[1] !== maxCol) {\r\n                            selection = [minCol, maxCol];\r\n                            this.cells.forEach(c => c.select(c.col >= minCol && c.col <= maxCol));\r\n                            this.emitSelect();\r\n                        }\r\n                        break;\r\n                    }\r\n                    col = col.parentElement;\r\n                }\r\n            }\r\n            else {\r\n                // column resizing\r\n                const diff = e.pageX - downPosition;\r\n                if (nextColumn) {\r\n                    nextColumn.style.width = (currentNextWidth - diff) + 'px';\r\n                }\r\n                column.style.width = (currentWidth + diff) + 'px';\r\n            }\r\n        };\r\n\r\n        const mouseup = () => {\r\n            downPosition = null;\r\n            selection = null;\r\n            off(document, 'mousemove', mousemove);\r\n            off(document, 'mouseup', mouseup);\r\n            this.resetColumnWidths();\r\n        };\r\n\r\n        const cleanupMousedown = on(column, 'mousedown', (e: MouseEvent) => {\r\n            if (e.target === resizer) {\r\n                // Resize columns\r\n                nextColumn = column.nextElementSibling;\r\n                downPosition = e.pageX;\r\n                currentWidth = column.offsetWidth;\r\n                currentNextWidth = nextColumn ? nextColumn.offsetWidth : null;\r\n            }\r\n            else if (this.rows.length) {\r\n                // Select column\r\n                const i = +column.getAttribute('data-ci');\r\n                selection = true;\r\n                this.cells.forEach(c => c.activate(false).select(c.col === i));\r\n                selection = [i, i];\r\n                this.focusHiddenInput();\r\n                this.activeCell = this.rows[0].cells[i];\r\n                this.emitSelect();\r\n            }\r\n            on(document, 'mouseup', mouseup);\r\n            on(document, 'mousemove', mousemove);\r\n            e.preventDefault();\r\n        });\r\n        this.cleanups.push(cleanupMousedown);\r\n        return column;\r\n    }\r\n\r\n    private focusHiddenInput() {\r\n        // Focus the hidden input element to receive paste events.\r\n        // Prevent scrolling up if input was blurred at the end of a long table.\r\n        this.hiddenInput.focus({ preventScroll: true });\r\n    }\r\n\r\n    private createAndAddRow(r: RowOptions): Row {\r\n        const row = new Row({\r\n            index: this.rows.length,\r\n            cells: r,\r\n            updateValueCallback: cell => this.emitInput(cell)\r\n        });\r\n        this.rows.push(row);\r\n        return row;\r\n    }\r\n\r\n    private createRows() {\r\n        this.rows = [];\r\n        this.options.rows.forEach(r => this.createAndAddRow(r));\r\n        this.flattenCells();\r\n        this.renderRows();\r\n    }\r\n\r\n    private renderRows() {\r\n        this.render.rerender(this.rows);\r\n    }\r\n\r\n    private flattenCells() {\r\n        this.cells = [];\r\n        for (let i = 0, end = this.rows.length; i < end; ++i) {\r\n            this.cells.push(...this.rows[i].cells);\r\n        }\r\n    }\r\n\r\n    private initMouse() {\r\n        let downCellIndex: number;\r\n        let downRowIndex: number;\r\n\r\n        let selectionIdentifier: string = null;\r\n        const rememberSelection = (r1, c1, r2, c2) => '' + r1 + c1 + r2 + c2;\r\n\r\n        const findTargetCell = (cell: Element, level = 0): Cell => {\r\n            if (!cell || !cell.parentElement) {\r\n                return;\r\n            }\r\n            const cellIndexAttr = cell.getAttribute('data-ci');\r\n            if (cellIndexAttr === null && level < 2) {\r\n                return findTargetCell(cell.parentElement, level + 1);\r\n            }\r\n            const rowIndexAttr = cell.parentElement.getAttribute('data-ri');\r\n            const cellIndex = +cellIndexAttr;\r\n            const rowIndex = +rowIndexAttr;\r\n            if (cellIndexAttr && rowIndexAttr && !isNaN(cellIndex) && !isNaN(rowIndex)) {\r\n                return this.rows[rowIndex].cells[cellIndex];\r\n            }\r\n        };\r\n\r\n        const getTargetCell = (e: MouseEvent) => {\r\n            const cell = e.target as Element;\r\n            return findTargetCell(cell);\r\n        };\r\n\r\n        const mousemove = (moveEvent: MouseEvent) => {\r\n            const targetCell = getTargetCell(moveEvent);\r\n            if (targetCell) {\r\n                const rowIndex = targetCell.row;\r\n                const cellIndex = targetCell.col;\r\n                const firstRow = Math.min(rowIndex, downRowIndex);\r\n                const lastRow = Math.max(rowIndex, downRowIndex);\r\n                const firstCol = Math.min(cellIndex, downCellIndex);\r\n                const lastCol = Math.max(cellIndex, downCellIndex);\r\n                const newSelectionIdentifier = rememberSelection(firstRow, firstCol, lastRow, lastCol);\r\n                if (selectionIdentifier !== newSelectionIdentifier) {\r\n                    selectionIdentifier = newSelectionIdentifier;\r\n                    this.unselect();\r\n                    for (let ri = firstRow; ri <= lastRow; ++ri) {\r\n                        for (let ci = firstCol; ci <= lastCol; ++ci) {\r\n                            this.rows[ri].cells[ci].select();\r\n                        }\r\n                    }\r\n                    this.emitSelect();\r\n                }\r\n            }\r\n        };\r\n\r\n        const mouseup = () => {\r\n            off(document, 'mousemove', mousemove);\r\n            off(document, 'mouseup', mouseup);\r\n        };\r\n\r\n        let lastMouseDown = Date.now();\r\n        const cleanupMousedown = on(this.grid, 'mousedown', (e: MouseEvent) => {\r\n            const cell = getTargetCell(e);\r\n            if (cell) {\r\n                const timeSinceLast = Date.now() - lastMouseDown;\r\n                lastMouseDown = Date.now();\r\n                if (cell.takesMouse()) {\r\n                    // The cell is already in edit mode. Do nothing and continue with default event handling\r\n                    return;\r\n                }\r\n                else if (cell === this.activeCell && !cell.readonly && timeSinceLast < 300) {\r\n                    // Double click on cell to start edit mode\r\n                    // if (Array.isArray(cell.options)) {\r\n                    //     cell.startSelect(this.cellSelect);\r\n                    // }\r\n                    cell.startEdit(this.cellInput);\r\n                    this.emitFocus();\r\n                }\r\n                else {\r\n                    const rowIndex = cell.row;\r\n                    const cellIndex = cell.col;\r\n                    downRowIndex = rowIndex;\r\n                    downCellIndex = cellIndex;\r\n                    selectionIdentifier = rememberSelection(rowIndex, cellIndex, rowIndex, cellIndex);\r\n                    this.activate(cell);\r\n                    on(document, 'mouseup', mouseup);\r\n                    on(document, 'mousemove', mousemove);\r\n                }\r\n                e.preventDefault();\r\n            }\r\n        });\r\n        this.cleanups.push(cleanupMousedown);\r\n\r\n        const cleanupMouseup = on(document, 'mouseup', (e: MouseEvent) => {\r\n            if (this.activeCell) {\r\n                // Unselect all if was click outside of the grid.\r\n                for (let target = e.target as Node; target; target = target.parentNode) {\r\n                    if (target === this.container) {\r\n                        return;\r\n                    }\r\n                }\r\n                this.activeCell.activate(false);\r\n                if (this.unselect()) {\r\n                    this.emitSelect();\r\n                }\r\n            }\r\n        });\r\n        this.cleanups.push(cleanupMouseup);\r\n    }\r\n\r\n    private activate(cell: Cell, doActivate = true) {\r\n        if (this.activeCell) {\r\n            this.activeCell.activate(false);\r\n        }\r\n        let selectionChanged = false;\r\n        this.cells.forEach(c => {\r\n            selectionChanged = c === cell ? (c.selected() !== doActivate) : (selectionChanged || c.selected());\r\n            c.select(false);\r\n        });\r\n        this.activeCell = cell.select(doActivate).activate(doActivate);\r\n        if (selectionChanged) {\r\n            this.emitSelect();\r\n        }\r\n        this.focusHiddenInput();\r\n    }\r\n\r\n    private moveActive(rowDelta: number, colDelta: number, addRows = false) {\r\n        const activeCell = this.activeCell;\r\n        if (activeCell) {\r\n            const rows = this.rows;\r\n            const rowIndex = activeCell.row + rowDelta;\r\n            while (addRows && this.options.canAddRows && rowIndex >= rows.length) {\r\n                this.addRow();\r\n            }\r\n            const nextRow = rows[rowIndex];\r\n            if (nextRow) {\r\n                const cell = nextRow.cells[activeCell.col + colDelta];\r\n                if (cell) {\r\n                    this.activate(cell);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private initKeys() {\r\n        const hiddenInput = this.hiddenInput;\r\n        const cellInput = this.cellInput;\r\n\r\n        this.cleanups.push(on(hiddenInput, 'keydown', (e: KeyboardEvent) => {\r\n            e = e || window.event as KeyboardEvent;\r\n            const keyCode = e.keyCode;\r\n            if (keyCode === 46) {  // del\r\n                this.cells.forEach(cell => {\r\n                    if (cell.selected()) {\r\n                        this.setCell(cell, '');\r\n                    }\r\n                });\r\n                e.preventDefault();\r\n            }\r\n            if (keyCode === 37) {\r\n                this.moveActive(0, -1);\r\n            }\r\n            if (keyCode === 38) {\r\n                this.moveActive(-1, 0);\r\n            }\r\n            if (keyCode === 39) {\r\n                this.moveActive(0, 1);\r\n            }\r\n            if (keyCode === 40) {\r\n                this.moveActive(1, 0);\r\n            }\r\n        }));\r\n\r\n        const onInput = (e: KeyboardEvent) => {\r\n            const activeCell = this.activeCell;\r\n            if (activeCell && !activeCell.readonly && activeCell.takesKey()) {\r\n                this.updateValue(activeCell, true);\r\n                this.cells.forEach(cell => {\r\n                    if (cell.selected() && cell !== activeCell) {\r\n                        this.setCell(cell, activeCell.value());\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        this.cleanups.push(on(cellInput, 'input', onInput));\r\n        this.cleanups.push(on(cellInput, 'keydown', (e: KeyboardEvent) => {\r\n            if (e.keyCode === 13) {\r\n                // ENTER, stop edit and move to next row\r\n                this.moveActive(0, 0);\r\n                this.moveActive(1, 0, true);\r\n                e.preventDefault();\r\n            }\r\n            if (e.keyCode === 27) {\r\n                // ESCAPE, stop edit but stay at same cell\r\n                this.moveActive(0, 0);\r\n                e.preventDefault();\r\n            }\r\n        }));\r\n\r\n        this.cleanups.push(on(hiddenInput, 'keypress', (e: KeyboardEvent) => {\r\n            const activeCell = this.activeCell;\r\n            if (activeCell && !activeCell.readonly && !activeCell.takesKey()) {\r\n                activeCell.startEdit(cellInput, true);\r\n                this.emitFocus();\r\n            }\r\n            else {\r\n                e.preventDefault();\r\n            }\r\n        }));\r\n    }\r\n\r\n    pasteCSV(csvText: string, separator: string, startRow?: number, startCol?: number) {\r\n        const csv = parseCSV(csvText, separator);\r\n        const activeCell = this.activeCell;\r\n        if (isNaN(startRow) && !activeCell) {\r\n            return;\r\n        }\r\n        startRow = isNaN(startRow) ? activeCell.row : startRow;\r\n        startCol = isNaN(startCol) ? activeCell.col : startCol;\r\n\r\n        csv.forEach((csvRow, csvRowIndex) => {\r\n            let tableRow = this.rows[startRow + csvRowIndex];\r\n            if (!tableRow && this.options.canAddRows) {\r\n                const prevRow = this.rows[startRow];\r\n                this.addRows([prevRow.cells.map(c => '')]);\r\n                tableRow = this.rows[startRow + csvRowIndex];\r\n            }\r\n            const tableCol = startCol;\r\n            const isLastEmptyRow = csvRow.length === 1 && csvRow[0] === '';\r\n            if (tableRow && !isLastEmptyRow) {\r\n                csvRow.forEach((csvCell, csvColIndex) => {\r\n                    const cell = tableRow.cells[tableCol + csvColIndex];\r\n                    if (cell && !cell.readonly) {\r\n                        this.setCell(cell, csvCell);\r\n                        cell.select();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private initClipboard() {\r\n        const cleanupPaste = on(this.hiddenInput, 'paste', (e: ClipboardEvent) => {\r\n            // Don't actually paste to hidden input\r\n            e.preventDefault();\r\n            const text = (e.clipboardData || (window as any).clipboardData).getData('text');\r\n            this.pasteCSV(text, '\\t');\r\n        });\r\n\r\n        const cleanupCopy = on(this.hiddenInput, 'copy', (e: ClipboardEvent) => {\r\n            e.preventDefault();\r\n            const activeCell = this.activeCell;\r\n            if (!activeCell) {\r\n                return;\r\n            }\r\n\r\n            const csv = [];\r\n            for (let ri = activeCell.row; ; ri++) {\r\n                const row = this.rows[ri];\r\n                const csvRow = [];\r\n                if (!row || !row.cells[activeCell.col] || !row.cells[activeCell.col].selected()) {\r\n                    break;\r\n                }\r\n                for (let ci = activeCell.col; ; ++ci) {\r\n                    const cell = row.cells[ci];\r\n                    if (!cell || !cell.selected()) {\r\n                        break;\r\n                    }\r\n                    csvRow.push(cell.value());\r\n                }\r\n                csv.push(csvRow);\r\n            }\r\n            const clipboard = (e.clipboardData || (window as any).clipboardData);\r\n            clipboard.setData('text/plain', writeCSV(csv, '\\t'));\r\n        });\r\n        this.cleanups.push(cleanupPaste);\r\n        this.cleanups.push(cleanupCopy);\r\n    }\r\n\r\n    private setCell(cell: Cell, value: string) {\r\n        if (!cell.readonly) {\r\n            cell.set(value);\r\n            this.updateValue(cell, true);\r\n        }\r\n    }\r\n\r\n    private unselect(): boolean {\r\n        let selectionChanged = false;\r\n        this.cells.forEach(c => {\r\n            selectionChanged = selectionChanged || c.selected();\r\n            c.select(false);\r\n        });\r\n        return selectionChanged;\r\n    }\r\n\r\n    private updateValue(cell: Cell, emit: boolean) {\r\n        const colIndex = cell.col;\r\n        const rowOption = this.options.rows[cell.row];\r\n        const cellValue = rowOption[colIndex];\r\n        if (typeof cellValue === 'string' || typeof cellValue === 'number') {\r\n            rowOption[colIndex] = cell.value();\r\n        }\r\n        else {\r\n            cellValue.value = cell.value();\r\n        }\r\n        if (emit) {\r\n            this.emitInput(cell);\r\n        }\r\n    }\r\n\r\n    private emitInput(cell: Cell) {\r\n        this.events.emit<InputArgs>('input', {\r\n            grid: this,\r\n            col: cell.col,\r\n            row: cell.row,\r\n            value: cell.value(),\r\n        });\r\n    }\r\n\r\n    private emitFocus() {\r\n        const cell = this.activeCell;\r\n        this.events.emit<InputArgs>('focus', {\r\n            grid: this,\r\n            col: cell.col,\r\n            row: cell.row,\r\n            value: cell.value(),\r\n        });\r\n    }\r\n\r\n    private emitSelect() {\r\n        this.events.emit<SelectArgs>('select', {\r\n            grid: this,\r\n            selection: this.cells.filter(c => c.selected()).map(c => ({\r\n                row: c.row,\r\n                col: c.col,\r\n            })),\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction css(className) {\r\n    return '.' + className;\r\n}\r\n\r\nfunction trueOr(value: boolean): boolean {\r\n    return value === false ? false : true;\r\n}\r\n\r\nfunction getScrollOptions(options: GridOptions): ScrollOptions {\r\n    const scroll = options.scroll;\r\n    if (!scroll) {\r\n        return {};\r\n    }\r\n    return {\r\n        enabled: trueOr(scroll.enabled),\r\n        virtualScroll: trueOr(scroll.virtualScroll),\r\n        stickyHeader: trueOr(scroll.stickyHeader),\r\n    };\r\n}\r\n\r\n// ----\r\n","// ref: https://stackoverflow.com/a/14991797/498298\r\n// This will parse a delimited string into an array of\r\n// arrays. The default delimiter is the comma, but this\r\n// can be overriden in the second argument.\r\nexport function parseCSV(str: string, delimiter: string) {\r\n    const arr: string[][] = [];\r\n    let quote = false;  // 'true' means we're inside a quoted field\r\n\r\n    // Iterate over each character, keep track of current row and column (of the returned array)\r\n    for (let row = 0, col = 0, i = 0; i < str.length; i++) {\r\n        const currentChar = str[i];\r\n        const nextChar = str[i + 1];\r\n        arr[row] = arr[row] || [];             // Create a new row if necessary\r\n        arr[row][col] = arr[row][col] || '';   // Create a new column (start with empty string) if necessary\r\n\r\n        // If the current character is a quotation mark, and we're inside a\r\n        // quoted field, and the next character is also a quotation mark,\r\n        // add a quotation mark to the current column and skip the next character\r\n        if (currentChar === '\"' && quote && nextChar === '\"') {\r\n            arr[row][col] += currentChar;\r\n            ++i;\r\n            continue;\r\n        }\r\n\r\n        // If it's just one quotation mark, begin/end quoted field\r\n        if (currentChar === '\"') {\r\n            quote = !quote;\r\n            continue;\r\n        }\r\n\r\n        // If it's a delimiter and we're not in a quoted field, move on to the next column\r\n        if (currentChar === delimiter && !quote) {\r\n            ++col;\r\n            continue;\r\n        }\r\n\r\n        // If it's a newline (CRLF) and we're not in a quoted field, skip the next character\r\n        // and move on to the next row and move to column 0 of that new row\r\n        if (currentChar === '\\r' && nextChar === '\\n' && !quote) {\r\n            ++row;\r\n            col = 0;\r\n            ++i;\r\n            continue;\r\n        }\r\n\r\n        // If it's a newline (LF or CR) and we're not in a quoted field,\r\n        // move on to the next row and move to column 0 of that new row\r\n        if ((currentChar === '\\n' || currentChar === '\\r') && !quote) {\r\n            ++row;\r\n            col = 0;\r\n            continue;\r\n        }\r\n\r\n        // Otherwise, append the current character to the current column\r\n        arr[row][col] += currentChar;\r\n    }\r\n    return arr;\r\n}\r\n\r\n\r\nexport function writeCSV(values: Array<string[]>, separator: string, linebreak = '\\n') {\r\n\r\n    let content = '';\r\n    values.forEach((row, ri) => {\r\n        if (ri > 0) {\r\n            content += linebreak;\r\n        }\r\n        row.forEach((cell, ci) => {\r\n            cell = cell.replace(/\"/g, '\"\"');\r\n            if (cell.search(/(\"|,|\\n)/g) >= 0) {\r\n                cell = '\"' + cell + '\"';\r\n            }\r\n            if (ci > 0) {\r\n                content += separator;\r\n            }\r\n            content += cell;\r\n        });\r\n    });\r\n    return content;\r\n\r\n}\r\n"],"names":["this","EventEmitter","event","handler","handlers","push","splice","indexOf","args","forEach","createElement","html","div","document","innerHTML","trim","firstChild","on","element","listener","addEventListener","removeEventListener","offFunc","off","remove","node","parentNode","parentElement","removeChild","row","col","value","isPlainValue","val","String","readonly","extraCss","css","InputCell","elem","appendChild","valueElement","setAttribute","setCss","isSelected","doSelect","doActivate","isActive","input","blur","setValue","isDefined","toString","className","CSS_PREFIX","cssIf","select","textContent","style","width","offsetWidth","focus","takesKey","valueSpan","createTextNode","callback","options","selectElement","i","length","options_1","_i","option","optionElement","setOptions","set","_this","SelectCell","CSS_CELL","selectContent","useValue","index","cells","map","cell","columnIndex","updateValueCallback","Array","isArray","Row","DefaultRenderer","rows","_a","grid","head","r","VirtualRenderer","container","gridContainer","onScroll","current","viewportHeight","undefined","itemCount","start","end","rowHeight","position","animationFrame","updateFunc","scrollTop","offsetHeight","totalContentHeight","startIndex","Math","floor","max","visibleNodesCount","ceil","endIndex","min","maxOffsetY","offsetY","lastItemIndex","noMoreItemsAvailable","newRangeDiffers","heightChanged","desiredRenderHeight","headerHeight","renderedHeight","fragment","createDocumentFragment","rowElement","numberOfRenderedItems","height","e","cancelAnimationFrame","requestAnimationFrame","target","elOrCss","cssSelector","querySelector","init","Grid","destroy","scroll","enabled","trueOr","virtualScroll","stickyHeader","getScrollOptions","cellInput","hiddenInput","classList","add","CSS_ROW","cols","c","createHeadCell","renderOptions","render","createRows","initMouse","initKeys","initClipboard","resetColumnWidths","cleanups","events","addHandler","rowIndex","colIndex","emit","updateValue","apply","createAndAddRow","emitInput","flattenCells","renderRows","addRows","slice","call","querySelectorAll","text","column","resizer","downPosition","nextColumn","currentWidth","currentNextWidth","selection","mousemove","ciAttr","getAttribute","ci","isNaN","minCol_1","maxCol_1","emitSelect","diff","pageX","mouseup","cleanupMousedown","nextElementSibling","i_1","activate","focusHiddenInput","activeCell","preventDefault","preventScroll","rerender","downCellIndex","downRowIndex","selectionIdentifier","rememberSelection","r1","c1","r2","c2","findTargetCell","level","cellIndexAttr","rowIndexAttr","cellIndex","getTargetCell","moveEvent","targetCell","firstRow","lastRow","firstCol","lastCol","newSelectionIdentifier","unselect","ri","lastMouseDown","Date","now","timeSinceLast","takesMouse","startEdit","emitFocus","cleanupMouseup","selectionChanged","selected","rowDelta","colDelta","canAddRows","addRow","nextRow","keyCode","window","setCell","moveActive","csvText","separator","startRow","startCol","csv","str","delimiter","arr","quote","currentChar","nextChar","parseCSV","csvRow","csvRowIndex","tableRow","prevRow","tableCol","isLastEmptyRow","csvCell","csvColIndex","cleanupPaste","clipboardData","getData","pasteCSV","cleanupCopy","setData","values","linebreak","content","replace","search","writeCSV","rowOption","cellValue","filter"],"mappings":"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"}